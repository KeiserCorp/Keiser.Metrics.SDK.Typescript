/* tslint:disable */
/* eslint-disable */
/**
 * metrics-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  A500GetUserResponse,
  A500MachineStateResponse,
  ApplicationListResponse,
  ApplicationResponse,
  CardioExerciseListResponse,
  CardioExerciseMuscleListResponse,
  CardioExerciseMuscleResponse,
  CardioExerciseResponse,
  CardioExerciseVariantListResponse,
  CardioExerciseVariantResponse,
  CardioMachineListResponse,
  CardioMachineResponse,
  DevelopmentAccountListResponse,
  DevelopmentAccountRelationshipListResponse,
  DevelopmentAccountRelationshipRequestListResponse,
  DevelopmentAccountRelationshipRequestResponse,
  DevelopmentAccountRelationshipResponse,
  DevelopmentAccountResponse,
  EmailAddressListResponse,
  EmailAddressResponse,
  EndpointsResponse,
  ErrorResponse,
  ExerciseAliasListResponse,
  ExerciseAliasResponse,
  ExerciseOrdinalSetAssignmentListResponse,
  ExerciseOrdinalSetAssignmentResponse,
  ExerciseOrdinalSetListResponse,
  ExerciseOrdinalSetResponse,
  FacilityAccessControlIPRangeListResponse,
  FacilityAccessControlIPRangeResponse,
  FacilityAccessControlKioskResponse,
  FacilityAccessControlResponse,
  FacilityCardioMachineResponse,
  FacilityConfigurationResponse,
  FacilityInBodyIntegrationResponse,
  FacilityKioskTokenResponse,
  FacilityLicenseListResponse,
  FacilityLicenseResponse,
  FacilityListResponse,
  FacilityProfileResponse,
  FacilityRelationshipRequestListResponse,
  FacilityRelationshipRequestResponse,
  FacilityRelationshipResponse,
  FacilityResponse,
  FacilitySessionListResponse,
  FacilityStrengthMachineBulkCreateResponse,
  FacilityStrengthMachineConfigurationResponse,
  FacilityStrengthMachineInitializerOTPTokenResponse,
  FacilityStrengthMachineInitializerTokenResponse,
  FacilityStrengthMachineListResponse,
  FacilityStrengthMachineMaintenanceRecordListResponse,
  FacilityStrengthMachineMaintenanceRecordResponse,
  FacilityStrengthMachineResponse,
  FacilityStrengthMachineUtilizationInstanceListResponse,
  FacilityStrengthMachineUtilizationInstanceResponse,
  FacilityUserRelationshipListResponse,
  FacilityUserResponse,
  HealthResponse,
  HeartRateDataSetListResponse,
  HeartRateDataSetResponse,
  HeightMeasurementListResponse,
  HeightMeasurementResponse,
  KioskSessionResponse,
  MSeriesAppSessionExportResponse,
  MSeriesAppSessionListResponse,
  MSeriesAppSessionResponse,
  MSeriesChallengeListResponse,
  MSeriesChallengeParticipantListResponse,
  MSeriesChallengeParticipantResponse,
  MSeriesChallengeResponse,
  MSeriesDataSetListResponse,
  MSeriesDataSetResponse,
  MSeriesDataSetSegmentResponse,
  MSeriesFtpMeasurementListResponse,
  MSeriesFtpMeasurementResponse,
  MSeriesProfileStatsResponse,
  MachineAdjustmentListResponse,
  MachineAdjustmentResponse,
  OAuthServiceListResponse,
  OAuthServiceResponse,
  OauthResponse,
  PrimaryEmailAddressResponse,
  PrivilegedFacilityRelationshipRequestListResponse,
  ProfileResponse,
  RedirectResponse,
  SessionListResponse,
  SessionPlanListResponse,
  SessionPlanResponse,
  SessionPlanSequenceInstanceListResponse,
  SessionPlanSequenceInstanceResponse,
  SessionPlanSequenceListResponse,
  SessionPlanSequenceResponse,
  SessionPlanSequenceTemplateListResponse,
  SessionPlanSequenceTemplateResponse,
  SessionPlanSetInstanceResponse,
  SessionPlanSetListResponse,
  SessionPlanSetResponse,
  SessionPlanSetTemplateListResponse,
  SessionPlanSetTemplateResponse,
  SessionPlanTemplateListResponse,
  SessionPlanTemplateResponse,
  SessionResponse,
  SessionStartResponse,
  StatusResponse,
  StrengthExerciseListResponse,
  StrengthExerciseMuscleListResponse,
  StrengthExerciseMuscleResponse,
  StrengthExerciseResponse,
  StrengthExerciseVariantListResponse,
  StrengthExerciseVariantResponse,
  StrengthMachineDataSetExportResponse,
  StrengthMachineDataSetListResponse,
  StrengthMachineDataSetResponse,
  StrengthMachineHistoryListResponse,
  StrengthMachineInitializeResponse,
  StrengthMachineListResponse,
  StrengthMachineProfileStatsResponse,
  StrengthMachineResponse,
  StretchExerciseListResponse,
  StretchExerciseMuscleListResponse,
  StretchExerciseMuscleResponse,
  StretchExerciseResponse,
  StretchExerciseVariantListResponse,
  StretchExerciseVariantResponse,
  SubscriptionResponse,
  TimeResponse,
  UserApplicationAuthorizationDeveloperListResponse,
  UserApplicationAuthorizationResponse,
  UserApplicationAuthorizationUserListResponse,
  UserFacilityRelationshipListResponse,
  UserInBodyIntegrationResponse,
  UserResponse,
  WeightMeasurementListResponse,
  WeightMeasurementResponse,
} from '../models';
import {
    A500GetUserResponseFromJSON,
    A500GetUserResponseToJSON,
    A500MachineStateResponseFromJSON,
    A500MachineStateResponseToJSON,
    ApplicationListResponseFromJSON,
    ApplicationListResponseToJSON,
    ApplicationResponseFromJSON,
    ApplicationResponseToJSON,
    CardioExerciseListResponseFromJSON,
    CardioExerciseListResponseToJSON,
    CardioExerciseMuscleListResponseFromJSON,
    CardioExerciseMuscleListResponseToJSON,
    CardioExerciseMuscleResponseFromJSON,
    CardioExerciseMuscleResponseToJSON,
    CardioExerciseResponseFromJSON,
    CardioExerciseResponseToJSON,
    CardioExerciseVariantListResponseFromJSON,
    CardioExerciseVariantListResponseToJSON,
    CardioExerciseVariantResponseFromJSON,
    CardioExerciseVariantResponseToJSON,
    CardioMachineListResponseFromJSON,
    CardioMachineListResponseToJSON,
    CardioMachineResponseFromJSON,
    CardioMachineResponseToJSON,
    DevelopmentAccountListResponseFromJSON,
    DevelopmentAccountListResponseToJSON,
    DevelopmentAccountRelationshipListResponseFromJSON,
    DevelopmentAccountRelationshipListResponseToJSON,
    DevelopmentAccountRelationshipRequestListResponseFromJSON,
    DevelopmentAccountRelationshipRequestListResponseToJSON,
    DevelopmentAccountRelationshipRequestResponseFromJSON,
    DevelopmentAccountRelationshipRequestResponseToJSON,
    DevelopmentAccountRelationshipResponseFromJSON,
    DevelopmentAccountRelationshipResponseToJSON,
    DevelopmentAccountResponseFromJSON,
    DevelopmentAccountResponseToJSON,
    EmailAddressListResponseFromJSON,
    EmailAddressListResponseToJSON,
    EmailAddressResponseFromJSON,
    EmailAddressResponseToJSON,
    EndpointsResponseFromJSON,
    EndpointsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExerciseAliasListResponseFromJSON,
    ExerciseAliasListResponseToJSON,
    ExerciseAliasResponseFromJSON,
    ExerciseAliasResponseToJSON,
    ExerciseOrdinalSetAssignmentListResponseFromJSON,
    ExerciseOrdinalSetAssignmentListResponseToJSON,
    ExerciseOrdinalSetAssignmentResponseFromJSON,
    ExerciseOrdinalSetAssignmentResponseToJSON,
    ExerciseOrdinalSetListResponseFromJSON,
    ExerciseOrdinalSetListResponseToJSON,
    ExerciseOrdinalSetResponseFromJSON,
    ExerciseOrdinalSetResponseToJSON,
    FacilityAccessControlIPRangeListResponseFromJSON,
    FacilityAccessControlIPRangeListResponseToJSON,
    FacilityAccessControlIPRangeResponseFromJSON,
    FacilityAccessControlIPRangeResponseToJSON,
    FacilityAccessControlKioskResponseFromJSON,
    FacilityAccessControlKioskResponseToJSON,
    FacilityAccessControlResponseFromJSON,
    FacilityAccessControlResponseToJSON,
    FacilityCardioMachineResponseFromJSON,
    FacilityCardioMachineResponseToJSON,
    FacilityConfigurationResponseFromJSON,
    FacilityConfigurationResponseToJSON,
    FacilityInBodyIntegrationResponseFromJSON,
    FacilityInBodyIntegrationResponseToJSON,
    FacilityKioskTokenResponseFromJSON,
    FacilityKioskTokenResponseToJSON,
    FacilityLicenseListResponseFromJSON,
    FacilityLicenseListResponseToJSON,
    FacilityLicenseResponseFromJSON,
    FacilityLicenseResponseToJSON,
    FacilityListResponseFromJSON,
    FacilityListResponseToJSON,
    FacilityProfileResponseFromJSON,
    FacilityProfileResponseToJSON,
    FacilityRelationshipRequestListResponseFromJSON,
    FacilityRelationshipRequestListResponseToJSON,
    FacilityRelationshipRequestResponseFromJSON,
    FacilityRelationshipRequestResponseToJSON,
    FacilityRelationshipResponseFromJSON,
    FacilityRelationshipResponseToJSON,
    FacilityResponseFromJSON,
    FacilityResponseToJSON,
    FacilitySessionListResponseFromJSON,
    FacilitySessionListResponseToJSON,
    FacilityStrengthMachineBulkCreateResponseFromJSON,
    FacilityStrengthMachineBulkCreateResponseToJSON,
    FacilityStrengthMachineConfigurationResponseFromJSON,
    FacilityStrengthMachineConfigurationResponseToJSON,
    FacilityStrengthMachineInitializerOTPTokenResponseFromJSON,
    FacilityStrengthMachineInitializerOTPTokenResponseToJSON,
    FacilityStrengthMachineInitializerTokenResponseFromJSON,
    FacilityStrengthMachineInitializerTokenResponseToJSON,
    FacilityStrengthMachineListResponseFromJSON,
    FacilityStrengthMachineListResponseToJSON,
    FacilityStrengthMachineMaintenanceRecordListResponseFromJSON,
    FacilityStrengthMachineMaintenanceRecordListResponseToJSON,
    FacilityStrengthMachineMaintenanceRecordResponseFromJSON,
    FacilityStrengthMachineMaintenanceRecordResponseToJSON,
    FacilityStrengthMachineResponseFromJSON,
    FacilityStrengthMachineResponseToJSON,
    FacilityStrengthMachineUtilizationInstanceListResponseFromJSON,
    FacilityStrengthMachineUtilizationInstanceListResponseToJSON,
    FacilityStrengthMachineUtilizationInstanceResponseFromJSON,
    FacilityStrengthMachineUtilizationInstanceResponseToJSON,
    FacilityUserRelationshipListResponseFromJSON,
    FacilityUserRelationshipListResponseToJSON,
    FacilityUserResponseFromJSON,
    FacilityUserResponseToJSON,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    HeartRateDataSetListResponseFromJSON,
    HeartRateDataSetListResponseToJSON,
    HeartRateDataSetResponseFromJSON,
    HeartRateDataSetResponseToJSON,
    HeightMeasurementListResponseFromJSON,
    HeightMeasurementListResponseToJSON,
    HeightMeasurementResponseFromJSON,
    HeightMeasurementResponseToJSON,
    KioskSessionResponseFromJSON,
    KioskSessionResponseToJSON,
    MSeriesAppSessionExportResponseFromJSON,
    MSeriesAppSessionExportResponseToJSON,
    MSeriesAppSessionListResponseFromJSON,
    MSeriesAppSessionListResponseToJSON,
    MSeriesAppSessionResponseFromJSON,
    MSeriesAppSessionResponseToJSON,
    MSeriesChallengeListResponseFromJSON,
    MSeriesChallengeListResponseToJSON,
    MSeriesChallengeParticipantListResponseFromJSON,
    MSeriesChallengeParticipantListResponseToJSON,
    MSeriesChallengeParticipantResponseFromJSON,
    MSeriesChallengeParticipantResponseToJSON,
    MSeriesChallengeResponseFromJSON,
    MSeriesChallengeResponseToJSON,
    MSeriesDataSetListResponseFromJSON,
    MSeriesDataSetListResponseToJSON,
    MSeriesDataSetResponseFromJSON,
    MSeriesDataSetResponseToJSON,
    MSeriesDataSetSegmentResponseFromJSON,
    MSeriesDataSetSegmentResponseToJSON,
    MSeriesFtpMeasurementListResponseFromJSON,
    MSeriesFtpMeasurementListResponseToJSON,
    MSeriesFtpMeasurementResponseFromJSON,
    MSeriesFtpMeasurementResponseToJSON,
    MSeriesProfileStatsResponseFromJSON,
    MSeriesProfileStatsResponseToJSON,
    MachineAdjustmentListResponseFromJSON,
    MachineAdjustmentListResponseToJSON,
    MachineAdjustmentResponseFromJSON,
    MachineAdjustmentResponseToJSON,
    OAuthServiceListResponseFromJSON,
    OAuthServiceListResponseToJSON,
    OAuthServiceResponseFromJSON,
    OAuthServiceResponseToJSON,
    OauthResponseFromJSON,
    OauthResponseToJSON,
    PrimaryEmailAddressResponseFromJSON,
    PrimaryEmailAddressResponseToJSON,
    PrivilegedFacilityRelationshipRequestListResponseFromJSON,
    PrivilegedFacilityRelationshipRequestListResponseToJSON,
    ProfileResponseFromJSON,
    ProfileResponseToJSON,
    RedirectResponseFromJSON,
    RedirectResponseToJSON,
    SessionListResponseFromJSON,
    SessionListResponseToJSON,
    SessionPlanListResponseFromJSON,
    SessionPlanListResponseToJSON,
    SessionPlanResponseFromJSON,
    SessionPlanResponseToJSON,
    SessionPlanSequenceInstanceListResponseFromJSON,
    SessionPlanSequenceInstanceListResponseToJSON,
    SessionPlanSequenceInstanceResponseFromJSON,
    SessionPlanSequenceInstanceResponseToJSON,
    SessionPlanSequenceListResponseFromJSON,
    SessionPlanSequenceListResponseToJSON,
    SessionPlanSequenceResponseFromJSON,
    SessionPlanSequenceResponseToJSON,
    SessionPlanSequenceTemplateListResponseFromJSON,
    SessionPlanSequenceTemplateListResponseToJSON,
    SessionPlanSequenceTemplateResponseFromJSON,
    SessionPlanSequenceTemplateResponseToJSON,
    SessionPlanSetInstanceResponseFromJSON,
    SessionPlanSetInstanceResponseToJSON,
    SessionPlanSetListResponseFromJSON,
    SessionPlanSetListResponseToJSON,
    SessionPlanSetResponseFromJSON,
    SessionPlanSetResponseToJSON,
    SessionPlanSetTemplateListResponseFromJSON,
    SessionPlanSetTemplateListResponseToJSON,
    SessionPlanSetTemplateResponseFromJSON,
    SessionPlanSetTemplateResponseToJSON,
    SessionPlanTemplateListResponseFromJSON,
    SessionPlanTemplateListResponseToJSON,
    SessionPlanTemplateResponseFromJSON,
    SessionPlanTemplateResponseToJSON,
    SessionResponseFromJSON,
    SessionResponseToJSON,
    SessionStartResponseFromJSON,
    SessionStartResponseToJSON,
    StatusResponseFromJSON,
    StatusResponseToJSON,
    StrengthExerciseListResponseFromJSON,
    StrengthExerciseListResponseToJSON,
    StrengthExerciseMuscleListResponseFromJSON,
    StrengthExerciseMuscleListResponseToJSON,
    StrengthExerciseMuscleResponseFromJSON,
    StrengthExerciseMuscleResponseToJSON,
    StrengthExerciseResponseFromJSON,
    StrengthExerciseResponseToJSON,
    StrengthExerciseVariantListResponseFromJSON,
    StrengthExerciseVariantListResponseToJSON,
    StrengthExerciseVariantResponseFromJSON,
    StrengthExerciseVariantResponseToJSON,
    StrengthMachineDataSetExportResponseFromJSON,
    StrengthMachineDataSetExportResponseToJSON,
    StrengthMachineDataSetListResponseFromJSON,
    StrengthMachineDataSetListResponseToJSON,
    StrengthMachineDataSetResponseFromJSON,
    StrengthMachineDataSetResponseToJSON,
    StrengthMachineHistoryListResponseFromJSON,
    StrengthMachineHistoryListResponseToJSON,
    StrengthMachineInitializeResponseFromJSON,
    StrengthMachineInitializeResponseToJSON,
    StrengthMachineListResponseFromJSON,
    StrengthMachineListResponseToJSON,
    StrengthMachineProfileStatsResponseFromJSON,
    StrengthMachineProfileStatsResponseToJSON,
    StrengthMachineResponseFromJSON,
    StrengthMachineResponseToJSON,
    StretchExerciseListResponseFromJSON,
    StretchExerciseListResponseToJSON,
    StretchExerciseMuscleListResponseFromJSON,
    StretchExerciseMuscleListResponseToJSON,
    StretchExerciseMuscleResponseFromJSON,
    StretchExerciseMuscleResponseToJSON,
    StretchExerciseResponseFromJSON,
    StretchExerciseResponseToJSON,
    StretchExerciseVariantListResponseFromJSON,
    StretchExerciseVariantListResponseToJSON,
    StretchExerciseVariantResponseFromJSON,
    StretchExerciseVariantResponseToJSON,
    SubscriptionResponseFromJSON,
    SubscriptionResponseToJSON,
    TimeResponseFromJSON,
    TimeResponseToJSON,
    UserApplicationAuthorizationDeveloperListResponseFromJSON,
    UserApplicationAuthorizationDeveloperListResponseToJSON,
    UserApplicationAuthorizationResponseFromJSON,
    UserApplicationAuthorizationResponseToJSON,
    UserApplicationAuthorizationUserListResponseFromJSON,
    UserApplicationAuthorizationUserListResponseToJSON,
    UserFacilityRelationshipListResponseFromJSON,
    UserFacilityRelationshipListResponseToJSON,
    UserInBodyIntegrationResponseFromJSON,
    UserInBodyIntegrationResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    WeightMeasurementListResponseFromJSON,
    WeightMeasurementListResponseToJSON,
    WeightMeasurementResponseFromJSON,
    WeightMeasurementResponseToJSON,
} from '../models';

export interface A500CreateSetRequest {
    displaySerial: string;
    displaySoftwareVersion: string;
    facilityId: number;
    memberIdentifier: string;
    model: string;
    resistancePrecision: string;
    setData: string;
    lz4SampleData?: string;
    apiVersion?: string;
}

export interface A500CreateUtilizationInstanceRequest {
    repetitionCount: number;
    takenAt: Date;
    apiVersion?: string;
}

export interface A500GetUserRequest {
    displaySerial: string;
    displaySoftwareVersion: string;
    facilityId: number;
    memberIdentifier: string;
    model: string;
    apiVersion?: string;
}

export interface A500InitializeRequest {
    displayUUID: string;
    firmwareVersion: string;
    leftCylinderSerial: string;
    machineModel: string;
    mainBoardSerial: string;
    softwareVersion: string;
    rightCylinderSerial?: string;
    apiVersion?: string;
}

export interface A500ShowMachineStateRequest {
    facilityStrengthMachineId: number;
    apiVersion?: string;
}

export interface A500SubscribeMachineStateRequest {
    facilityStrengthMachineId?: number;
    apiVersion?: string;
}

export interface A500UpdateMachineRequest {
    displaySerial: string;
    displaySoftwareVersion: string;
    facilityId: number;
    model: string;
    apiVersion?: string;
}

export interface A500UpdateMachineStateRequest {
    appType: string;
    facilityStrengthMachineId: number;
    forceUnit: string;
    isFacilityConfigurationOverridden: boolean;
    primaryFocus: string;
    secondaryFocus: string;
    apiVersion?: string;
}

export interface A500UserLoginRequest {
    memberIdentifier: string;
    apiVersion?: string;
}

export interface ApplicationCreateRequest {
    applicationName: string;
    developmentAccountId: number;
    redirectUrl: string;
    apiVersion?: string;
}

export interface ApplicationDeleteRequest {
    developmentAccountId: number;
    id: number;
    apiVersion?: string;
}

export interface ApplicationListRequest {
    developmentAccountId: number;
    ascending?: boolean;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface ApplicationShowRequest {
    developmentAccountId: number;
    id: number;
    apiVersion?: string;
}

export interface ApplicationUpdateRequest {
    developmentAccountId: number;
    id: number;
    applicationName?: string;
    redirectUrl?: string;
    apiVersion?: string;
}

export interface AuthExchangeFulfillmentRequest {
    exchangeToken: string;
    apiVersion?: string;
}

export interface CardioExerciseCreateRequest {
    defaultExerciseAlias: string;
    apiVersion?: string;
}

export interface CardioExerciseDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseListRequest {
    ascending?: boolean;
    defaultAlias?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface CardioExerciseMuscleCreateRequest {
    cardioExerciseId: number;
    muscle: string;
    targetLevel: string;
    apiVersion?: string;
}

export interface CardioExerciseMuscleDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseMuscleListRequest {
    cardioExerciseId: number;
    ascending?: boolean;
    limit?: number;
    muscle?: string;
    offset?: number;
    sort?: string;
    targetLevel?: string;
    apiVersion?: string;
}

export interface CardioExerciseMuscleShowRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseMuscleUpdateRequest {
    id: number;
    targetLevel: string;
    apiVersion?: string;
}

export interface CardioExerciseShowRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseUpdateRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseVariantCreateRequest {
    cardioExerciseId: number;
    variant: string;
    cardioMachineId?: number;
    instructionalImage?: string;
    instructionalVideo?: string;
    apiVersion?: string;
}

export interface CardioExerciseVariantDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseVariantListRequest {
    ascending?: boolean;
    cardioExerciseId?: number;
    cardioMachineId?: number;
    limit?: number;
    offset?: number;
    sort?: string;
    variant?: string;
    apiVersion?: string;
}

export interface CardioExerciseVariantShowRequest {
    id: number;
    apiVersion?: string;
}

export interface CardioExerciseVariantUpdateRequest {
    id: number;
    variant: string;
    instructionalImage?: string;
    instructionalVideo?: string;
    apiVersion?: string;
}

export interface CardioMachineListRequest {
    ascending?: boolean;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface CardioMachineShowRequest {
    id: number;
    apiVersion?: string;
}

export interface CoreEndpointsRequest {
    apiVersion?: string;
}

export interface CoreErrorsRequest {
    apiVersion?: string;
}

export interface CoreHealthRequest {
    apiVersion?: string;
}

export interface CoreStatusRequest {
    apiVersion?: string;
}

export interface CoreTimeRequest {
    apiVersion?: string;
}

export interface CoreUnsubscribeRequest {
    subscriptionKey: string;
    apiVersion?: string;
}

export interface DevelopmentAccountCreateRequest {
    privacyUrl: string;
    termsUrl: string;
    address?: string;
    company?: number;
    websiteUrl?: string;
    apiVersion?: string;
}

export interface DevelopmentAccountDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface DevelopmentAccountListRequest {
    ascending?: boolean;
    limit?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipListRequest {
    developmentAccountId: number;
    ascending?: boolean;
    limit?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipRequestDeleteRequest {
    developmentAccountId: number;
    id: number;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipRequestFulfillmentRequest {
    code: string;
    shouldAuthorize: boolean;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipRequestInitRequest {
    developmentAccountId: number;
    email: string;
    role: string;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipRequestListRequest {
    ascending?: boolean;
    company?: string;
    developmentAccountId?: number;
    email?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipRequestShowRequest {
    code?: string;
    developmentAccountId?: number;
    id?: number;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipShowRequest {
    developmentAccountId: number;
    id: number;
    apiVersion?: string;
}

export interface DevelopmentAccountRelationshipUpdateRequest {
    developmentAccountId: number;
    id: number;
    role: string;
    apiVersion?: string;
}

export interface DevelopmentAccountShowRequest {
    id: number;
    apiVersion?: string;
}

export interface DevelopmentAccountUpdateRequest {
    id: number;
    address?: string;
    company?: string;
    privacyUrl?: string;
    termsUrl?: string;
    websiteUrl?: string;
    apiVersion?: string;
}

export interface EmailAddressCreateRequest {
    email: string;
    userId?: number;
    apiVersion?: string;
}

export interface EmailAddressDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface EmailAddressListRequest {
    ascending?: boolean;
    email?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface EmailAddressShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface EmailAddressValidationFulfillmentRequest {
    validationToken: string;
    apiVersion?: string;
}

export interface EmailAddressValidationRequestRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface ExerciseAliasCreateRequest {
    alias: string;
    cardioExerciseId?: number;
    strengthExerciseId?: number;
    stretchExerciseId?: number;
    apiVersion?: string;
}

export interface ExerciseAliasDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface ExerciseAliasListRequest {
    alias?: string;
    ascending?: boolean;
    cardioExerciseId?: number;
    limit?: number;
    offset?: number;
    sort?: string;
    strengthExerciseId?: number;
    stretchExerciseId?: number;
    type?: string;
    apiVersion?: string;
}

export interface ExerciseAliasShowRequest {
    id: number;
    apiVersion?: string;
}

export interface ExerciseAliasUpdateRequest {
    alias: string;
    id: number;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetAssignmentCreateRequest {
    exerciseOrdinalSetId: number;
    ordinalIdentifier: string;
    cardioExerciseVariantId?: number;
    strengthExerciseVariantId?: number;
    stretchExerciseVariantId?: number;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetAssignmentDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetAssignmentListRequest {
    ascending?: boolean;
    exerciseOrdinalSetId?: number;
    limit?: number;
    offset?: number;
    ordinalIdentifier?: string;
    sort?: string;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetAssignmentShowRequest {
    id: number;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetCreateRequest {
    code: string;
    name: string;
    description?: string;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetListRequest {
    ascending?: boolean;
    code?: string;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetShowRequest {
    id: number;
    apiVersion?: string;
}

export interface ExerciseOrdinalSetUpdateRequest {
    id: number;
    name: string;
    description?: string;
    apiVersion?: string;
}

export interface FacilityAccessControlIPRangeCreateRequest {
    cidr: string;
    apiVersion?: string;
}

export interface FacilityAccessControlIPRangeDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityAccessControlIPRangeListRequest {
    ascending?: boolean;
    cidr?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface FacilityAccessControlIPRangeShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityAccessControlIPRangeUpdateRequest {
    cidr: string;
    id: number;
    apiVersion?: string;
}

export interface FacilityAccessControlKioskShowRequest {
    apiVersion?: string;
}

export interface FacilityAccessControlKioskUpdateRequest {
    isKioskModeAllowed: boolean;
    isFingerprintAuthenticationAllowed?: boolean;
    primaryIdentification?: string;
    secondaryIdentification?: string;
    apiVersion?: string;
}

export interface FacilityAccessControlShowRequest {
    apiVersion?: string;
}

export interface FacilityApplyLicenseRequest {
    key: string;
    apiVersion?: string;
}

export interface FacilityCardioMachineDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityCardioMachineShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityCardioMachineUpdateRequest {
    id: number;
    location?: string;
    apiVersion?: string;
}

export interface FacilityConfigurationShowRequest {
    apiVersion?: string;
}

export interface FacilityConfigurationSubscribeRequest {
    apiVersion?: string;
}

export interface FacilityConfigurationUpdateRequest {
    memberIdentificationComposition: string;
    memberIdentificationForceLength: boolean;
    memberIdentificationLength: number;
    memberRequireEmail: boolean;
    memberSecretComposition: string;
    memberSecretForceLength: boolean;
    memberSecretLength: number;
    apiVersion?: string;
}

export interface FacilityCreateRequest {
    key: string;
    name: string;
    address?: string;
    city?: string;
    country?: string;
    phone?: string;
    postcode?: string;
    state?: string;
    website?: string;
    apiVersion?: string;
}

export interface FacilityInBodyIntegrationCreateRequest {
    type: string;
    account?: string;
    key?: string;
    apiVersion?: string;
}

export interface FacilityInBodyIntegrationDeleteRequest {
    apiVersion?: string;
}

export interface FacilityInBodyIntegrationShowRequest {
    apiVersion?: string;
}

export interface FacilityKioskSessionEndEchipRequest {
    echipData: string;
    echipId: string;
    apiVersion?: string;
}

export interface FacilityKioskSessionUpdateEchipRequest {
    echipData: string;
    echipId: string;
    apiVersion?: string;
}

export interface FacilityKioskTokenCheckRequest {
    apiVersion?: string;
}

export interface FacilityKioskTokenCreateRequest {
    apiVersion?: string;
}

export interface FacilityKioskTokenDeleteRequest {
    apiVersion?: string;
}

export interface FacilityKioskUserLoginRequest {
    primaryIdentification: string;
    secondaryIdentification?: string;
    apiVersion?: string;
}

export interface FacilityLicenseListRequest {
    accountId?: string;
    ascending?: boolean;
    key?: string;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    type?: string;
    apiVersion?: string;
}

export interface FacilityLicenseShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityListRequest {
    address?: number;
    ascending?: boolean;
    city?: number;
    country?: number;
    limit?: number;
    name?: number;
    offset?: number;
    page?: number;
    phone?: number;
    postcode?: number;
    quantity?: number;
    sort?: string;
    state?: number;
    apiVersion?: string;
}

export interface FacilityProfileShowRequest {
    id?: number;
    apiVersion?: string;
}

export interface FacilityProfileUpdateRequest {
    name: string;
    address?: string;
    city?: number;
    country?: string;
    phone?: string;
    postcode?: string;
    state?: string;
    website?: string;
    apiVersion?: string;
}

export interface FacilityRelationshipFacilityCreateRequest {
    name: string;
    birthday?: Date;
    email?: string;
    employeeRole?: string;
    gender?: string;
    language?: string;
    member?: boolean;
    memberIdentifier?: string;
    memberSecret?: string;
    units?: string;
    apiVersion?: string;
}

export interface FacilityRelationshipFacilityDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityRelationshipFacilityListRequest {
    ascending?: boolean;
    employee?: boolean;
    employeeRole?: string;
    includeSession?: boolean;
    limit?: number;
    member?: boolean;
    memberIdentifier?: string;
    name?: string;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface FacilityRelationshipFacilityShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityRelationshipFacilitySubscribeRequest {
    id?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipFacilityUpdateRequest {
    id: number;
    employeeRole?: string;
    member?: boolean;
    memberIdentifier?: string;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestFacilityCreateRequest {
    email?: string;
    employeeRole?: string;
    member?: boolean;
    memberIdentifier?: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestFacilityListRequest {
    ascending?: boolean;
    limit?: number;
    memberIdentifier?: string;
    name?: string;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestFacilityShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestFacilitySubscribeRequest {
    id?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestFacilityUpdateRequest {
    approval: boolean;
    id: number;
    memberIdentifier?: string;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestUserCreateRequest {
    facilityId: number;
    memberIdentifier?: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestUserListRequest {
    ascending?: boolean;
    facilityId?: number;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestUserShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestUserSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipRequestUserUpdateRequest {
    approval: boolean;
    id: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipUserDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipUserListRequest {
    ascending?: boolean;
    employee?: boolean;
    employeeRole?: string;
    limit?: number;
    member?: boolean;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipUserShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipUserSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityRelationshipUserUpdateRequest {
    id: number;
    memberSecret: string;
    userId?: number;
    apiVersion?: string;
}

export interface FacilityReportCheckInRequest {
    from: Date;
    group: string;
    to: Date;
    apiVersion?: string;
}

export interface FacilitySessionCheckEchipRequest {
    echipId: string;
    apiVersion?: string;
}

export interface FacilitySessionDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilitySessionEndRequest {
    echipData?: string;
    echipId?: string;
    id?: number;
    apiVersion?: string;
}

export interface FacilitySessionListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    name?: string;
    offset?: number;
    open?: boolean;
    sort?: string;
    to?: Date;
    apiVersion?: string;
}

export interface FacilitySessionShowRequest {
    echipId?: string;
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface FacilitySessionStartRequest {
    userId: number;
    continueFromLastSet?: boolean;
    echipId?: string;
    forceEndPrevious?: boolean;
    sessionPlanSequenceAssignmentId?: number;
    apiVersion?: string;
}

export interface FacilitySessionStatusRequest {
    userId: number;
    apiVersion?: string;
}

export interface FacilitySessionSubscribeRequest {
    id?: number;
    apiVersion?: string;
}

export interface FacilitySessionUpdateRequest {
    echipData: string;
    echipId: string;
    id?: number;
    apiVersion?: string;
}

export interface FacilityShowRequest {
    id?: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineConfigurationShowRequest {
    apiVersion?: string;
}

export interface FacilityStrengthMachineConfigurationSubscribeRequest {
    apiVersion?: string;
}

export interface FacilityStrengthMachineConfigurationUpdateRequest {
    appType: string;
    forceUnit: string;
    locale: string;
    primaryFocus: string;
    secondaryFocus: string;
    timeZone: string;
    apiVersion?: string;
}

export interface FacilityStrengthMachineCreateEchipRequest {
    echipData: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineInitializerOTPRequest {
    apiVersion?: string;
}

export interface FacilityStrengthMachineInitializerTokenRequest {
    apiVersion?: string;
}

export interface FacilityStrengthMachineListRequest {
    ascending?: boolean;
    limit?: number;
    model?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface FacilityStrengthMachineMaintenanceRecordCreateRequest {
    facilityStrengthMachineId: number;
    log: string;
    takenAt: Date;
    apiVersion?: string;
}

export interface FacilityStrengthMachineMaintenanceRecordDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineMaintenanceRecordListRequest {
    ascending?: boolean;
    facilityStrengthMachineId?: number;
    from?: Date;
    limit?: number;
    log?: string;
    offset?: number;
    sort?: string;
    to?: Date;
    apiVersion?: string;
}

export interface FacilityStrengthMachineMaintenanceRecordShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineSubscribeRequest {
    id?: number;
    apiVersion?: string;
}

export interface FacilityStrengthMachineUpdateRequest {
    id: number;
    location?: string;
    apiVersion?: string;
}

export interface FacilityStrengthMachineUtilizationInstanceListRequest {
    ascending?: boolean;
    facilityStrengthMachineId?: number;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    to?: Date;
    apiVersion?: string;
}

export interface FacilityStrengthMachineUtilizationInstanceShowRequest {
    id: number;
    apiVersion?: string;
}

export interface FacilitySubscribeRequest {
    id: number;
    apiVersion?: string;
}

export interface HeartRateDataSetCreateRequest {
    heartRateDataPoints: string;
    source: string;
    autoAttachSession?: boolean;
    sessionId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeartRateDataSetDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeartRateDataSetListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    source?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface HeartRateDataSetShowRequest {
    graph?: number;
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeartRateDataSetSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeartRateDataSetUpdateRequest {
    id: number;
    sessionId: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeightMeasurementCreateRequest {
    metricHeight: number;
    source: string;
    takenAt: Date;
    userId?: number;
    apiVersion?: string;
}

export interface HeightMeasurementDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeightMeasurementListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface HeightMeasurementShowRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface HeightMeasurementSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesAppSessionCreateRequest {
    averageCadence: number;
    averagePower: number;
    averageWattsPerKilogram: number;
    broadcastData: string;
    buildMajor: number;
    buildMinor: number;
    caloricBurn: number;
    cardioMachineId: number;
    distance: number;
    duration: number;
    endedAt: Date;
    energyOutput: number;
    maxCadence: number;
    maxPower: number;
    maxWattsPerKilogram: number;
    metricHeight: number;
    metricWeight: number;
    ordinalId: number;
    source: string;
    startedAt: Date;
    averageMetabolicEquivalent?: number;
    segmentData?: string;
    stepCount?: number;
    targetFtp?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesAppSessionDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesAppSessionExportRequest {
    format: string;
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesAppSessionExportFlatRequest {
    filename: string;
    userId?: string;
    apiVersion?: string;
}

export interface MSeriesAppSessionListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesAppSessionShowRequest {
    graph?: number;
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeCreateRequest {
    challengeType: string;
    focus: string;
    isPublic: boolean;
    name: string;
    userLimit: number;
    endAt?: Date;
    goal?: number;
    startAt?: Date;
    apiVersion?: string;
}

export interface MSeriesChallengeDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface MSeriesChallengeListRequest {
    ascending?: boolean;
    from?: Date;
    isCompleted?: boolean;
    limit?: number;
    offset?: number;
    relationship?: string;
    sort?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeParticipantCreateRequest {
    joinCode: string;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeParticipantDeleteRequest {
    mSeriesChallengeId: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeParticipantListRequest {
    nameSearchQuery: string;
    ascending?: boolean;
    joinCode?: string;
    limit?: number;
    mSeriesChallengeId?: number;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeParticipantShowRequest {
    joinCode?: string;
    mSeriesChallengeId?: number;
    mSeriesChallengeParticipantId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeShowRequest {
    id?: number;
    joinCode?: string;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesChallengeUpdateRequest {
    id: number;
    isPublic?: boolean;
    name?: string;
    userLimit?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetCreateRequest {
    buildMajor: number;
    buildMinor: number;
    mSeriesDataPoints: string;
    ordinalId: number;
    source: string;
    autoAttachSession?: boolean;
    cardioMachineId?: number;
    machineType?: string;
    sessionId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    source?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetReenqueueRequest {
    id?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetSegmentShowRequest {
    graph?: number;
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetShowRequest {
    graph?: number;
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesDataSetUpdateRequest {
    id: number;
    mSeriesFtpMeasurementId: number;
    sessionId: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesFtpMeasurementCreateRequest {
    source: string;
    takenAt: Date;
    cardioMachineId?: number;
    ftp?: number;
    machineType?: string;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesFtpMeasurementDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesFtpMeasurementListRequest {
    ascending?: boolean;
    cardioMachineId?: number;
    from?: Date;
    limit?: number;
    machineType?: string;
    offset?: number;
    sort?: string;
    source?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesFtpMeasurementShowRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface MSeriesProfileStatsShowRequest {
    cardioMachineId: number;
    userId?: number;
    apiVersion?: string;
}

export interface MachineAdjustmentCreateRequest {
    model: string;
    leftPosition?: string;
    rightPosition?: string;
    seat?: string;
    start?: string;
    stop?: string;
    userId?: number;
    apiVersion?: string;
}

export interface MachineAdjustmentDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface MachineAdjustmentListRequest {
    ascending?: boolean;
    limit?: number;
    model?: string;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface MachineAdjustmentShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface MachineAdjustmentUpdateRequest {
    id: number;
    leftPosition?: string;
    rightPosition?: string;
    seat?: string;
    start?: string;
    stop?: string;
    userId?: number;
    apiVersion?: string;
}

export interface OauthAuthorizeRequest {
    clientIdentifier: string;
    redirectUrl: string;
    responseType: string;
    state: string;
    apiVersion?: string;
}

export interface OauthDeauthorizeRequest {
    accessToken: string;
    apiVersion?: string;
}

export interface OauthInitiateRequest {
    redirect: string;
    service: string;
    type: string;
    apiVersion?: string;
}

export interface OauthServiceDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface OauthServiceListRequest {
    ascending?: boolean;
    limit?: number;
    offset?: number;
    service?: string;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface OauthServiceShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface OauthTokenRequest {
    clientIdentifier: string;
    clientSecret: string;
    grantType: string;
    authorizationCode?: string;
    refreshToken?: string;
    apiVersion?: string;
}

export interface PrimaryEmailAddressShowRequest {
    userId?: number;
    apiVersion?: string;
}

export interface PrimaryEmailAddressUpdateRequest {
    emailAddressId: number;
    userId?: number;
    apiVersion?: string;
}

export interface ProfileShowRequest {
    userId?: number;
    apiVersion?: string;
}

export interface ProfileSubscribeRequest {
    userId?: number;
    apiVersion?: string;
}

export interface ProfileUpdateRequest {
    birthday?: Date;
    gender?: string;
    language?: string;
    name?: string;
    units?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionEndRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    open?: boolean;
    requireExtendedDataType?: string;
    sort?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanAttachSequenceRequest {
    id: number;
    scheduleIndexes: number;
    sequenceId: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanAttachSequenceTemplateRequest {
    id: number;
    scheduleIndexes: number;
    sequenceTemplateId: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanCloneTemplateRequest {
    active: boolean;
    startAt: Date;
    templateId: number;
    endAt?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanCreateRequest {
    active: boolean;
    flexible: boolean;
    name: string;
    repeating: boolean;
    scheduleLength: number;
    startAt: string;
    description?: string;
    endAt?: string;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanDetachSequenceRequest {
    id: number;
    scheduleIndexes: number;
    sequenceId: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanListRequest {
    active?: boolean;
    ascending?: boolean;
    description?: string;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceCreateRequest {
    name: string;
    description?: string;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceInstanceDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceInstanceListRequest {
    ascending?: boolean;
    description?: string;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceInstanceShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceListRequest {
    ascending?: boolean;
    description?: string;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceTemplateCreateRequest {
    name: string;
    description?: string;
    notes?: string;
    _public?: boolean;
    searchable?: boolean;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceTemplateDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceTemplateListRequest {
    ascending?: boolean;
    description?: string;
    limit?: number;
    name?: string;
    offset?: number;
    _public?: boolean;
    searchable?: boolean;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceTemplateShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceTemplateUpdateRequest {
    id: number;
    name: string;
    description?: string;
    notes?: string;
    _public?: boolean;
    searchable?: boolean;
    setIdOrder?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSequenceUpdateRequest {
    id: number;
    name: string;
    description?: string;
    notes?: string;
    setIdOrder?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetCreateActivityRequest {
    name: string;
    sequenceId: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetCreateCardioRequest {
    cardioExerciseId: number;
    sequenceId: number;
    caloricBurn?: number;
    cardioMachineId?: number;
    distance?: number;
    duration?: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetCreateStrengthRequest {
    sequenceId: number;
    strengthExerciseId: number;
    forceUnit?: string;
    notes?: string;
    repetitionCount?: number;
    resistance?: number;
    strengthMachineId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetCreateStretchRequest {
    name: string;
    sequenceId: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetInstanceShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetInstanceUpdateActivityRequest {
    completed: boolean;
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetInstanceUpdateCardioRequest {
    completed: boolean;
    id: number;
    completedCaloricBurn?: number;
    completedDistance?: number;
    completedDuration?: number;
    mSeriesDataSetId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetInstanceUpdateStrengthRequest {
    completed: boolean;
    id: number;
    completedForceUnit?: number;
    completedRepetitionCount?: number;
    completedResistance?: number;
    strengthMachineDataSetId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetInstanceUpdateStretchRequest {
    completed: boolean;
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetListRequest {
    ascending?: boolean;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    type?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateCreateActivityRequest {
    name: string;
    sequenceId: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateCreateCardioRequest {
    cardioExerciseId: number;
    sequenceId: number;
    caloricBurn?: number;
    cardioMachineId?: number;
    distance?: number;
    duration?: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateCreateStrengthRequest {
    sequenceId: number;
    strengthExerciseId: number;
    notes?: string;
    repetitionCount?: number;
    strengthMachineId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateCreateStretchRequest {
    name: string;
    sequenceId: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateListRequest {
    ascending?: boolean;
    limit?: number;
    name?: string;
    offset?: number;
    sort?: string;
    type?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateUpdateActivityRequest {
    id: number;
    name: string;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateUpdateCardioRequest {
    cardioExerciseId: number;
    id: number;
    caloricBurn?: number;
    cardioMachineId?: number;
    distance?: number;
    duration?: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateUpdateStrengthRequest {
    id: number;
    strengthExerciseId: number;
    notes?: string;
    repetitionCount?: number;
    strengthMachineId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetTemplateUpdateStretchRequest {
    id: number;
    name: string;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetUpdateActivityRequest {
    id: number;
    name: string;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetUpdateCardioRequest {
    cardioExerciseId: number;
    id: number;
    caloricBurn?: number;
    cardioMachineId?: number;
    distance?: number;
    duration?: number;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetUpdateStrengthRequest {
    id: number;
    strengthExerciseId: number;
    forceUnit?: string;
    notes?: string;
    repetitionCount?: number;
    resistance?: number;
    strengthMachineId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanSetUpdateStretchRequest {
    id: number;
    name: string;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateAttachSequenceRequest {
    id: number;
    scheduleIndexes: number;
    sequenceId: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateCreateRequest {
    flexible: boolean;
    name: string;
    repeating: boolean;
    scheduleLength: number;
    description?: string;
    notes?: string;
    _public?: boolean;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateDetachSequenceRequest {
    id: number;
    scheduleIndexes: number;
    sequenceId: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateListRequest {
    ascending?: boolean;
    description?: string;
    limit?: number;
    name?: string;
    offset?: number;
    _public?: boolean;
    scheduleLength?: boolean;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanTemplateUpdateRequest {
    flexible: boolean;
    id: number;
    name: string;
    repeating: boolean;
    scheduleLength: number;
    description?: string;
    notes?: string;
    _public?: boolean;
    userId?: number;
    apiVersion?: string;
}

export interface SessionPlanUpdateRequest {
    active: boolean;
    flexible: boolean;
    id: number;
    name: string;
    repeating: boolean;
    scheduleLength: number;
    startAt: Date;
    description?: string;
    endAt?: Date;
    notes?: string;
    userId?: number;
    apiVersion?: string;
}

export interface SessionShowRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionStartRequest {
    continueFromLastSet?: boolean;
    forceEndPrevious?: boolean;
    sessionPlanSequenceAssignmentId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface SessionSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthExerciseCreateRequest {
    category: string;
    defaultExerciseAlias: string;
    humanMovement: string;
    plane: string;
    movement?: string;
    apiVersion?: string;
}

export interface StrengthExerciseDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface StrengthExerciseListRequest {
    ascending?: boolean;
    category?: string;
    defaultAlias?: string;
    humanMovement?: string;
    limit?: number;
    movement?: string;
    offset?: number;
    plane?: string;
    sort?: string;
    apiVersion?: string;
}

export interface StrengthExerciseMuscleCreateRequest {
    muscle: string;
    strengthExerciseId: number;
    targetLevel: string;
    apiVersion?: string;
}

export interface StrengthExerciseMuscleDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface StrengthExerciseMuscleListRequest {
    strengthExerciseId: number;
    ascending?: boolean;
    limit?: number;
    muscle?: string;
    offset?: number;
    sort?: string;
    targetLevel?: string;
    apiVersion?: string;
}

export interface StrengthExerciseMuscleShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StrengthExerciseMuscleUpdateRequest {
    id: number;
    targetLevel: string;
    apiVersion?: string;
}

export interface StrengthExerciseShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StrengthExerciseUpdateRequest {
    category: string;
    humanMovement: string;
    id: number;
    plane: string;
    movement?: string;
    apiVersion?: string;
}

export interface StrengthExerciseVariantCreateRequest {
    equipmentMechanicalMovement: string;
    strengthExerciseId: number;
    variant: string;
    attachment?: string;
    instructionalImage?: string;
    instructionalVideo?: string;
    strengthMachineId?: number;
    apiVersion?: string;
}

export interface StrengthExerciseVariantDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface StrengthExerciseVariantListRequest {
    ascending?: boolean;
    attachment?: string;
    equipmentMechanicalMovement?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    strengthExerciseId?: number;
    strengthMachineId?: number;
    variant?: string;
    apiVersion?: string;
}

export interface StrengthExerciseVariantShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StrengthExerciseVariantUpdateRequest {
    equipmentMechanicalMovement: string;
    id: number;
    variant: string;
    attachment?: string;
    instructionalImage?: string;
    instructionalVideo?: string;
    apiVersion?: string;
}

export interface StrengthMachineDataSetCreateRequest {
    completedAt: Date;
    peakPower: number;
    repetitionCount: number;
    resistance: number;
    resistancePrecision: string;
    serial: string;
    strengthMachineId: number;
    version: string;
    work: number;
    addedWeight?: number;
    autoAttachSession?: boolean;
    chest?: number;
    distance?: number;
    forceUnit?: number;
    rom1?: number;
    rom2?: number;
    seat?: number;
    sessionId?: number;
    strengthExerciseId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetCreateA500Request {
    machineToken: string;
    setData: string;
    deflatedSampleData?: string;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetExportRequest {
    format: string;
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetExportFlatRequest {
    filename: string;
    userId: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    strengthMachineId?: number;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineDataSetUpdateRequest {
    id: number;
    sessionId: number;
    strengthExerciseId?: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineHistoryListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineListRequest {
    ascending?: boolean;
    limit?: number;
    line?: string;
    name?: string;
    offset?: number;
    sort?: string;
    variant?: string;
    apiVersion?: string;
}

export interface StrengthMachineProfileStatsShowRequest {
    strengthMachineId: number;
    userId?: number;
    apiVersion?: string;
}

export interface StrengthMachineShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseCreateRequest {
    defaultExerciseAlias: string;
    apiVersion?: string;
}

export interface StretchExerciseDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseListRequest {
    ascending?: boolean;
    defaultAlias?: number;
    limit?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface StretchExerciseMuscleCreateRequest {
    muscle: string;
    stretchExerciseId: number;
    targetLevel: string;
    apiVersion?: string;
}

export interface StretchExerciseMuscleDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseMuscleListRequest {
    stretchExerciseId: number;
    ascending?: boolean;
    limit?: number;
    muscle?: string;
    offset?: number;
    sort?: string;
    targetLevel?: string;
    apiVersion?: string;
}

export interface StretchExerciseMuscleShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseMuscleUpdateRequest {
    id: number;
    targetLevel: string;
    apiVersion?: string;
}

export interface StretchExerciseShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseUpdateRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseVariantCreateRequest {
    stretchExerciseId: number;
    variant: string;
    instructionalImage?: string;
    instructionalVideo?: string;
    apiVersion?: string;
}

export interface StretchExerciseVariantDeleteRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseVariantListRequest {
    ascending?: boolean;
    limit?: number;
    offset?: number;
    sort?: string;
    stretchExerciseId?: number;
    variant?: string;
    apiVersion?: string;
}

export interface StretchExerciseVariantShowRequest {
    id: number;
    apiVersion?: string;
}

export interface StretchExerciseVariantUpdateRequest {
    id: number;
    variant: string;
    instructionalImage?: string;
    instructionalVideo?: string;
    apiVersion?: string;
}

export interface UserApplicationAuthorizationDeveloperDeleteRequest {
    developmentAccountId: number;
    id: number;
    apiVersion?: string;
}

export interface UserApplicationAuthorizationDeveloperListRequest {
    applicationId: number;
    developmentAccountId: number;
    ascending?: boolean;
    limit?: number;
    offset?: number;
    sort?: string;
    apiVersion?: string;
}

export interface UserApplicationAuthorizationDeveloperShowRequest {
    developmentAccountId: number;
    id: number;
    apiVersion?: string;
}

export interface UserApplicationAuthorizationUserDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface UserApplicationAuthorizationUserListRequest {
    ascending?: boolean;
    limit?: number;
    offset?: number;
    sort?: string;
    userId?: number;
    apiVersion?: string;
}

export interface UserApplicationAuthorizationUserShowRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface UserCreateRequest {
    email: number;
    password: string;
    refreshable?: boolean;
    apiVersion?: string;
}

export interface UserCreateBasicRequest {
    email: number;
    password: string;
    refreshable?: boolean;
    apiVersion?: string;
}

export interface UserDeleteRequest {
    userId?: number;
    apiVersion?: string;
}

export interface UserInBodyIntegrationCreateRequest {
    userId: number;
    userToken: string;
    apiVersion?: string;
}

export interface UserInBodyIntegrationDeleteRequest {
    userId: number;
    apiVersion?: string;
}

export interface UserInBodyIntegrationShowRequest {
    userId: number;
    apiVersion?: string;
}

export interface UserInBodyIntegrationSyncRequest {
    userId: number;
    apiVersion?: string;
}

export interface UserShowRequest {
    userId?: number;
    apiVersion?: string;
}

export interface UserSubscribeRequest {
    userId?: number;
    apiVersion?: string;
}

export interface WeightMeasurementCreateRequest {
    metricWeight: number;
    source: string;
    takenAt: Date;
    bodyFatPercentage?: number;
    userId?: number;
    apiVersion?: string;
}

export interface WeightMeasurementDeleteRequest {
    id: number;
    userId?: number;
    apiVersion?: string;
}

export interface WeightMeasurementImportInBodyRequest {
    jsonString: string;
    userId: number;
    apiVersion?: string;
}

export interface WeightMeasurementImportInBodyCSVRequest {
    csvString: string;
    userId?: number;
    apiVersion?: string;
}

export interface WeightMeasurementListRequest {
    ascending?: boolean;
    from?: Date;
    limit?: number;
    offset?: number;
    sort?: string;
    to?: Date;
    userId?: number;
    apiVersion?: string;
}

export interface WeightMeasurementShowRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

export interface WeightMeasurementSubscribeRequest {
    id?: number;
    userId?: number;
    apiVersion?: string;
}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI {

    /**
     * 1
     * Create a user\'s set on A500 equipment
     */
    async a500CreateSet(requestParameters: A500CreateSetRequest): Promise<StrengthMachineDataSetResponse> {
        if (requestParameters.displaySerial === null || requestParameters.displaySerial === undefined) {            
            throw new runtime.RequiredError('displaySerial','Required parameter requestParameters.displaySerial was null or undefined when calling a500CreateSet.');
        }
        
        if (requestParameters.displaySoftwareVersion === null || requestParameters.displaySoftwareVersion === undefined) {            
            throw new runtime.RequiredError('displaySoftwareVersion','Required parameter requestParameters.displaySoftwareVersion was null or undefined when calling a500CreateSet.');
        }
        
        if (requestParameters.facilityId === null || requestParameters.facilityId === undefined) {            
            throw new runtime.RequiredError('facilityId','Required parameter requestParameters.facilityId was null or undefined when calling a500CreateSet.');
        }
        
        if (requestParameters.memberIdentifier === null || requestParameters.memberIdentifier === undefined) {            
            throw new runtime.RequiredError('memberIdentifier','Required parameter requestParameters.memberIdentifier was null or undefined when calling a500CreateSet.');
        }
        
        if (requestParameters.model === null || requestParameters.model === undefined) {            
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling a500CreateSet.');
        }
        
        if (requestParameters.resistancePrecision === null || requestParameters.resistancePrecision === undefined) {            
            throw new runtime.RequiredError('resistancePrecision','Required parameter requestParameters.resistancePrecision was null or undefined when calling a500CreateSet.');
        }
        
        if (requestParameters.setData === null || requestParameters.setData === undefined) {            
            throw new runtime.RequiredError('setData','Required parameter requestParameters.setData was null or undefined when calling a500CreateSet.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.displaySerial !== undefined && requestParameters.displaySerial !== null) {
            queryParameters['displaySerial'] = requestParameters.displaySerial;
        }

        
        if (requestParameters.displaySoftwareVersion !== undefined && requestParameters.displaySoftwareVersion !== null) {
            queryParameters['displaySoftwareVersion'] = requestParameters.displaySoftwareVersion;
        }

        
        if (requestParameters.facilityId !== undefined && requestParameters.facilityId !== null) {
            queryParameters['facilityId'] = requestParameters.facilityId;
        }

        
        if (requestParameters.lz4SampleData !== undefined && requestParameters.lz4SampleData !== null) {
            queryParameters['lz4SampleData'] = requestParameters.lz4SampleData;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        
        if (requestParameters.resistancePrecision !== undefined && requestParameters.resistancePrecision !== null) {
            queryParameters['resistancePrecision'] = requestParameters.resistancePrecision;
        }

        
        if (requestParameters.setData !== undefined && requestParameters.setData !== null) {
            queryParameters['setData'] = requestParameters.setData;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/create-set`,
            action: 'a500:createSet',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Create a utilization instance for an A500 machine
     */
    async a500CreateUtilizationInstance(requestParameters: A500CreateUtilizationInstanceRequest): Promise<void> {
        if (requestParameters.repetitionCount === null || requestParameters.repetitionCount === undefined) {            
            throw new runtime.RequiredError('repetitionCount','Required parameter requestParameters.repetitionCount was null or undefined when calling a500CreateUtilizationInstance.');
        }
        
        if (requestParameters.takenAt === null || requestParameters.takenAt === undefined) {            
            throw new runtime.RequiredError('takenAt','Required parameter requestParameters.takenAt was null or undefined when calling a500CreateUtilizationInstance.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.repetitionCount !== undefined && requestParameters.repetitionCount !== null) {
            queryParameters['repetitionCount'] = requestParameters.repetitionCount;
        }

        
        if (requestParameters.takenAt !== undefined && requestParameters.takenAt !== null) {
            queryParameters['takenAt'] = (requestParameters.takenAt as any).toISOString();
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/utilization-instance`,
            action: 'a500:createUtilizationInstance',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Get a user\'s info on A500 equipment
     */
    async a500GetUser(requestParameters: A500GetUserRequest): Promise<A500GetUserResponse> {
        if (requestParameters.displaySerial === null || requestParameters.displaySerial === undefined) {            
            throw new runtime.RequiredError('displaySerial','Required parameter requestParameters.displaySerial was null or undefined when calling a500GetUser.');
        }
        
        if (requestParameters.displaySoftwareVersion === null || requestParameters.displaySoftwareVersion === undefined) {            
            throw new runtime.RequiredError('displaySoftwareVersion','Required parameter requestParameters.displaySoftwareVersion was null or undefined when calling a500GetUser.');
        }
        
        if (requestParameters.facilityId === null || requestParameters.facilityId === undefined) {            
            throw new runtime.RequiredError('facilityId','Required parameter requestParameters.facilityId was null or undefined when calling a500GetUser.');
        }
        
        if (requestParameters.memberIdentifier === null || requestParameters.memberIdentifier === undefined) {            
            throw new runtime.RequiredError('memberIdentifier','Required parameter requestParameters.memberIdentifier was null or undefined when calling a500GetUser.');
        }
        
        if (requestParameters.model === null || requestParameters.model === undefined) {            
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling a500GetUser.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.displaySerial !== undefined && requestParameters.displaySerial !== null) {
            queryParameters['displaySerial'] = requestParameters.displaySerial;
        }

        
        if (requestParameters.displaySoftwareVersion !== undefined && requestParameters.displaySoftwareVersion !== null) {
            queryParameters['displaySoftwareVersion'] = requestParameters.displaySoftwareVersion;
        }

        
        if (requestParameters.facilityId !== undefined && requestParameters.facilityId !== null) {
            queryParameters['facilityId'] = requestParameters.facilityId;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/user`,
            action: 'a500:getUser',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Initializes a facility strength machine
     */
    async a500Initialize(requestParameters: A500InitializeRequest): Promise<StrengthMachineInitializeResponse> {
        if (requestParameters.displayUUID === null || requestParameters.displayUUID === undefined) {            
            throw new runtime.RequiredError('displayUUID','Required parameter requestParameters.displayUUID was null or undefined when calling a500Initialize.');
        }
        
        if (requestParameters.firmwareVersion === null || requestParameters.firmwareVersion === undefined) {            
            throw new runtime.RequiredError('firmwareVersion','Required parameter requestParameters.firmwareVersion was null or undefined when calling a500Initialize.');
        }
        
        if (requestParameters.leftCylinderSerial === null || requestParameters.leftCylinderSerial === undefined) {            
            throw new runtime.RequiredError('leftCylinderSerial','Required parameter requestParameters.leftCylinderSerial was null or undefined when calling a500Initialize.');
        }
        
        if (requestParameters.machineModel === null || requestParameters.machineModel === undefined) {            
            throw new runtime.RequiredError('machineModel','Required parameter requestParameters.machineModel was null or undefined when calling a500Initialize.');
        }
        
        if (requestParameters.mainBoardSerial === null || requestParameters.mainBoardSerial === undefined) {            
            throw new runtime.RequiredError('mainBoardSerial','Required parameter requestParameters.mainBoardSerial was null or undefined when calling a500Initialize.');
        }
        
        if (requestParameters.softwareVersion === null || requestParameters.softwareVersion === undefined) {            
            throw new runtime.RequiredError('softwareVersion','Required parameter requestParameters.softwareVersion was null or undefined when calling a500Initialize.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.displayUUID !== undefined && requestParameters.displayUUID !== null) {
            queryParameters['displayUUID'] = requestParameters.displayUUID;
        }

        
        if (requestParameters.firmwareVersion !== undefined && requestParameters.firmwareVersion !== null) {
            queryParameters['firmwareVersion'] = requestParameters.firmwareVersion;
        }

        
        if (requestParameters.leftCylinderSerial !== undefined && requestParameters.leftCylinderSerial !== null) {
            queryParameters['leftCylinderSerial'] = requestParameters.leftCylinderSerial;
        }

        
        if (requestParameters.machineModel !== undefined && requestParameters.machineModel !== null) {
            queryParameters['machineModel'] = requestParameters.machineModel;
        }

        
        if (requestParameters.mainBoardSerial !== undefined && requestParameters.mainBoardSerial !== null) {
            queryParameters['mainBoardSerial'] = requestParameters.mainBoardSerial;
        }

        
        if (requestParameters.rightCylinderSerial !== undefined && requestParameters.rightCylinderSerial !== null) {
            queryParameters['rightCylinderSerial'] = requestParameters.rightCylinderSerial;
        }

        
        if (requestParameters.softwareVersion !== undefined && requestParameters.softwareVersion !== null) {
            queryParameters['softwareVersion'] = requestParameters.softwareVersion;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/initialize`,
            action: 'a500:initialize',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Show an A500 Facility Strength Machine State
     */
    async a500ShowMachineState(requestParameters: A500ShowMachineStateRequest): Promise<A500MachineStateResponse> {
        if (requestParameters.facilityStrengthMachineId === null || requestParameters.facilityStrengthMachineId === undefined) {            
            throw new runtime.RequiredError('facilityStrengthMachineId','Required parameter requestParameters.facilityStrengthMachineId was null or undefined when calling a500ShowMachineState.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.facilityStrengthMachineId !== undefined && requestParameters.facilityStrengthMachineId !== null) {
            pathParameters['facilityStrengthMachineId'] = requestParameters.facilityStrengthMachineId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/{facilityStrengthMachineId}/machine-state`.replace(`{${"facilityStrengthMachineId"}}`, encodeURIComponent(String(requestParameters.facilityStrengthMachineId))),
            action: 'a500:showMachineState',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to A500 Facility Strength Machine State
     */
    async a500SubscribeMachineState(requestParameters: A500SubscribeMachineStateRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.facilityStrengthMachineId !== undefined && requestParameters.facilityStrengthMachineId !== null) {
            queryParameters['facilityStrengthMachineId'] = requestParameters.facilityStrengthMachineId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/subscribeMachineState`,
            action: 'a500:subscribeMachineState',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create or update a facility strength machine
     */
    async a500UpdateMachine(requestParameters: A500UpdateMachineRequest): Promise<FacilityStrengthMachineResponse> {
        if (requestParameters.displaySerial === null || requestParameters.displaySerial === undefined) {            
            throw new runtime.RequiredError('displaySerial','Required parameter requestParameters.displaySerial was null or undefined when calling a500UpdateMachine.');
        }
        
        if (requestParameters.displaySoftwareVersion === null || requestParameters.displaySoftwareVersion === undefined) {            
            throw new runtime.RequiredError('displaySoftwareVersion','Required parameter requestParameters.displaySoftwareVersion was null or undefined when calling a500UpdateMachine.');
        }
        
        if (requestParameters.facilityId === null || requestParameters.facilityId === undefined) {            
            throw new runtime.RequiredError('facilityId','Required parameter requestParameters.facilityId was null or undefined when calling a500UpdateMachine.');
        }
        
        if (requestParameters.model === null || requestParameters.model === undefined) {            
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling a500UpdateMachine.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.displaySerial !== undefined && requestParameters.displaySerial !== null) {
            queryParameters['displaySerial'] = requestParameters.displaySerial;
        }

        
        if (requestParameters.displaySoftwareVersion !== undefined && requestParameters.displaySoftwareVersion !== null) {
            queryParameters['displaySoftwareVersion'] = requestParameters.displaySoftwareVersion;
        }

        
        if (requestParameters.facilityId !== undefined && requestParameters.facilityId !== null) {
            queryParameters['facilityId'] = requestParameters.facilityId;
        }

        
        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/machine`,
            action: 'a500:updateMachine',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Updates a facility strength machine state
     */
    async a500UpdateMachineState(requestParameters: A500UpdateMachineStateRequest): Promise<A500MachineStateResponse> {
        if (requestParameters.appType === null || requestParameters.appType === undefined) {            
            throw new runtime.RequiredError('appType','Required parameter requestParameters.appType was null or undefined when calling a500UpdateMachineState.');
        }
        
        if (requestParameters.facilityStrengthMachineId === null || requestParameters.facilityStrengthMachineId === undefined) {            
            throw new runtime.RequiredError('facilityStrengthMachineId','Required parameter requestParameters.facilityStrengthMachineId was null or undefined when calling a500UpdateMachineState.');
        }
        
        if (requestParameters.forceUnit === null || requestParameters.forceUnit === undefined) {            
            throw new runtime.RequiredError('forceUnit','Required parameter requestParameters.forceUnit was null or undefined when calling a500UpdateMachineState.');
        }
        
        if (requestParameters.isFacilityConfigurationOverridden === null || requestParameters.isFacilityConfigurationOverridden === undefined) {            
            throw new runtime.RequiredError('isFacilityConfigurationOverridden','Required parameter requestParameters.isFacilityConfigurationOverridden was null or undefined when calling a500UpdateMachineState.');
        }
        
        if (requestParameters.primaryFocus === null || requestParameters.primaryFocus === undefined) {            
            throw new runtime.RequiredError('primaryFocus','Required parameter requestParameters.primaryFocus was null or undefined when calling a500UpdateMachineState.');
        }
        
        if (requestParameters.secondaryFocus === null || requestParameters.secondaryFocus === undefined) {            
            throw new runtime.RequiredError('secondaryFocus','Required parameter requestParameters.secondaryFocus was null or undefined when calling a500UpdateMachineState.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.appType !== undefined && requestParameters.appType !== null) {
            queryParameters['appType'] = requestParameters.appType;
        }

        
        if (requestParameters.forceUnit !== undefined && requestParameters.forceUnit !== null) {
            queryParameters['forceUnit'] = requestParameters.forceUnit;
        }

        
        if (requestParameters.isFacilityConfigurationOverridden !== undefined && requestParameters.isFacilityConfigurationOverridden !== null) {
            queryParameters['isFacilityConfigurationOverridden'] = requestParameters.isFacilityConfigurationOverridden;
        }

        
        if (requestParameters.primaryFocus !== undefined && requestParameters.primaryFocus !== null) {
            queryParameters['primaryFocus'] = requestParameters.primaryFocus;
        }

        
        if (requestParameters.secondaryFocus !== undefined && requestParameters.secondaryFocus !== null) {
            queryParameters['secondaryFocus'] = requestParameters.secondaryFocus;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.facilityStrengthMachineId !== undefined && requestParameters.facilityStrengthMachineId !== null) {
            pathParameters['facilityStrengthMachineId'] = requestParameters.facilityStrengthMachineId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/{facilityStrengthMachineId}/machine-state`.replace(`{${"facilityStrengthMachineId"}}`, encodeURIComponent(String(requestParameters.facilityStrengthMachineId))),
            action: 'a500:updateMachineState',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Login a user from an A500 Machine
     */
    async a500UserLogin(requestParameters: A500UserLoginRequest): Promise<FacilityUserResponse> {
        if (requestParameters.memberIdentifier === null || requestParameters.memberIdentifier === undefined) {            
            throw new runtime.RequiredError('memberIdentifier','Required parameter requestParameters.memberIdentifier was null or undefined when calling a500UserLogin.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/a500/user-login`,
            action: 'a500:userLogin',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create an application
     */
    async applicationCreate(requestParameters: ApplicationCreateRequest): Promise<ApplicationResponse> {
        if (requestParameters.applicationName === null || requestParameters.applicationName === undefined) {            
            throw new runtime.RequiredError('applicationName','Required parameter requestParameters.applicationName was null or undefined when calling applicationCreate.');
        }
        
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling applicationCreate.');
        }
        
        if (requestParameters.redirectUrl === null || requestParameters.redirectUrl === undefined) {            
            throw new runtime.RequiredError('redirectUrl','Required parameter requestParameters.redirectUrl was null or undefined when calling applicationCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.applicationName !== undefined && requestParameters.applicationName !== null) {
            queryParameters['applicationName'] = requestParameters.applicationName;
        }

        
        if (requestParameters.redirectUrl !== undefined && requestParameters.redirectUrl !== null) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/application`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'application:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete an application
     */
    async applicationDelete(requestParameters: ApplicationDeleteRequest): Promise<void> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling applicationDelete.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/application/{id}`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'application:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List applications for a Developer Account
     */
    async applicationList(requestParameters: ApplicationListRequest): Promise<ApplicationListResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling applicationList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/application/list`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'application:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show an application
     */
    async applicationShow(requestParameters: ApplicationShowRequest): Promise<ApplicationResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling applicationShow.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/application`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'application:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update an application
     */
    async applicationUpdate(requestParameters: ApplicationUpdateRequest): Promise<ApplicationResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling applicationUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.applicationName !== undefined && requestParameters.applicationName !== null) {
            queryParameters['applicationName'] = requestParameters.applicationName;
        }

        
        if (requestParameters.redirectUrl !== undefined && requestParameters.redirectUrl !== null) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/application/{id}`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'application:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Exchanges an authorization token for access and refresh tokens
     */
    async authExchangeFulfillment(requestParameters: AuthExchangeFulfillmentRequest): Promise<UserResponse> {
        if (requestParameters.exchangeToken === null || requestParameters.exchangeToken === undefined) {            
            throw new runtime.RequiredError('exchangeToken','Required parameter requestParameters.exchangeToken was null or undefined when calling authExchangeFulfillment.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.exchangeToken !== undefined && requestParameters.exchangeToken !== null) {
            queryParameters['exchangeToken'] = requestParameters.exchangeToken;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/exchange/fulfillment`,
            action: 'auth:exchangeFulfillment',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Create a cardio exercise
     */
    async cardioExerciseCreate(requestParameters: CardioExerciseCreateRequest): Promise<CardioExerciseResponse> {
        if (requestParameters.defaultExerciseAlias === null || requestParameters.defaultExerciseAlias === undefined) {            
            throw new runtime.RequiredError('defaultExerciseAlias','Required parameter requestParameters.defaultExerciseAlias was null or undefined when calling cardioExerciseCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.defaultExerciseAlias !== undefined && requestParameters.defaultExerciseAlias !== null) {
            queryParameters['defaultExerciseAlias'] = requestParameters.defaultExerciseAlias;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise`,
            action: 'cardioExercise:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a cardio exercise
     */
    async cardioExerciseDelete(requestParameters: CardioExerciseDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'cardioExercise:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List cardio exercises
     */
    async cardioExerciseList(requestParameters: CardioExerciseListRequest): Promise<CardioExerciseListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.defaultAlias !== undefined && requestParameters.defaultAlias !== null) {
            queryParameters['defaultAlias'] = requestParameters.defaultAlias;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/list`,
            action: 'cardioExercise:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a cardio exercise muscle
     */
    async cardioExerciseMuscleCreate(requestParameters: CardioExerciseMuscleCreateRequest): Promise<CardioExerciseMuscleResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling cardioExerciseMuscleCreate.');
        }
        
        if (requestParameters.muscle === null || requestParameters.muscle === undefined) {            
            throw new runtime.RequiredError('muscle','Required parameter requestParameters.muscle was null or undefined when calling cardioExerciseMuscleCreate.');
        }
        
        if (requestParameters.targetLevel === null || requestParameters.targetLevel === undefined) {            
            throw new runtime.RequiredError('targetLevel','Required parameter requestParameters.targetLevel was null or undefined when calling cardioExerciseMuscleCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.muscle !== undefined && requestParameters.muscle !== null) {
            queryParameters['muscle'] = requestParameters.muscle;
        }

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            pathParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/{cardioExerciseId}/muscle`.replace(`{${"cardioExerciseId"}}`, encodeURIComponent(String(requestParameters.cardioExerciseId))),
            action: 'cardioExerciseMuscle:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a cardio exercise muscle
     */
    async cardioExerciseMuscleDelete(requestParameters: CardioExerciseMuscleDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseMuscleDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/muscle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'cardioExerciseMuscle:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List cardio exercise muscles
     */
    async cardioExerciseMuscleList(requestParameters: CardioExerciseMuscleListRequest): Promise<CardioExerciseMuscleListResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling cardioExerciseMuscleList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.muscle !== undefined && requestParameters.muscle !== null) {
            queryParameters['muscle'] = requestParameters.muscle;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            pathParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/{cardioExerciseId}/muscle`.replace(`{${"cardioExerciseId"}}`, encodeURIComponent(String(requestParameters.cardioExerciseId))),
            action: 'cardioExerciseMuscle:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a cardio exercise muscle
     */
    async cardioExerciseMuscleShow(requestParameters: CardioExerciseMuscleShowRequest): Promise<CardioExerciseMuscleResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseMuscleShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/muscle/`,
            action: 'cardioExerciseMuscle:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a cardio exercise muscle
     */
    async cardioExerciseMuscleUpdate(requestParameters: CardioExerciseMuscleUpdateRequest): Promise<CardioExerciseMuscleResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseMuscleUpdate.');
        }
        
        if (requestParameters.targetLevel === null || requestParameters.targetLevel === undefined) {            
            throw new runtime.RequiredError('targetLevel','Required parameter requestParameters.targetLevel was null or undefined when calling cardioExerciseMuscleUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/muscle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'cardioExerciseMuscle:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a cardio exercise
     */
    async cardioExerciseShow(requestParameters: CardioExerciseShowRequest): Promise<CardioExerciseResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise`,
            action: 'cardioExercise:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a cardio exercise
     */
    async cardioExerciseUpdate(requestParameters: CardioExerciseUpdateRequest): Promise<CardioExerciseResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'cardioExercise:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a cardio exercise variant
     */
    async cardioExerciseVariantCreate(requestParameters: CardioExerciseVariantCreateRequest): Promise<CardioExerciseVariantResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling cardioExerciseVariantCreate.');
        }
        
        if (requestParameters.variant === null || requestParameters.variant === undefined) {            
            throw new runtime.RequiredError('variant','Required parameter requestParameters.variant was null or undefined when calling cardioExerciseVariantCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.instructionalImage !== undefined && requestParameters.instructionalImage !== null) {
            queryParameters['instructionalImage'] = requestParameters.instructionalImage;
        }

        
        if (requestParameters.instructionalVideo !== undefined && requestParameters.instructionalVideo !== null) {
            queryParameters['instructionalVideo'] = requestParameters.instructionalVideo;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            pathParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/{cardioExerciseId}/variant`.replace(`{${"cardioExerciseId"}}`, encodeURIComponent(String(requestParameters.cardioExerciseId))),
            action: 'cardioExerciseVariant:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a cardio exercise variant
     */
    async cardioExerciseVariantDelete(requestParameters: CardioExerciseVariantDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseVariantDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/variant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'cardioExerciseVariant:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List cardio exercise variants
     */
    async cardioExerciseVariantList(requestParameters: CardioExerciseVariantListRequest): Promise<CardioExerciseVariantListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/variant/list`,
            action: 'cardioExerciseVariant:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a cardio exercise variant
     */
    async cardioExerciseVariantShow(requestParameters: CardioExerciseVariantShowRequest): Promise<CardioExerciseVariantResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseVariantShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/variant`,
            action: 'cardioExerciseVariant:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a cardio exercise variant
     */
    async cardioExerciseVariantUpdate(requestParameters: CardioExerciseVariantUpdateRequest): Promise<CardioExerciseVariantResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioExerciseVariantUpdate.');
        }
        
        if (requestParameters.variant === null || requestParameters.variant === undefined) {            
            throw new runtime.RequiredError('variant','Required parameter requestParameters.variant was null or undefined when calling cardioExerciseVariantUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.instructionalImage !== undefined && requestParameters.instructionalImage !== null) {
            queryParameters['instructionalImage'] = requestParameters.instructionalImage;
        }

        
        if (requestParameters.instructionalVideo !== undefined && requestParameters.instructionalVideo !== null) {
            queryParameters['instructionalVideo'] = requestParameters.instructionalVideo;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-exercise/variant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'cardioExerciseVariant:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List cardio machines
     */
    async cardioMachineList(requestParameters: CardioMachineListRequest): Promise<CardioMachineListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-machine/list`,
            action: 'cardioMachine:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a cardio machine
     */
    async cardioMachineShow(requestParameters: CardioMachineShowRequest): Promise<CardioMachineResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cardioMachineShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cardio-machine`,
            action: 'cardioMachine:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Lists all endpoints for reference
     */
    async coreEndpoints(requestParameters: CoreEndpointsRequest): Promise<EndpointsResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/endpoints`,
            action: 'core:endpoints',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Lists all errors for reference
     */
    async coreErrors(requestParameters: CoreErrorsRequest): Promise<ErrorResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/errors`,
            action: 'core:errors',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Returns 200 if healthy, 400 if unhealthy
     */
    async coreHealth(requestParameters: CoreHealthRequest): Promise<HealthResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            action: 'core:health',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Show basic API information
     */
    async coreStatus(requestParameters: CoreStatusRequest): Promise<StatusResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status`,
            action: 'core:status',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Returns current system time
     */
    async coreTime(requestParameters: CoreTimeRequest): Promise<TimeResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/time`,
            action: 'core:time',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Unsubscribe from model updates
     */
    async coreUnsubscribe(requestParameters: CoreUnsubscribeRequest): Promise<void> {
        if (requestParameters.subscriptionKey === null || requestParameters.subscriptionKey === undefined) {            
            throw new runtime.RequiredError('subscriptionKey','Required parameter requestParameters.subscriptionKey was null or undefined when calling coreUnsubscribe.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.subscriptionKey !== undefined && requestParameters.subscriptionKey !== null) {
            queryParameters['subscriptionKey'] = requestParameters.subscriptionKey;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/unsubscribe`,
            action: 'core:unsubscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Create a Development Account
     */
    async developmentAccountCreate(requestParameters: DevelopmentAccountCreateRequest): Promise<DevelopmentAccountResponse> {
        if (requestParameters.privacyUrl === null || requestParameters.privacyUrl === undefined) {            
            throw new runtime.RequiredError('privacyUrl','Required parameter requestParameters.privacyUrl was null or undefined when calling developmentAccountCreate.');
        }
        
        if (requestParameters.termsUrl === null || requestParameters.termsUrl === undefined) {            
            throw new runtime.RequiredError('termsUrl','Required parameter requestParameters.termsUrl was null or undefined when calling developmentAccountCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.address !== undefined && requestParameters.address !== null) {
            queryParameters['address'] = requestParameters.address;
        }

        
        if (requestParameters.company !== undefined && requestParameters.company !== null) {
            queryParameters['company'] = requestParameters.company;
        }

        
        if (requestParameters.privacyUrl !== undefined && requestParameters.privacyUrl !== null) {
            queryParameters['privacyUrl'] = requestParameters.privacyUrl;
        }

        
        if (requestParameters.termsUrl !== undefined && requestParameters.termsUrl !== null) {
            queryParameters['termsUrl'] = requestParameters.termsUrl;
        }

        
        if (requestParameters.websiteUrl !== undefined && requestParameters.websiteUrl !== null) {
            queryParameters['websiteUrl'] = requestParameters.websiteUrl;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development`,
            action: 'developmentAccount:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a Development Account
     */
    async developmentAccountDelete(requestParameters: DevelopmentAccountDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling developmentAccountDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'developmentAccount:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List Development Accounts
     */
    async developmentAccountList(requestParameters: DevelopmentAccountListRequest): Promise<DevelopmentAccountListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development/list`,
            action: 'developmentAccount:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List User Development Account Relationships
     */
    async developmentAccountRelationshipList(requestParameters: DevelopmentAccountRelationshipListRequest): Promise<DevelopmentAccountRelationshipListResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling developmentAccountRelationshipList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/relationship/list`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'developmentAccountRelationship:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Deletes a Development Account Relationship Request
     */
    async developmentAccountRelationshipRequestDelete(requestParameters: DevelopmentAccountRelationshipRequestDeleteRequest): Promise<void> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling developmentAccountRelationshipRequestDelete.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling developmentAccountRelationshipRequestDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/relationship-request/{id}`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'developmentAccountRelationshipRequest:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Fulfills a Development Account Relationship Request
     */
    async developmentAccountRelationshipRequestFulfillment(requestParameters: DevelopmentAccountRelationshipRequestFulfillmentRequest): Promise<DevelopmentAccountRelationshipResponse> {
        if (requestParameters.code === null || requestParameters.code === undefined) {            
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling developmentAccountRelationshipRequestFulfillment.');
        }
        
        if (requestParameters.shouldAuthorize === null || requestParameters.shouldAuthorize === undefined) {            
            throw new runtime.RequiredError('shouldAuthorize','Required parameter requestParameters.shouldAuthorize was null or undefined when calling developmentAccountRelationshipRequestFulfillment.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.code !== undefined && requestParameters.code !== null) {
            queryParameters['code'] = requestParameters.code;
        }

        
        if (requestParameters.shouldAuthorize !== undefined && requestParameters.shouldAuthorize !== null) {
            queryParameters['shouldAuthorize'] = requestParameters.shouldAuthorize;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/relationship-request/fulfillment`,
            action: 'developmentAccountRelationshipRequest:fulfillment',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Initialize a Development Account Relationship Request
     */
    async developmentAccountRelationshipRequestInit(requestParameters: DevelopmentAccountRelationshipRequestInitRequest): Promise<DevelopmentAccountRelationshipRequestResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling developmentAccountRelationshipRequestInit.');
        }
        
        if (requestParameters.email === null || requestParameters.email === undefined) {            
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling developmentAccountRelationshipRequestInit.');
        }
        
        if (requestParameters.role === null || requestParameters.role === undefined) {            
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling developmentAccountRelationshipRequestInit.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.role !== undefined && requestParameters.role !== null) {
            queryParameters['role'] = requestParameters.role;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/relationship-request/init`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'developmentAccountRelationshipRequest:init',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List Development Account Relationship Requests
     */
    async developmentAccountRelationshipRequestList(requestParameters: DevelopmentAccountRelationshipRequestListRequest): Promise<DevelopmentAccountRelationshipRequestListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.company !== undefined && requestParameters.company !== null) {
            queryParameters['company'] = requestParameters.company;
        }

        
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            queryParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/relationship-request/list`,
            action: 'developmentAccountRelationshipRequest:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a Development Account Relationship Request
     */
    async developmentAccountRelationshipRequestShow(requestParameters: DevelopmentAccountRelationshipRequestShowRequest): Promise<DevelopmentAccountRelationshipRequestResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.code !== undefined && requestParameters.code !== null) {
            queryParameters['code'] = requestParameters.code;
        }

        
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            queryParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/relationship-request`,
            action: 'developmentAccountRelationshipRequest:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a User Development Account Relationship
     */
    async developmentAccountRelationshipShow(requestParameters: DevelopmentAccountRelationshipShowRequest): Promise<DevelopmentAccountRelationshipResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling developmentAccountRelationshipShow.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling developmentAccountRelationshipShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/relationship`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'developmentAccountRelationship:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Updates a Development Account Relationship
     */
    async developmentAccountRelationshipUpdate(requestParameters: DevelopmentAccountRelationshipUpdateRequest): Promise<DevelopmentAccountRelationshipResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling developmentAccountRelationshipUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling developmentAccountRelationshipUpdate.');
        }
        
        if (requestParameters.role === null || requestParameters.role === undefined) {            
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling developmentAccountRelationshipUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.role !== undefined && requestParameters.role !== null) {
            queryParameters['role'] = requestParameters.role;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/relationship/{id}`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'developmentAccountRelationship:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a Development Account
     */
    async developmentAccountShow(requestParameters: DevelopmentAccountShowRequest): Promise<DevelopmentAccountResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling developmentAccountShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account`,
            action: 'developmentAccount:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a Development Account
     */
    async developmentAccountUpdate(requestParameters: DevelopmentAccountUpdateRequest): Promise<DevelopmentAccountResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling developmentAccountUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.address !== undefined && requestParameters.address !== null) {
            queryParameters['address'] = requestParameters.address;
        }

        
        if (requestParameters.company !== undefined && requestParameters.company !== null) {
            queryParameters['company'] = requestParameters.company;
        }

        
        if (requestParameters.privacyUrl !== undefined && requestParameters.privacyUrl !== null) {
            queryParameters['privacyUrl'] = requestParameters.privacyUrl;
        }

        
        if (requestParameters.termsUrl !== undefined && requestParameters.termsUrl !== null) {
            queryParameters['termsUrl'] = requestParameters.termsUrl;
        }

        
        if (requestParameters.websiteUrl !== undefined && requestParameters.websiteUrl !== null) {
            queryParameters['websiteUrl'] = requestParameters.websiteUrl;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'developmentAccount:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user email
     */
    async emailAddressCreate(requestParameters: EmailAddressCreateRequest): Promise<EmailAddressResponse> {
        if (requestParameters.email === null || requestParameters.email === undefined) {            
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling emailAddressCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/email-address`,
            action: 'emailAddress:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s email address
     */
    async emailAddressDelete(requestParameters: EmailAddressDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailAddressDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/email-address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'emailAddress:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s email addresses
     */
    async emailAddressList(requestParameters: EmailAddressListRequest): Promise<EmailAddressListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/email-address/list`,
            action: 'emailAddress:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s email address
     */
    async emailAddressShow(requestParameters: EmailAddressShowRequest): Promise<EmailAddressResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailAddressShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/email-address`,
            action: 'emailAddress:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Fulfills a user\'s email validation process
     */
    async emailAddressValidationFulfillment(requestParameters: EmailAddressValidationFulfillmentRequest): Promise<EmailAddressResponse> {
        if (requestParameters.validationToken === null || requestParameters.validationToken === undefined) {            
            throw new runtime.RequiredError('validationToken','Required parameter requestParameters.validationToken was null or undefined when calling emailAddressValidationFulfillment.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.validationToken !== undefined && requestParameters.validationToken !== null) {
            pathParameters['validationToken'] = requestParameters.validationToken;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/email-address/validation-fulfillment/{validationToken}`.replace(`{${"validationToken"}}`, encodeURIComponent(String(requestParameters.validationToken))),
            action: 'emailAddress:validationFulfillment',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Request an email validation email be sent
     */
    async emailAddressValidationRequest(requestParameters: EmailAddressValidationRequestRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailAddressValidationRequest.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/email-address/validation-request/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'emailAddress:validationRequest',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Create an exercise alias
     */
    async exerciseAliasCreate(requestParameters: ExerciseAliasCreateRequest): Promise<ExerciseAliasResponse> {
        if (requestParameters.alias === null || requestParameters.alias === undefined) {            
            throw new runtime.RequiredError('alias','Required parameter requestParameters.alias was null or undefined when calling exerciseAliasCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.alias !== undefined && requestParameters.alias !== null) {
            queryParameters['alias'] = requestParameters.alias;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.stretchExerciseId !== undefined && requestParameters.stretchExerciseId !== null) {
            queryParameters['stretchExerciseId'] = requestParameters.stretchExerciseId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-alias`,
            action: 'exerciseAlias:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete an exercise alias
     */
    async exerciseAliasDelete(requestParameters: ExerciseAliasDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseAliasDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-alias/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'exerciseAlias:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List exercise aliases
     */
    async exerciseAliasList(requestParameters: ExerciseAliasListRequest): Promise<ExerciseAliasListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.alias !== undefined && requestParameters.alias !== null) {
            queryParameters['alias'] = requestParameters.alias;
        }

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.stretchExerciseId !== undefined && requestParameters.stretchExerciseId !== null) {
            queryParameters['stretchExerciseId'] = requestParameters.stretchExerciseId;
        }

        
        if (requestParameters.type !== undefined && requestParameters.type !== null) {
            queryParameters['type'] = requestParameters.type;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-alias/list`,
            action: 'exerciseAlias:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show an exercise alias
     */
    async exerciseAliasShow(requestParameters: ExerciseAliasShowRequest): Promise<ExerciseAliasResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseAliasShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-alias`,
            action: 'exerciseAlias:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update an exercise alias
     */
    async exerciseAliasUpdate(requestParameters: ExerciseAliasUpdateRequest): Promise<ExerciseAliasResponse> {
        if (requestParameters.alias === null || requestParameters.alias === undefined) {            
            throw new runtime.RequiredError('alias','Required parameter requestParameters.alias was null or undefined when calling exerciseAliasUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseAliasUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.alias !== undefined && requestParameters.alias !== null) {
            queryParameters['alias'] = requestParameters.alias;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-alias/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'exerciseAlias:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create an exercise ordinal set assignment
     */
    async exerciseOrdinalSetAssignmentCreate(requestParameters: ExerciseOrdinalSetAssignmentCreateRequest): Promise<ExerciseOrdinalSetAssignmentResponse> {
        if (requestParameters.exerciseOrdinalSetId === null || requestParameters.exerciseOrdinalSetId === undefined) {            
            throw new runtime.RequiredError('exerciseOrdinalSetId','Required parameter requestParameters.exerciseOrdinalSetId was null or undefined when calling exerciseOrdinalSetAssignmentCreate.');
        }
        
        if (requestParameters.ordinalIdentifier === null || requestParameters.ordinalIdentifier === undefined) {            
            throw new runtime.RequiredError('ordinalIdentifier','Required parameter requestParameters.ordinalIdentifier was null or undefined when calling exerciseOrdinalSetAssignmentCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.cardioExerciseVariantId !== undefined && requestParameters.cardioExerciseVariantId !== null) {
            queryParameters['cardioExerciseVariantId'] = requestParameters.cardioExerciseVariantId;
        }

        
        if (requestParameters.ordinalIdentifier !== undefined && requestParameters.ordinalIdentifier !== null) {
            queryParameters['ordinalIdentifier'] = requestParameters.ordinalIdentifier;
        }

        
        if (requestParameters.strengthExerciseVariantId !== undefined && requestParameters.strengthExerciseVariantId !== null) {
            queryParameters['strengthExerciseVariantId'] = requestParameters.strengthExerciseVariantId;
        }

        
        if (requestParameters.stretchExerciseVariantId !== undefined && requestParameters.stretchExerciseVariantId !== null) {
            queryParameters['stretchExerciseVariantId'] = requestParameters.stretchExerciseVariantId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.exerciseOrdinalSetId !== undefined && requestParameters.exerciseOrdinalSetId !== null) {
            pathParameters['exerciseOrdinalSetId'] = requestParameters.exerciseOrdinalSetId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/{exerciseOrdinalSetId}/assignment`.replace(`{${"exerciseOrdinalSetId"}}`, encodeURIComponent(String(requestParameters.exerciseOrdinalSetId))),
            action: 'exerciseOrdinalSetAssignment:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete an exercise ordinal set assignment
     */
    async exerciseOrdinalSetAssignmentDelete(requestParameters: ExerciseOrdinalSetAssignmentDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseOrdinalSetAssignmentDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/assignment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'exerciseOrdinalSetAssignment:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List exercise ordinal set assignments
     */
    async exerciseOrdinalSetAssignmentList(requestParameters: ExerciseOrdinalSetAssignmentListRequest): Promise<ExerciseOrdinalSetAssignmentListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.exerciseOrdinalSetId !== undefined && requestParameters.exerciseOrdinalSetId !== null) {
            queryParameters['exerciseOrdinalSetId'] = requestParameters.exerciseOrdinalSetId;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.ordinalIdentifier !== undefined && requestParameters.ordinalIdentifier !== null) {
            queryParameters['ordinalIdentifier'] = requestParameters.ordinalIdentifier;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/assignment/list`,
            action: 'exerciseOrdinalSetAssignment:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show an exercise ordinal set assignment
     */
    async exerciseOrdinalSetAssignmentShow(requestParameters: ExerciseOrdinalSetAssignmentShowRequest): Promise<ExerciseOrdinalSetAssignmentResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseOrdinalSetAssignmentShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/assignment`,
            action: 'exerciseOrdinalSetAssignment:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create an exercise ordinal set
     */
    async exerciseOrdinalSetCreate(requestParameters: ExerciseOrdinalSetCreateRequest): Promise<ExerciseOrdinalSetResponse> {
        if (requestParameters.code === null || requestParameters.code === undefined) {            
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling exerciseOrdinalSetCreate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling exerciseOrdinalSetCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.code !== undefined && requestParameters.code !== null) {
            queryParameters['code'] = requestParameters.code;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set`,
            action: 'exerciseOrdinalSet:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete an exercise ordinal set
     */
    async exerciseOrdinalSetDelete(requestParameters: ExerciseOrdinalSetDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseOrdinalSetDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'exerciseOrdinalSet:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List exercise ordinal sets
     */
    async exerciseOrdinalSetList(requestParameters: ExerciseOrdinalSetListRequest): Promise<ExerciseOrdinalSetListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.code !== undefined && requestParameters.code !== null) {
            queryParameters['code'] = requestParameters.code;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/list`,
            action: 'exerciseOrdinalSet:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show an exercise ordinal set
     */
    async exerciseOrdinalSetShow(requestParameters: ExerciseOrdinalSetShowRequest): Promise<ExerciseOrdinalSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseOrdinalSetShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set`,
            action: 'exerciseOrdinalSet:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update an exercise ordinal set
     */
    async exerciseOrdinalSetUpdate(requestParameters: ExerciseOrdinalSetUpdateRequest): Promise<ExerciseOrdinalSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exerciseOrdinalSetUpdate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling exerciseOrdinalSetUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercise-ordinal-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'exerciseOrdinalSet:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a facility access control IP Range whitelist entity
     */
    async facilityAccessControlIPRangeCreate(requestParameters: FacilityAccessControlIPRangeCreateRequest): Promise<FacilityAccessControlIPRangeResponse> {
        if (requestParameters.cidr === null || requestParameters.cidr === undefined) {            
            throw new runtime.RequiredError('cidr','Required parameter requestParameters.cidr was null or undefined when calling facilityAccessControlIPRangeCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.cidr !== undefined && requestParameters.cidr !== null) {
            queryParameters['cidr'] = requestParameters.cidr;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/ip-range`,
            action: 'facilityAccessControlIPRange:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a facility access control IP Range whitelist entity
     */
    async facilityAccessControlIPRangeDelete(requestParameters: FacilityAccessControlIPRangeDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityAccessControlIPRangeDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/ip-range/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityAccessControlIPRange:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a facility\'s access control IP Range whitelist entities
     */
    async facilityAccessControlIPRangeList(requestParameters: FacilityAccessControlIPRangeListRequest): Promise<FacilityAccessControlIPRangeListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.cidr !== undefined && requestParameters.cidr !== null) {
            queryParameters['cidr'] = requestParameters.cidr;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/ip-range/list`,
            action: 'facilityAccessControlIPRange:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility access control IP Range whitelist entity
     */
    async facilityAccessControlIPRangeShow(requestParameters: FacilityAccessControlIPRangeShowRequest): Promise<FacilityAccessControlIPRangeResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityAccessControlIPRangeShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/ip-range`,
            action: 'facilityAccessControlIPRange:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility access control IP Range whitelist entity
     */
    async facilityAccessControlIPRangeUpdate(requestParameters: FacilityAccessControlIPRangeUpdateRequest): Promise<FacilityAccessControlIPRangeResponse> {
        if (requestParameters.cidr === null || requestParameters.cidr === undefined) {            
            throw new runtime.RequiredError('cidr','Required parameter requestParameters.cidr was null or undefined when calling facilityAccessControlIPRangeUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityAccessControlIPRangeUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.cidr !== undefined && requestParameters.cidr !== null) {
            queryParameters['cidr'] = requestParameters.cidr;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/ip-range/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityAccessControlIPRange:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show the facility access control kiosk entity
     */
    async facilityAccessControlKioskShow(requestParameters: FacilityAccessControlKioskShowRequest): Promise<FacilityAccessControlKioskResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/kiosk`,
            action: 'facilityAccessControlKiosk:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 2
     * Update the facility access control kiosk entity
     */
    async facilityAccessControlKioskUpdate(requestParameters: FacilityAccessControlKioskUpdateRequest): Promise<FacilityAccessControlKioskResponse> {
        if (requestParameters.isKioskModeAllowed === null || requestParameters.isKioskModeAllowed === undefined) {            
            throw new runtime.RequiredError('isKioskModeAllowed','Required parameter requestParameters.isKioskModeAllowed was null or undefined when calling facilityAccessControlKioskUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.isFingerprintAuthenticationAllowed !== undefined && requestParameters.isFingerprintAuthenticationAllowed !== null) {
            queryParameters['isFingerprintAuthenticationAllowed'] = requestParameters.isFingerprintAuthenticationAllowed;
        }

        
        if (requestParameters.isKioskModeAllowed !== undefined && requestParameters.isKioskModeAllowed !== null) {
            queryParameters['isKioskModeAllowed'] = requestParameters.isKioskModeAllowed;
        }

        
        if (requestParameters.primaryIdentification !== undefined && requestParameters.primaryIdentification !== null) {
            queryParameters['primaryIdentification'] = requestParameters.primaryIdentification;
        }

        
        if (requestParameters.secondaryIdentification !== undefined && requestParameters.secondaryIdentification !== null) {
            queryParameters['secondaryIdentification'] = requestParameters.secondaryIdentification;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 2;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control/kiosk`,
            action: 'facilityAccessControlKiosk:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility access control
     */
    async facilityAccessControlShow(requestParameters: FacilityAccessControlShowRequest): Promise<FacilityAccessControlResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/access-control`,
            action: 'facilityAccessControl:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Updates a facility license
     */
    async facilityApplyLicense(requestParameters: FacilityApplyLicenseRequest): Promise<FacilityResponse> {
        if (requestParameters.key === null || requestParameters.key === undefined) {            
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling facilityApplyLicense.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.key !== undefined && requestParameters.key !== null) {
            queryParameters['key'] = requestParameters.key;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/apply-license`,
            action: 'facility:applyLicense',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a facility cardio machine
     */
    async facilityCardioMachineDelete(requestParameters: FacilityCardioMachineDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityCardioMachineDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/cardio-machine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityCardioMachine:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show a facility cardio machine
     */
    async facilityCardioMachineShow(requestParameters: FacilityCardioMachineShowRequest): Promise<FacilityCardioMachineResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityCardioMachineShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/cardio-machine`,
            action: 'facilityCardioMachine:show',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility cardio machine
     */
    async facilityCardioMachineUpdate(requestParameters: FacilityCardioMachineUpdateRequest): Promise<FacilityCardioMachineResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityCardioMachineUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.location !== undefined && requestParameters.location !== null) {
            queryParameters['location'] = requestParameters.location;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/cardio-machine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityCardioMachine:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility configuration
     */
    async facilityConfigurationShow(requestParameters: FacilityConfigurationShowRequest): Promise<FacilityConfigurationResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/configuration`,
            action: 'facilityConfiguration:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to facility configuration
     */
    async facilityConfigurationSubscribe(requestParameters: FacilityConfigurationSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityConfiguration/subscribe`,
            action: 'facilityConfiguration:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility configuration
     */
    async facilityConfigurationUpdate(requestParameters: FacilityConfigurationUpdateRequest): Promise<FacilityConfigurationResponse> {
        if (requestParameters.memberIdentificationComposition === null || requestParameters.memberIdentificationComposition === undefined) {            
            throw new runtime.RequiredError('memberIdentificationComposition','Required parameter requestParameters.memberIdentificationComposition was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        if (requestParameters.memberIdentificationForceLength === null || requestParameters.memberIdentificationForceLength === undefined) {            
            throw new runtime.RequiredError('memberIdentificationForceLength','Required parameter requestParameters.memberIdentificationForceLength was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        if (requestParameters.memberIdentificationLength === null || requestParameters.memberIdentificationLength === undefined) {            
            throw new runtime.RequiredError('memberIdentificationLength','Required parameter requestParameters.memberIdentificationLength was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        if (requestParameters.memberRequireEmail === null || requestParameters.memberRequireEmail === undefined) {            
            throw new runtime.RequiredError('memberRequireEmail','Required parameter requestParameters.memberRequireEmail was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        if (requestParameters.memberSecretComposition === null || requestParameters.memberSecretComposition === undefined) {            
            throw new runtime.RequiredError('memberSecretComposition','Required parameter requestParameters.memberSecretComposition was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        if (requestParameters.memberSecretForceLength === null || requestParameters.memberSecretForceLength === undefined) {            
            throw new runtime.RequiredError('memberSecretForceLength','Required parameter requestParameters.memberSecretForceLength was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        if (requestParameters.memberSecretLength === null || requestParameters.memberSecretLength === undefined) {            
            throw new runtime.RequiredError('memberSecretLength','Required parameter requestParameters.memberSecretLength was null or undefined when calling facilityConfigurationUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.memberIdentificationComposition !== undefined && requestParameters.memberIdentificationComposition !== null) {
            queryParameters['memberIdentificationComposition'] = requestParameters.memberIdentificationComposition;
        }

        
        if (requestParameters.memberIdentificationForceLength !== undefined && requestParameters.memberIdentificationForceLength !== null) {
            queryParameters['memberIdentificationForceLength'] = requestParameters.memberIdentificationForceLength;
        }

        
        if (requestParameters.memberIdentificationLength !== undefined && requestParameters.memberIdentificationLength !== null) {
            queryParameters['memberIdentificationLength'] = requestParameters.memberIdentificationLength;
        }

        
        if (requestParameters.memberRequireEmail !== undefined && requestParameters.memberRequireEmail !== null) {
            queryParameters['memberRequireEmail'] = requestParameters.memberRequireEmail;
        }

        
        if (requestParameters.memberSecretComposition !== undefined && requestParameters.memberSecretComposition !== null) {
            queryParameters['memberSecretComposition'] = requestParameters.memberSecretComposition;
        }

        
        if (requestParameters.memberSecretForceLength !== undefined && requestParameters.memberSecretForceLength !== null) {
            queryParameters['memberSecretForceLength'] = requestParameters.memberSecretForceLength;
        }

        
        if (requestParameters.memberSecretLength !== undefined && requestParameters.memberSecretLength !== null) {
            queryParameters['memberSecretLength'] = requestParameters.memberSecretLength;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/configuration`,
            action: 'facilityConfiguration:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a facility
     */
    async facilityCreate(requestParameters: FacilityCreateRequest): Promise<FacilityResponse> {
        if (requestParameters.key === null || requestParameters.key === undefined) {            
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling facilityCreate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling facilityCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.address !== undefined && requestParameters.address !== null) {
            queryParameters['address'] = requestParameters.address;
        }

        
        if (requestParameters.city !== undefined && requestParameters.city !== null) {
            queryParameters['city'] = requestParameters.city;
        }

        
        if (requestParameters.country !== undefined && requestParameters.country !== null) {
            queryParameters['country'] = requestParameters.country;
        }

        
        if (requestParameters.key !== undefined && requestParameters.key !== null) {
            queryParameters['key'] = requestParameters.key;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.phone !== undefined && requestParameters.phone !== null) {
            queryParameters['phone'] = requestParameters.phone;
        }

        
        if (requestParameters.postcode !== undefined && requestParameters.postcode !== null) {
            queryParameters['postcode'] = requestParameters.postcode;
        }

        
        if (requestParameters.state !== undefined && requestParameters.state !== null) {
            queryParameters['state'] = requestParameters.state;
        }

        
        if (requestParameters.website !== undefined && requestParameters.website !== null) {
            queryParameters['website'] = requestParameters.website;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility `,
            action: 'facility:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a facility InBody integration
     */
    async facilityInBodyIntegrationCreate(requestParameters: FacilityInBodyIntegrationCreateRequest): Promise<FacilityInBodyIntegrationResponse> {
        if (requestParameters.type === null || requestParameters.type === undefined) {            
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling facilityInBodyIntegrationCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.account !== undefined && requestParameters.account !== null) {
            queryParameters['account'] = requestParameters.account;
        }

        
        if (requestParameters.key !== undefined && requestParameters.key !== null) {
            queryParameters['key'] = requestParameters.key;
        }

        
        if (requestParameters.type !== undefined && requestParameters.type !== null) {
            queryParameters['type'] = requestParameters.type;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/inbody-integration`,
            action: 'facilityInBodyIntegration:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a facility InBody integration
     */
    async facilityInBodyIntegrationDelete(requestParameters: FacilityInBodyIntegrationDeleteRequest): Promise<void> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/inbody-integration`,
            action: 'facilityInBodyIntegration:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show a facility InBody integration settings
     */
    async facilityInBodyIntegrationShow(requestParameters: FacilityInBodyIntegrationShowRequest): Promise<FacilityInBodyIntegrationResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/inbody-integration`,
            action: 'facilityInBodyIntegration:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * End a user session from a facility kiosk using an eChip Id
     */
    async facilityKioskSessionEndEchip(requestParameters: FacilityKioskSessionEndEchipRequest): Promise<KioskSessionResponse> {
        if (requestParameters.echipData === null || requestParameters.echipData === undefined) {            
            throw new runtime.RequiredError('echipData','Required parameter requestParameters.echipData was null or undefined when calling facilityKioskSessionEndEchip.');
        }
        
        if (requestParameters.echipId === null || requestParameters.echipId === undefined) {            
            throw new runtime.RequiredError('echipId','Required parameter requestParameters.echipId was null or undefined when calling facilityKioskSessionEndEchip.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipData !== undefined && requestParameters.echipData !== null) {
            queryParameters['echipData'] = requestParameters.echipData;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            pathParameters['echipId'] = requestParameters.echipId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/kiosk/session/end-echip/{echipId}`.replace(`{${"echipId"}}`, encodeURIComponent(String(requestParameters.echipId))),
            action: 'facilityKiosk:sessionEndEchip',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user session from a facility kiosk using an eChip Id
     */
    async facilityKioskSessionUpdateEchip(requestParameters: FacilityKioskSessionUpdateEchipRequest): Promise<KioskSessionResponse> {
        if (requestParameters.echipData === null || requestParameters.echipData === undefined) {            
            throw new runtime.RequiredError('echipData','Required parameter requestParameters.echipData was null or undefined when calling facilityKioskSessionUpdateEchip.');
        }
        
        if (requestParameters.echipId === null || requestParameters.echipId === undefined) {            
            throw new runtime.RequiredError('echipId','Required parameter requestParameters.echipId was null or undefined when calling facilityKioskSessionUpdateEchip.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipData !== undefined && requestParameters.echipData !== null) {
            queryParameters['echipData'] = requestParameters.echipData;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            pathParameters['echipId'] = requestParameters.echipId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/kiosk/session/update-echip/{echipId}`.replace(`{${"echipId"}}`, encodeURIComponent(String(requestParameters.echipId))),
            action: 'facilityKiosk:sessionUpdateEchip',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Check validity of a kiosk token
     */
    async facilityKioskTokenCheck(requestParameters: FacilityKioskTokenCheckRequest): Promise<void> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/kiosk/token/check`,
            action: 'facilityKioskToken:check',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Create a kiosk token for a facility
     */
    async facilityKioskTokenCreate(requestParameters: FacilityKioskTokenCreateRequest): Promise<FacilityKioskTokenResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/kiosk/token`,
            action: 'facilityKioskToken:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a kiosk token for a facility
     */
    async facilityKioskTokenDelete(requestParameters: FacilityKioskTokenDeleteRequest): Promise<void> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/kiosk/token`,
            action: 'facilityKioskToken:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Use a kiosk token to log in a facility user
     */
    async facilityKioskUserLogin(requestParameters: FacilityKioskUserLoginRequest): Promise<FacilityUserResponse> {
        if (requestParameters.primaryIdentification === null || requestParameters.primaryIdentification === undefined) {            
            throw new runtime.RequiredError('primaryIdentification','Required parameter requestParameters.primaryIdentification was null or undefined when calling facilityKioskUserLogin.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.primaryIdentification !== undefined && requestParameters.primaryIdentification !== null) {
            queryParameters['primaryIdentification'] = requestParameters.primaryIdentification;
        }

        
        if (requestParameters.secondaryIdentification !== undefined && requestParameters.secondaryIdentification !== null) {
            queryParameters['secondaryIdentification'] = requestParameters.secondaryIdentification;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/kiosk/user-login`,
            action: 'facilityKiosk:userLogin',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List facility licenses
     */
    async facilityLicenseList(requestParameters: FacilityLicenseListRequest): Promise<FacilityLicenseListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.accountId !== undefined && requestParameters.accountId !== null) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.key !== undefined && requestParameters.key !== null) {
            queryParameters['key'] = requestParameters.key;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.type !== undefined && requestParameters.type !== null) {
            queryParameters['type'] = requestParameters.type;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/license/list`,
            action: 'facilityLicense:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility license
     */
    async facilityLicenseShow(requestParameters: FacilityLicenseShowRequest): Promise<FacilityLicenseResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityLicenseShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/license`,
            action: 'facilityLicense:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List facilities
     */
    async facilityList(requestParameters: FacilityListRequest): Promise<FacilityListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.address !== undefined && requestParameters.address !== null) {
            queryParameters['address'] = requestParameters.address;
        }

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.city !== undefined && requestParameters.city !== null) {
            queryParameters['city'] = requestParameters.city;
        }

        
        if (requestParameters.country !== undefined && requestParameters.country !== null) {
            queryParameters['country'] = requestParameters.country;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.page !== undefined && requestParameters.page !== null) {
            queryParameters['page'] = requestParameters.page;
        }

        
        if (requestParameters.phone !== undefined && requestParameters.phone !== null) {
            queryParameters['phone'] = requestParameters.phone;
        }

        
        if (requestParameters.postcode !== undefined && requestParameters.postcode !== null) {
            queryParameters['postcode'] = requestParameters.postcode;
        }

        
        if (requestParameters.quantity !== undefined && requestParameters.quantity !== null) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.state !== undefined && requestParameters.state !== null) {
            queryParameters['state'] = requestParameters.state;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/list`,
            action: 'facility:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show facility profile
     */
    async facilityProfileShow(requestParameters: FacilityProfileShowRequest): Promise<FacilityProfileResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/profile`,
            action: 'facilityProfile:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility profile
     */
    async facilityProfileUpdate(requestParameters: FacilityProfileUpdateRequest): Promise<FacilityProfileResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling facilityProfileUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.address !== undefined && requestParameters.address !== null) {
            queryParameters['address'] = requestParameters.address;
        }

        
        if (requestParameters.city !== undefined && requestParameters.city !== null) {
            queryParameters['city'] = requestParameters.city;
        }

        
        if (requestParameters.country !== undefined && requestParameters.country !== null) {
            queryParameters['country'] = requestParameters.country;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.phone !== undefined && requestParameters.phone !== null) {
            queryParameters['phone'] = requestParameters.phone;
        }

        
        if (requestParameters.postcode !== undefined && requestParameters.postcode !== null) {
            queryParameters['postcode'] = requestParameters.postcode;
        }

        
        if (requestParameters.state !== undefined && requestParameters.state !== null) {
            queryParameters['state'] = requestParameters.state;
        }

        
        if (requestParameters.website !== undefined && requestParameters.website !== null) {
            queryParameters['website'] = requestParameters.website;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/profile`,
            action: 'facilityProfile:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user with a facility relationship
     */
    async facilityRelationshipFacilityCreate(requestParameters: FacilityRelationshipFacilityCreateRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling facilityRelationshipFacilityCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.birthday !== undefined && requestParameters.birthday !== null) {
            queryParameters['birthday'] = (requestParameters.birthday as any).toISOString();
        }

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.employeeRole !== undefined && requestParameters.employeeRole !== null) {
            queryParameters['employeeRole'] = requestParameters.employeeRole;
        }

        
        if (requestParameters.gender !== undefined && requestParameters.gender !== null) {
            queryParameters['gender'] = requestParameters.gender;
        }

        
        if (requestParameters.language !== undefined && requestParameters.language !== null) {
            queryParameters['language'] = requestParameters.language;
        }

        
        if (requestParameters.member !== undefined && requestParameters.member !== null) {
            queryParameters['member'] = requestParameters.member;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.memberSecret !== undefined && requestParameters.memberSecret !== null) {
            queryParameters['memberSecret'] = requestParameters.memberSecret;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.units !== undefined && requestParameters.units !== null) {
            queryParameters['units'] = requestParameters.units;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship`,
            action: 'facilityRelationship:facilityCreate',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a facility\'s user relationship
     */
    async facilityRelationshipFacilityDelete(requestParameters: FacilityRelationshipFacilityDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipFacilityDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityRelationship:facilityDelete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a facility\'s user relationships
     */
    async facilityRelationshipFacilityList(requestParameters: FacilityRelationshipFacilityListRequest): Promise<FacilityUserRelationshipListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.employee !== undefined && requestParameters.employee !== null) {
            queryParameters['employee'] = requestParameters.employee;
        }

        
        if (requestParameters.employeeRole !== undefined && requestParameters.employeeRole !== null) {
            queryParameters['employeeRole'] = requestParameters.employeeRole;
        }

        
        if (requestParameters.includeSession !== undefined && requestParameters.includeSession !== null) {
            queryParameters['includeSession'] = requestParameters.includeSession;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.member !== undefined && requestParameters.member !== null) {
            queryParameters['member'] = requestParameters.member;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship/list`,
            action: 'facilityRelationship:facilityList',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility\'s user relationship
     */
    async facilityRelationshipFacilityShow(requestParameters: FacilityRelationshipFacilityShowRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipFacilityShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship`,
            action: 'facilityRelationship:facilityShow',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to facility relationship
     */
    async facilityRelationshipFacilitySubscribe(requestParameters: FacilityRelationshipFacilitySubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityRelationship/facilitySubscribe`,
            action: 'facilityRelationship:facilitySubscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility\'s user relationship
     */
    async facilityRelationshipFacilityUpdate(requestParameters: FacilityRelationshipFacilityUpdateRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipFacilityUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.employeeRole !== undefined && requestParameters.employeeRole !== null) {
            queryParameters['employeeRole'] = requestParameters.employeeRole;
        }

        
        if (requestParameters.member !== undefined && requestParameters.member !== null) {
            queryParameters['member'] = requestParameters.member;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityRelationship:facilityUpdate',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a facility relationship request (Facility to User)
     */
    async facilityRelationshipRequestFacilityCreate(requestParameters: FacilityRelationshipRequestFacilityCreateRequest): Promise<FacilityRelationshipRequestResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.employeeRole !== undefined && requestParameters.employeeRole !== null) {
            queryParameters['employeeRole'] = requestParameters.employeeRole;
        }

        
        if (requestParameters.member !== undefined && requestParameters.member !== null) {
            queryParameters['member'] = requestParameters.member;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship-request`,
            action: 'facilityRelationshipRequest:facilityCreate',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List facility relationship requests (User to Facility)
     */
    async facilityRelationshipRequestFacilityList(requestParameters: FacilityRelationshipRequestFacilityListRequest): Promise<FacilityRelationshipRequestListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship-request/list`,
            action: 'facilityRelationshipRequest:facilityList',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility relationship request (User to Facility)
     */
    async facilityRelationshipRequestFacilityShow(requestParameters: FacilityRelationshipRequestFacilityShowRequest): Promise<FacilityRelationshipRequestResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipRequestFacilityShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship-request`,
            action: 'facilityRelationshipRequest:facilityShow',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to facility relationship request
     */
    async facilityRelationshipRequestFacilitySubscribe(requestParameters: FacilityRelationshipRequestFacilitySubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityRelationshipRequest/facilitySubscribe`,
            action: 'facilityRelationshipRequest:facilitySubscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility relationship request (User to Facility)
     */
    async facilityRelationshipRequestFacilityUpdate(requestParameters: FacilityRelationshipRequestFacilityUpdateRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.approval === null || requestParameters.approval === undefined) {            
            throw new runtime.RequiredError('approval','Required parameter requestParameters.approval was null or undefined when calling facilityRelationshipRequestFacilityUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipRequestFacilityUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.approval !== undefined && requestParameters.approval !== null) {
            queryParameters['approval'] = requestParameters.approval;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/relationship-request/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityRelationshipRequest:facilityUpdate',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a facility relationship request (User to Facility)
     */
    async facilityRelationshipRequestUserCreate(requestParameters: FacilityRelationshipRequestUserCreateRequest): Promise<FacilityRelationshipRequestResponse> {
        if (requestParameters.facilityId === null || requestParameters.facilityId === undefined) {            
            throw new runtime.RequiredError('facilityId','Required parameter requestParameters.facilityId was null or undefined when calling facilityRelationshipRequestUserCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.facilityId !== undefined && requestParameters.facilityId !== null) {
            queryParameters['facilityId'] = requestParameters.facilityId;
        }

        
        if (requestParameters.memberIdentifier !== undefined && requestParameters.memberIdentifier !== null) {
            queryParameters['memberIdentifier'] = requestParameters.memberIdentifier;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship-request`,
            action: 'facilityRelationshipRequest:userCreate',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List facility relationship requests (Facility to User)
     */
    async facilityRelationshipRequestUserList(requestParameters: FacilityRelationshipRequestUserListRequest): Promise<PrivilegedFacilityRelationshipRequestListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.facilityId !== undefined && requestParameters.facilityId !== null) {
            queryParameters['facilityId'] = requestParameters.facilityId;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship-request/list`,
            action: 'facilityRelationshipRequest:userList',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility relationship request (Facility to User)
     */
    async facilityRelationshipRequestUserShow(requestParameters: FacilityRelationshipRequestUserShowRequest): Promise<FacilityRelationshipRequestResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipRequestUserShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship-request`,
            action: 'facilityRelationshipRequest:userShow',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to facility relationship request
     */
    async facilityRelationshipRequestUserSubscribe(requestParameters: FacilityRelationshipRequestUserSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityRelationshipRequest/userSubscribe`,
            action: 'facilityRelationshipRequest:userSubscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility relationship request (Facility to User)
     */
    async facilityRelationshipRequestUserUpdate(requestParameters: FacilityRelationshipRequestUserUpdateRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.approval === null || requestParameters.approval === undefined) {            
            throw new runtime.RequiredError('approval','Required parameter requestParameters.approval was null or undefined when calling facilityRelationshipRequestUserUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipRequestUserUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.approval !== undefined && requestParameters.approval !== null) {
            queryParameters['approval'] = requestParameters.approval;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship-request/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityRelationshipRequest:userUpdate',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s facility relationship
     */
    async facilityRelationshipUserDelete(requestParameters: FacilityRelationshipUserDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipUserDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityRelationship:userDelete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s facility relationships
     */
    async facilityRelationshipUserList(requestParameters: FacilityRelationshipUserListRequest): Promise<UserFacilityRelationshipListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.employee !== undefined && requestParameters.employee !== null) {
            queryParameters['employee'] = requestParameters.employee;
        }

        
        if (requestParameters.employeeRole !== undefined && requestParameters.employeeRole !== null) {
            queryParameters['employeeRole'] = requestParameters.employeeRole;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.member !== undefined && requestParameters.member !== null) {
            queryParameters['member'] = requestParameters.member;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship/list`,
            action: 'facilityRelationship:userList',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s facility relationship
     */
    async facilityRelationshipUserShow(requestParameters: FacilityRelationshipUserShowRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipUserShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship`,
            action: 'facilityRelationship:userShow',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to facility relationship
     */
    async facilityRelationshipUserSubscribe(requestParameters: FacilityRelationshipUserSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityRelationship/userSubscribe`,
            action: 'facilityRelationship:userSubscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user\'s facility relationship
     */
    async facilityRelationshipUserUpdate(requestParameters: FacilityRelationshipUserUpdateRequest): Promise<FacilityRelationshipResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityRelationshipUserUpdate.');
        }
        
        if (requestParameters.memberSecret === null || requestParameters.memberSecret === undefined) {            
            throw new runtime.RequiredError('memberSecret','Required parameter requestParameters.memberSecret was null or undefined when calling facilityRelationshipUserUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.memberSecret !== undefined && requestParameters.memberSecret !== null) {
            queryParameters['memberSecret'] = requestParameters.memberSecret;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/facility/relationship/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityRelationship:userUpdate',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Counts the number of days a member recorded one strength machine data set.
     */
    async facilityReportCheckIn(requestParameters: FacilityReportCheckInRequest): Promise<void> {
        if (requestParameters.from === null || requestParameters.from === undefined) {            
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling facilityReportCheckIn.');
        }
        
        if (requestParameters.group === null || requestParameters.group === undefined) {            
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling facilityReportCheckIn.');
        }
        
        if (requestParameters.to === null || requestParameters.to === undefined) {            
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling facilityReportCheckIn.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.group !== undefined && requestParameters.group !== null) {
            queryParameters['group'] = requestParameters.group;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/report/check-in`,
            action: 'facilityReport:checkIn',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Check if eChip ID already assigned to active session
     */
    async facilitySessionCheckEchip(requestParameters: FacilitySessionCheckEchipRequest): Promise<SessionResponse> {
        if (requestParameters.echipId === null || requestParameters.echipId === undefined) {            
            throw new runtime.RequiredError('echipId','Required parameter requestParameters.echipId was null or undefined when calling facilitySessionCheckEchip.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            queryParameters['echipId'] = requestParameters.echipId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/check-echip`,
            action: 'facilitySession:checkEchip',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a facility user\'s session
     */
    async facilitySessionDelete(requestParameters: FacilitySessionDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilitySessionDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilitySession:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * End a user session from a facility
     */
    async facilitySessionEnd(requestParameters: FacilitySessionEndRequest): Promise<SessionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipData !== undefined && requestParameters.echipData !== null) {
            queryParameters['echipData'] = requestParameters.echipData;
        }

        
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            queryParameters['echipId'] = requestParameters.echipId;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/end`,
            action: 'facilitySession:end',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List a facility\'s user sessions
     */
    async facilitySessionList(requestParameters: FacilitySessionListRequest): Promise<FacilitySessionListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.open !== undefined && requestParameters.open !== null) {
            queryParameters['open'] = requestParameters.open;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/list`,
            action: 'facilitySession:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility user\'s session
     */
    async facilitySessionShow(requestParameters: FacilitySessionShowRequest): Promise<SessionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            queryParameters['echipId'] = requestParameters.echipId;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session`,
            action: 'facilitySession:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Start a user session from a facility
     */
    async facilitySessionStart(requestParameters: FacilitySessionStartRequest): Promise<SessionStartResponse> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling facilitySessionStart.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.continueFromLastSet !== undefined && requestParameters.continueFromLastSet !== null) {
            queryParameters['continueFromLastSet'] = requestParameters.continueFromLastSet;
        }

        
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            queryParameters['echipId'] = requestParameters.echipId;
        }

        
        if (requestParameters.forceEndPrevious !== undefined && requestParameters.forceEndPrevious !== null) {
            queryParameters['forceEndPrevious'] = requestParameters.forceEndPrevious;
        }

        
        if (requestParameters.sessionPlanSequenceAssignmentId !== undefined && requestParameters.sessionPlanSequenceAssignmentId !== null) {
            queryParameters['sessionPlanSequenceAssignmentId'] = requestParameters.sessionPlanSequenceAssignmentId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'facilitySession:start',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Retrieves a user\'s session status for a facility
     */
    async facilitySessionStatus(requestParameters: FacilitySessionStatusRequest): Promise<FacilitySessionListResponse> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling facilitySessionStatus.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/{userId}/status`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'facilitySession:status',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to a facilities\'s session
     */
    async facilitySessionSubscribe(requestParameters: FacilitySessionSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilitySession/subscribe`,
            action: 'facilitySession:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user session from a facility using an eChip Id
     */
    async facilitySessionUpdate(requestParameters: FacilitySessionUpdateRequest): Promise<SessionResponse> {
        if (requestParameters.echipData === null || requestParameters.echipData === undefined) {            
            throw new runtime.RequiredError('echipData','Required parameter requestParameters.echipData was null or undefined when calling facilitySessionUpdate.');
        }
        
        if (requestParameters.echipId === null || requestParameters.echipId === undefined) {            
            throw new runtime.RequiredError('echipId','Required parameter requestParameters.echipId was null or undefined when calling facilitySessionUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipData !== undefined && requestParameters.echipData !== null) {
            queryParameters['echipData'] = requestParameters.echipData;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.echipId !== undefined && requestParameters.echipId !== null) {
            pathParameters['echipId'] = requestParameters.echipId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/session/{echipId}`.replace(`{${"echipId"}}`, encodeURIComponent(String(requestParameters.echipId))),
            action: 'facilitySession:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility
     */
    async facilityShow(requestParameters: FacilityShowRequest): Promise<FacilityResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility`,
            action: 'facility:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility strength machine default configuration
     */
    async facilityStrengthMachineConfigurationShow(requestParameters: FacilityStrengthMachineConfigurationShowRequest): Promise<FacilityStrengthMachineConfigurationResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/configuration`,
            action: 'facilityStrengthMachineConfiguration:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to facility strength machine configuration
     */
    async facilityStrengthMachineConfigurationSubscribe(requestParameters: FacilityStrengthMachineConfigurationSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityStrengthMachineConfiguration/subscribe`,
            action: 'facilityStrengthMachineConfiguration:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility strength machine configuration
     */
    async facilityStrengthMachineConfigurationUpdate(requestParameters: FacilityStrengthMachineConfigurationUpdateRequest): Promise<FacilityStrengthMachineConfigurationResponse> {
        if (requestParameters.appType === null || requestParameters.appType === undefined) {            
            throw new runtime.RequiredError('appType','Required parameter requestParameters.appType was null or undefined when calling facilityStrengthMachineConfigurationUpdate.');
        }
        
        if (requestParameters.forceUnit === null || requestParameters.forceUnit === undefined) {            
            throw new runtime.RequiredError('forceUnit','Required parameter requestParameters.forceUnit was null or undefined when calling facilityStrengthMachineConfigurationUpdate.');
        }
        
        if (requestParameters.locale === null || requestParameters.locale === undefined) {            
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling facilityStrengthMachineConfigurationUpdate.');
        }
        
        if (requestParameters.primaryFocus === null || requestParameters.primaryFocus === undefined) {            
            throw new runtime.RequiredError('primaryFocus','Required parameter requestParameters.primaryFocus was null or undefined when calling facilityStrengthMachineConfigurationUpdate.');
        }
        
        if (requestParameters.secondaryFocus === null || requestParameters.secondaryFocus === undefined) {            
            throw new runtime.RequiredError('secondaryFocus','Required parameter requestParameters.secondaryFocus was null or undefined when calling facilityStrengthMachineConfigurationUpdate.');
        }
        
        if (requestParameters.timeZone === null || requestParameters.timeZone === undefined) {            
            throw new runtime.RequiredError('timeZone','Required parameter requestParameters.timeZone was null or undefined when calling facilityStrengthMachineConfigurationUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.appType !== undefined && requestParameters.appType !== null) {
            queryParameters['appType'] = requestParameters.appType;
        }

        
        if (requestParameters.forceUnit !== undefined && requestParameters.forceUnit !== null) {
            queryParameters['forceUnit'] = requestParameters.forceUnit;
        }

        
        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            queryParameters['locale'] = requestParameters.locale;
        }

        
        if (requestParameters.primaryFocus !== undefined && requestParameters.primaryFocus !== null) {
            queryParameters['primaryFocus'] = requestParameters.primaryFocus;
        }

        
        if (requestParameters.secondaryFocus !== undefined && requestParameters.secondaryFocus !== null) {
            queryParameters['secondaryFocus'] = requestParameters.secondaryFocus;
        }

        
        if (requestParameters.timeZone !== undefined && requestParameters.timeZone !== null) {
            queryParameters['timeZone'] = requestParameters.timeZone;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/configuration`,
            action: 'facilityStrengthMachineConfiguration:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Creates facility strength machines using eChip data
     */
    async facilityStrengthMachineCreateEchip(requestParameters: FacilityStrengthMachineCreateEchipRequest): Promise<FacilityStrengthMachineBulkCreateResponse> {
        if (requestParameters.echipData === null || requestParameters.echipData === undefined) {            
            throw new runtime.RequiredError('echipData','Required parameter requestParameters.echipData was null or undefined when calling facilityStrengthMachineCreateEchip.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.echipData !== undefined && requestParameters.echipData !== null) {
            queryParameters['echipData'] = requestParameters.echipData;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/echip`,
            action: 'facilityStrengthMachine:createEchip',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a facility strength machine
     */
    async facilityStrengthMachineDelete(requestParameters: FacilityStrengthMachineDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityStrengthMachineDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityStrengthMachine:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show facility strength machine initializer token
     */
    async facilityStrengthMachineInitializerOTP(requestParameters: FacilityStrengthMachineInitializerOTPRequest): Promise<FacilityStrengthMachineInitializerOTPTokenResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/initializer-otp`,
            action: 'facilityStrengthMachine:initializerOTP',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show facility strength machine initializer token
     */
    async facilityStrengthMachineInitializerToken(requestParameters: FacilityStrengthMachineInitializerTokenRequest): Promise<FacilityStrengthMachineInitializerTokenResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/initializer-token`,
            action: 'facilityStrengthMachine:initializerToken',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List facility strength machines
     */
    async facilityStrengthMachineList(requestParameters: FacilityStrengthMachineListRequest): Promise<FacilityStrengthMachineListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/list`,
            action: 'facilityStrengthMachine:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a maintenance record for facility strength machine
     */
    async facilityStrengthMachineMaintenanceRecordCreate(requestParameters: FacilityStrengthMachineMaintenanceRecordCreateRequest): Promise<FacilityStrengthMachineMaintenanceRecordResponse> {
        if (requestParameters.facilityStrengthMachineId === null || requestParameters.facilityStrengthMachineId === undefined) {            
            throw new runtime.RequiredError('facilityStrengthMachineId','Required parameter requestParameters.facilityStrengthMachineId was null or undefined when calling facilityStrengthMachineMaintenanceRecordCreate.');
        }
        
        if (requestParameters.log === null || requestParameters.log === undefined) {            
            throw new runtime.RequiredError('log','Required parameter requestParameters.log was null or undefined when calling facilityStrengthMachineMaintenanceRecordCreate.');
        }
        
        if (requestParameters.takenAt === null || requestParameters.takenAt === undefined) {            
            throw new runtime.RequiredError('takenAt','Required parameter requestParameters.takenAt was null or undefined when calling facilityStrengthMachineMaintenanceRecordCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.facilityStrengthMachineId !== undefined && requestParameters.facilityStrengthMachineId !== null) {
            queryParameters['facilityStrengthMachineId'] = requestParameters.facilityStrengthMachineId;
        }

        
        if (requestParameters.log !== undefined && requestParameters.log !== null) {
            queryParameters['log'] = requestParameters.log;
        }

        
        if (requestParameters.takenAt !== undefined && requestParameters.takenAt !== null) {
            queryParameters['takenAt'] = (requestParameters.takenAt as any).toISOString();
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/maintenance-record`,
            action: 'facilityStrengthMachineMaintenanceRecord:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a maintenance record for facility strength machine
     */
    async facilityStrengthMachineMaintenanceRecordDelete(requestParameters: FacilityStrengthMachineMaintenanceRecordDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityStrengthMachineMaintenanceRecordDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/maintenance-record/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityStrengthMachineMaintenanceRecord:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List maintenance records for facility strength machines
     */
    async facilityStrengthMachineMaintenanceRecordList(requestParameters: FacilityStrengthMachineMaintenanceRecordListRequest): Promise<FacilityStrengthMachineMaintenanceRecordListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.facilityStrengthMachineId !== undefined && requestParameters.facilityStrengthMachineId !== null) {
            queryParameters['facilityStrengthMachineId'] = requestParameters.facilityStrengthMachineId;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.log !== undefined && requestParameters.log !== null) {
            queryParameters['log'] = requestParameters.log;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/maintenance-record/list`,
            action: 'facilityStrengthMachineMaintenanceRecord:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a maintenance record by for facility strength machine
     */
    async facilityStrengthMachineMaintenanceRecordShow(requestParameters: FacilityStrengthMachineMaintenanceRecordShowRequest): Promise<FacilityStrengthMachineMaintenanceRecordResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityStrengthMachineMaintenanceRecordShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/maintenance-record`,
            action: 'facilityStrengthMachineMaintenanceRecord:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a facility strength machine
     */
    async facilityStrengthMachineShow(requestParameters: FacilityStrengthMachineShowRequest): Promise<FacilityStrengthMachineResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityStrengthMachineShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine`,
            action: 'facilityStrengthMachine:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to facility strength machine
     */
    async facilityStrengthMachineSubscribe(requestParameters: FacilityStrengthMachineSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilityStrengthMachine/subscribe`,
            action: 'facilityStrengthMachine:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a facility strength machine
     */
    async facilityStrengthMachineUpdate(requestParameters: FacilityStrengthMachineUpdateRequest): Promise<FacilityStrengthMachineResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityStrengthMachineUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.location !== undefined && requestParameters.location !== null) {
            queryParameters['location'] = requestParameters.location;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'facilityStrengthMachine:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List facility strength machine utilization instances
     */
    async facilityStrengthMachineUtilizationInstanceList(requestParameters: FacilityStrengthMachineUtilizationInstanceListRequest): Promise<FacilityStrengthMachineUtilizationInstanceListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.facilityStrengthMachineId !== undefined && requestParameters.facilityStrengthMachineId !== null) {
            queryParameters['facilityStrengthMachineId'] = requestParameters.facilityStrengthMachineId;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/utilization-instance/list`,
            action: 'facilityStrengthMachineUtilizationInstance:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show facility strength machine utilization instance
     */
    async facilityStrengthMachineUtilizationInstanceShow(requestParameters: FacilityStrengthMachineUtilizationInstanceShowRequest): Promise<FacilityStrengthMachineUtilizationInstanceResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilityStrengthMachineUtilizationInstanceShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/strength-machine/utilization-instance`,
            action: 'facilityStrengthMachineUtilizationInstance:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to a facility
     */
    async facilitySubscribe(requestParameters: FacilitySubscribeRequest): Promise<SubscriptionResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling facilitySubscribe.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/subscribe`,
            action: 'facility:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user heart rate data set
     */
    async heartRateDataSetCreate(requestParameters: HeartRateDataSetCreateRequest): Promise<HeartRateDataSetResponse> {
        if (requestParameters.heartRateDataPoints === null || requestParameters.heartRateDataPoints === undefined) {            
            throw new runtime.RequiredError('heartRateDataPoints','Required parameter requestParameters.heartRateDataPoints was null or undefined when calling heartRateDataSetCreate.');
        }
        
        if (requestParameters.source === null || requestParameters.source === undefined) {            
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling heartRateDataSetCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.autoAttachSession !== undefined && requestParameters.autoAttachSession !== null) {
            queryParameters['autoAttachSession'] = requestParameters.autoAttachSession;
        }

        
        if (requestParameters.heartRateDataPoints !== undefined && requestParameters.heartRateDataPoints !== null) {
            queryParameters['heartRateDataPoints'] = requestParameters.heartRateDataPoints;
        }

        
        if (requestParameters.sessionId !== undefined && requestParameters.sessionId !== null) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/heart-rate-data-set`,
            action: 'heartRateDataSet:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s heart rate data set
     */
    async heartRateDataSetDelete(requestParameters: HeartRateDataSetDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling heartRateDataSetDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/heart-rate-data-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'heartRateDataSet:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s heart rate data sets
     */
    async heartRateDataSetList(requestParameters: HeartRateDataSetListRequest): Promise<HeartRateDataSetListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/heart-rate-data-set/list`,
            action: 'heartRateDataSet:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s heart rate data set
     */
    async heartRateDataSetShow(requestParameters: HeartRateDataSetShowRequest): Promise<HeartRateDataSetResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.graph !== undefined && requestParameters.graph !== null) {
            queryParameters['graph'] = requestParameters.graph;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/heart-rate-data-set`,
            action: 'heartRateDataSet:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to heart rate data set changes
     */
    async heartRateDataSetSubscribe(requestParameters: HeartRateDataSetSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/heartRateDataSet/subscribe`,
            action: 'heartRateDataSet:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user\'s heart rate data set
     */
    async heartRateDataSetUpdate(requestParameters: HeartRateDataSetUpdateRequest): Promise<HeartRateDataSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling heartRateDataSetUpdate.');
        }
        
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {            
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling heartRateDataSetUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.sessionId !== undefined && requestParameters.sessionId !== null) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/heart-rate-data-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'heartRateDataSet:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user height measurement
     */
    async heightMeasurementCreate(requestParameters: HeightMeasurementCreateRequest): Promise<HeightMeasurementResponse> {
        if (requestParameters.metricHeight === null || requestParameters.metricHeight === undefined) {            
            throw new runtime.RequiredError('metricHeight','Required parameter requestParameters.metricHeight was null or undefined when calling heightMeasurementCreate.');
        }
        
        if (requestParameters.source === null || requestParameters.source === undefined) {            
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling heightMeasurementCreate.');
        }
        
        if (requestParameters.takenAt === null || requestParameters.takenAt === undefined) {            
            throw new runtime.RequiredError('takenAt','Required parameter requestParameters.takenAt was null or undefined when calling heightMeasurementCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.metricHeight !== undefined && requestParameters.metricHeight !== null) {
            queryParameters['metricHeight'] = requestParameters.metricHeight;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.takenAt !== undefined && requestParameters.takenAt !== null) {
            queryParameters['takenAt'] = (requestParameters.takenAt as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/height-measurement`,
            action: 'heightMeasurement:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s height measurement
     */
    async heightMeasurementDelete(requestParameters: HeightMeasurementDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling heightMeasurementDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/height-measurement/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'heightMeasurement:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s height measurements
     */
    async heightMeasurementList(requestParameters: HeightMeasurementListRequest): Promise<HeightMeasurementListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/height-measurement/list`,
            action: 'heightMeasurement:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s height measurement
     */
    async heightMeasurementShow(requestParameters: HeightMeasurementShowRequest): Promise<HeightMeasurementResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/height-measurement`,
            action: 'heightMeasurement:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to user\'s height measurements
     */
    async heightMeasurementSubscribe(requestParameters: HeightMeasurementSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/heightMeasurement/subscribe`,
            action: 'heightMeasurement:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 2
     * Create a user session using M Series app data
     */
    async mSeriesAppSessionCreate(requestParameters: MSeriesAppSessionCreateRequest): Promise<MSeriesAppSessionResponse> {
        if (requestParameters.averageCadence === null || requestParameters.averageCadence === undefined) {            
            throw new runtime.RequiredError('averageCadence','Required parameter requestParameters.averageCadence was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.averagePower === null || requestParameters.averagePower === undefined) {            
            throw new runtime.RequiredError('averagePower','Required parameter requestParameters.averagePower was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.averageWattsPerKilogram === null || requestParameters.averageWattsPerKilogram === undefined) {            
            throw new runtime.RequiredError('averageWattsPerKilogram','Required parameter requestParameters.averageWattsPerKilogram was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.broadcastData === null || requestParameters.broadcastData === undefined) {            
            throw new runtime.RequiredError('broadcastData','Required parameter requestParameters.broadcastData was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.buildMajor === null || requestParameters.buildMajor === undefined) {            
            throw new runtime.RequiredError('buildMajor','Required parameter requestParameters.buildMajor was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.buildMinor === null || requestParameters.buildMinor === undefined) {            
            throw new runtime.RequiredError('buildMinor','Required parameter requestParameters.buildMinor was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.caloricBurn === null || requestParameters.caloricBurn === undefined) {            
            throw new runtime.RequiredError('caloricBurn','Required parameter requestParameters.caloricBurn was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.cardioMachineId === null || requestParameters.cardioMachineId === undefined) {            
            throw new runtime.RequiredError('cardioMachineId','Required parameter requestParameters.cardioMachineId was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.distance === null || requestParameters.distance === undefined) {            
            throw new runtime.RequiredError('distance','Required parameter requestParameters.distance was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.duration === null || requestParameters.duration === undefined) {            
            throw new runtime.RequiredError('duration','Required parameter requestParameters.duration was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.endedAt === null || requestParameters.endedAt === undefined) {            
            throw new runtime.RequiredError('endedAt','Required parameter requestParameters.endedAt was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.energyOutput === null || requestParameters.energyOutput === undefined) {            
            throw new runtime.RequiredError('energyOutput','Required parameter requestParameters.energyOutput was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.maxCadence === null || requestParameters.maxCadence === undefined) {            
            throw new runtime.RequiredError('maxCadence','Required parameter requestParameters.maxCadence was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.maxPower === null || requestParameters.maxPower === undefined) {            
            throw new runtime.RequiredError('maxPower','Required parameter requestParameters.maxPower was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.maxWattsPerKilogram === null || requestParameters.maxWattsPerKilogram === undefined) {            
            throw new runtime.RequiredError('maxWattsPerKilogram','Required parameter requestParameters.maxWattsPerKilogram was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.metricHeight === null || requestParameters.metricHeight === undefined) {            
            throw new runtime.RequiredError('metricHeight','Required parameter requestParameters.metricHeight was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.metricWeight === null || requestParameters.metricWeight === undefined) {            
            throw new runtime.RequiredError('metricWeight','Required parameter requestParameters.metricWeight was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.ordinalId === null || requestParameters.ordinalId === undefined) {            
            throw new runtime.RequiredError('ordinalId','Required parameter requestParameters.ordinalId was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.source === null || requestParameters.source === undefined) {            
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        if (requestParameters.startedAt === null || requestParameters.startedAt === undefined) {            
            throw new runtime.RequiredError('startedAt','Required parameter requestParameters.startedAt was null or undefined when calling mSeriesAppSessionCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.averageCadence !== undefined && requestParameters.averageCadence !== null) {
            queryParameters['averageCadence'] = requestParameters.averageCadence;
        }

        
        if (requestParameters.averageMetabolicEquivalent !== undefined && requestParameters.averageMetabolicEquivalent !== null) {
            queryParameters['averageMetabolicEquivalent'] = requestParameters.averageMetabolicEquivalent;
        }

        
        if (requestParameters.averagePower !== undefined && requestParameters.averagePower !== null) {
            queryParameters['averagePower'] = requestParameters.averagePower;
        }

        
        if (requestParameters.averageWattsPerKilogram !== undefined && requestParameters.averageWattsPerKilogram !== null) {
            queryParameters['averageWattsPerKilogram'] = requestParameters.averageWattsPerKilogram;
        }

        
        if (requestParameters.broadcastData !== undefined && requestParameters.broadcastData !== null) {
            queryParameters['broadcastData'] = requestParameters.broadcastData;
        }

        
        if (requestParameters.buildMajor !== undefined && requestParameters.buildMajor !== null) {
            queryParameters['buildMajor'] = requestParameters.buildMajor;
        }

        
        if (requestParameters.buildMinor !== undefined && requestParameters.buildMinor !== null) {
            queryParameters['buildMinor'] = requestParameters.buildMinor;
        }

        
        if (requestParameters.caloricBurn !== undefined && requestParameters.caloricBurn !== null) {
            queryParameters['caloricBurn'] = requestParameters.caloricBurn;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.distance !== undefined && requestParameters.distance !== null) {
            queryParameters['distance'] = requestParameters.distance;
        }

        
        if (requestParameters.duration !== undefined && requestParameters.duration !== null) {
            queryParameters['duration'] = requestParameters.duration;
        }

        
        if (requestParameters.endedAt !== undefined && requestParameters.endedAt !== null) {
            queryParameters['endedAt'] = (requestParameters.endedAt as any).toISOString();
        }

        
        if (requestParameters.energyOutput !== undefined && requestParameters.energyOutput !== null) {
            queryParameters['energyOutput'] = requestParameters.energyOutput;
        }

        
        if (requestParameters.maxCadence !== undefined && requestParameters.maxCadence !== null) {
            queryParameters['maxCadence'] = requestParameters.maxCadence;
        }

        
        if (requestParameters.maxPower !== undefined && requestParameters.maxPower !== null) {
            queryParameters['maxPower'] = requestParameters.maxPower;
        }

        
        if (requestParameters.maxWattsPerKilogram !== undefined && requestParameters.maxWattsPerKilogram !== null) {
            queryParameters['maxWattsPerKilogram'] = requestParameters.maxWattsPerKilogram;
        }

        
        if (requestParameters.metricHeight !== undefined && requestParameters.metricHeight !== null) {
            queryParameters['metricHeight'] = requestParameters.metricHeight;
        }

        
        if (requestParameters.metricWeight !== undefined && requestParameters.metricWeight !== null) {
            queryParameters['metricWeight'] = requestParameters.metricWeight;
        }

        
        if (requestParameters.ordinalId !== undefined && requestParameters.ordinalId !== null) {
            queryParameters['ordinalId'] = requestParameters.ordinalId;
        }

        
        if (requestParameters.segmentData !== undefined && requestParameters.segmentData !== null) {
            queryParameters['segmentData'] = requestParameters.segmentData;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.startedAt !== undefined && requestParameters.startedAt !== null) {
            queryParameters['startedAt'] = (requestParameters.startedAt as any).toISOString();
        }

        
        if (requestParameters.stepCount !== undefined && requestParameters.stepCount !== null) {
            queryParameters['stepCount'] = requestParameters.stepCount;
        }

        
        if (requestParameters.targetFtp !== undefined && requestParameters.targetFtp !== null) {
            queryParameters['targetFtp'] = requestParameters.targetFtp;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 2;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/app-session`,
            action: 'mSeriesAppSession:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s session
     */
    async mSeriesAppSessionDelete(requestParameters: MSeriesAppSessionDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesAppSessionDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/app-session/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesAppSession:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Export a user\'s session as a file
     */
    async mSeriesAppSessionExport(requestParameters: MSeriesAppSessionExportRequest): Promise<MSeriesAppSessionExportResponse> {
        if (requestParameters.format === null || requestParameters.format === undefined) {            
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling mSeriesAppSessionExport.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesAppSessionExport.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.format !== undefined && requestParameters.format !== null) {
            pathParameters['format'] = requestParameters.format;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/app-session/export/{id}/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesAppSession:export',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Export a user\'s session as a flat file
     */
    async mSeriesAppSessionExportFlat(requestParameters: MSeriesAppSessionExportFlatRequest): Promise<void> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {            
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling mSeriesAppSessionExportFlat.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.filename !== undefined && requestParameters.filename !== null) {
            pathParameters['filename'] = requestParameters.filename;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/app-session/export/{filename}`.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))),
            action: 'mSeriesAppSession:exportFlat',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s sessions generated using M Series app data
     */
    async mSeriesAppSessionList(requestParameters: MSeriesAppSessionListRequest): Promise<MSeriesAppSessionListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/app-session/list`,
            action: 'mSeriesAppSession:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 2
     * Show a user\'s session generated using M Series app data
     */
    async mSeriesAppSessionShow(requestParameters: MSeriesAppSessionShowRequest): Promise<MSeriesAppSessionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.graph !== undefined && requestParameters.graph !== null) {
            queryParameters['graph'] = requestParameters.graph;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 2;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/app-session`,
            action: 'mSeriesAppSession:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user mSeries Challenge
     */
    async mSeriesChallengeCreate(requestParameters: MSeriesChallengeCreateRequest): Promise<MSeriesChallengeResponse> {
        if (requestParameters.challengeType === null || requestParameters.challengeType === undefined) {            
            throw new runtime.RequiredError('challengeType','Required parameter requestParameters.challengeType was null or undefined when calling mSeriesChallengeCreate.');
        }
        
        if (requestParameters.focus === null || requestParameters.focus === undefined) {            
            throw new runtime.RequiredError('focus','Required parameter requestParameters.focus was null or undefined when calling mSeriesChallengeCreate.');
        }
        
        if (requestParameters.isPublic === null || requestParameters.isPublic === undefined) {            
            throw new runtime.RequiredError('isPublic','Required parameter requestParameters.isPublic was null or undefined when calling mSeriesChallengeCreate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling mSeriesChallengeCreate.');
        }
        
        if (requestParameters.userLimit === null || requestParameters.userLimit === undefined) {            
            throw new runtime.RequiredError('userLimit','Required parameter requestParameters.userLimit was null or undefined when calling mSeriesChallengeCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.challengeType !== undefined && requestParameters.challengeType !== null) {
            queryParameters['challengeType'] = requestParameters.challengeType;
        }

        
        if (requestParameters.endAt !== undefined && requestParameters.endAt !== null) {
            queryParameters['endAt'] = (requestParameters.endAt as any).toISOString();
        }

        
        if (requestParameters.focus !== undefined && requestParameters.focus !== null) {
            queryParameters['focus'] = requestParameters.focus;
        }

        
        if (requestParameters.goal !== undefined && requestParameters.goal !== null) {
            queryParameters['goal'] = requestParameters.goal;
        }

        
        if (requestParameters.isPublic !== undefined && requestParameters.isPublic !== null) {
            queryParameters['isPublic'] = requestParameters.isPublic;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.startAt !== undefined && requestParameters.startAt !== null) {
            queryParameters['startAt'] = (requestParameters.startAt as any).toISOString();
        }

        
        if (requestParameters.userLimit !== undefined && requestParameters.userLimit !== null) {
            queryParameters['userLimit'] = requestParameters.userLimit;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge`,
            action: 'mSeriesChallenge:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s owned mSeries Challenge
     */
    async mSeriesChallengeDelete(requestParameters: MSeriesChallengeDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesChallengeDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesChallenge:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s owned or joined mSeries Challenges
     */
    async mSeriesChallengeList(requestParameters: MSeriesChallengeListRequest): Promise<MSeriesChallengeListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.isCompleted !== undefined && requestParameters.isCompleted !== null) {
            queryParameters['isCompleted'] = requestParameters.isCompleted;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.relationship !== undefined && requestParameters.relationship !== null) {
            queryParameters['relationship'] = requestParameters.relationship;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/list`,
            action: 'mSeriesChallenge:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Join Challenge
     */
    async mSeriesChallengeParticipantCreate(requestParameters: MSeriesChallengeParticipantCreateRequest): Promise<MSeriesChallengeParticipantResponse> {
        if (requestParameters.joinCode === null || requestParameters.joinCode === undefined) {            
            throw new runtime.RequiredError('joinCode','Required parameter requestParameters.joinCode was null or undefined when calling mSeriesChallengeParticipantCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.joinCode !== undefined && requestParameters.joinCode !== null) {
            queryParameters['joinCode'] = requestParameters.joinCode;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/participant`,
            action: 'mSeriesChallengeParticipant:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Leave Challenge
     */
    async mSeriesChallengeParticipantDelete(requestParameters: MSeriesChallengeParticipantDeleteRequest): Promise<void> {
        if (requestParameters.mSeriesChallengeId === null || requestParameters.mSeriesChallengeId === undefined) {            
            throw new runtime.RequiredError('mSeriesChallengeId','Required parameter requestParameters.mSeriesChallengeId was null or undefined when calling mSeriesChallengeParticipantDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.mSeriesChallengeId !== undefined && requestParameters.mSeriesChallengeId !== null) {
            pathParameters['mSeriesChallengeId'] = requestParameters.mSeriesChallengeId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/{mSeriesChallengeId}/participant`.replace(`{${"mSeriesChallengeId"}}`, encodeURIComponent(String(requestParameters.mSeriesChallengeId))),
            action: 'mSeriesChallengeParticipant:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Search for mSeries Challenge Participants
     */
    async mSeriesChallengeParticipantList(requestParameters: MSeriesChallengeParticipantListRequest): Promise<MSeriesChallengeParticipantListResponse> {
        if (requestParameters.nameSearchQuery === null || requestParameters.nameSearchQuery === undefined) {            
            throw new runtime.RequiredError('nameSearchQuery','Required parameter requestParameters.nameSearchQuery was null or undefined when calling mSeriesChallengeParticipantList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.joinCode !== undefined && requestParameters.joinCode !== null) {
            queryParameters['joinCode'] = requestParameters.joinCode;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.mSeriesChallengeId !== undefined && requestParameters.mSeriesChallengeId !== null) {
            queryParameters['mSeriesChallengeId'] = requestParameters.mSeriesChallengeId;
        }

        
        if (requestParameters.nameSearchQuery !== undefined && requestParameters.nameSearchQuery !== null) {
            queryParameters['nameSearchQuery'] = requestParameters.nameSearchQuery;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/participant/list`,
            action: 'mSeriesChallengeParticipant:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s mSeries User Challenge Participant Record
     */
    async mSeriesChallengeParticipantShow(requestParameters: MSeriesChallengeParticipantShowRequest): Promise<MSeriesChallengeParticipantResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.joinCode !== undefined && requestParameters.joinCode !== null) {
            queryParameters['joinCode'] = requestParameters.joinCode;
        }

        
        if (requestParameters.mSeriesChallengeId !== undefined && requestParameters.mSeriesChallengeId !== null) {
            queryParameters['mSeriesChallengeId'] = requestParameters.mSeriesChallengeId;
        }

        
        if (requestParameters.mSeriesChallengeParticipantId !== undefined && requestParameters.mSeriesChallengeParticipantId !== null) {
            queryParameters['mSeriesChallengeParticipantId'] = requestParameters.mSeriesChallengeParticipantId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/participant`,
            action: 'mSeriesChallengeParticipant:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user mSeries Challenge
     */
    async mSeriesChallengeShow(requestParameters: MSeriesChallengeShowRequest): Promise<MSeriesChallengeResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.joinCode !== undefined && requestParameters.joinCode !== null) {
            queryParameters['joinCode'] = requestParameters.joinCode;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge`,
            action: 'mSeriesChallenge:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user mSeries Challenge
     */
    async mSeriesChallengeUpdate(requestParameters: MSeriesChallengeUpdateRequest): Promise<MSeriesChallengeResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesChallengeUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.isPublic !== undefined && requestParameters.isPublic !== null) {
            queryParameters['isPublic'] = requestParameters.isPublic;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.userLimit !== undefined && requestParameters.userLimit !== null) {
            queryParameters['userLimit'] = requestParameters.userLimit;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/challenge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesChallenge:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user M Series data set
     */
    async mSeriesDataSetCreate(requestParameters: MSeriesDataSetCreateRequest): Promise<MSeriesDataSetResponse> {
        if (requestParameters.buildMajor === null || requestParameters.buildMajor === undefined) {            
            throw new runtime.RequiredError('buildMajor','Required parameter requestParameters.buildMajor was null or undefined when calling mSeriesDataSetCreate.');
        }
        
        if (requestParameters.buildMinor === null || requestParameters.buildMinor === undefined) {            
            throw new runtime.RequiredError('buildMinor','Required parameter requestParameters.buildMinor was null or undefined when calling mSeriesDataSetCreate.');
        }
        
        if (requestParameters.mSeriesDataPoints === null || requestParameters.mSeriesDataPoints === undefined) {            
            throw new runtime.RequiredError('mSeriesDataPoints','Required parameter requestParameters.mSeriesDataPoints was null or undefined when calling mSeriesDataSetCreate.');
        }
        
        if (requestParameters.ordinalId === null || requestParameters.ordinalId === undefined) {            
            throw new runtime.RequiredError('ordinalId','Required parameter requestParameters.ordinalId was null or undefined when calling mSeriesDataSetCreate.');
        }
        
        if (requestParameters.source === null || requestParameters.source === undefined) {            
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling mSeriesDataSetCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.autoAttachSession !== undefined && requestParameters.autoAttachSession !== null) {
            queryParameters['autoAttachSession'] = requestParameters.autoAttachSession;
        }

        
        if (requestParameters.buildMajor !== undefined && requestParameters.buildMajor !== null) {
            queryParameters['buildMajor'] = requestParameters.buildMajor;
        }

        
        if (requestParameters.buildMinor !== undefined && requestParameters.buildMinor !== null) {
            queryParameters['buildMinor'] = requestParameters.buildMinor;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.mSeriesDataPoints !== undefined && requestParameters.mSeriesDataPoints !== null) {
            queryParameters['mSeriesDataPoints'] = requestParameters.mSeriesDataPoints;
        }

        
        if (requestParameters.machineType !== undefined && requestParameters.machineType !== null) {
            queryParameters['machineType'] = requestParameters.machineType;
        }

        
        if (requestParameters.ordinalId !== undefined && requestParameters.ordinalId !== null) {
            queryParameters['ordinalId'] = requestParameters.ordinalId;
        }

        
        if (requestParameters.sessionId !== undefined && requestParameters.sessionId !== null) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set`,
            action: 'mSeriesDataSet:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s M Series data set
     */
    async mSeriesDataSetDelete(requestParameters: MSeriesDataSetDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesDataSetDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesDataSet:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s M Series data sets
     */
    async mSeriesDataSetList(requestParameters: MSeriesDataSetListRequest): Promise<MSeriesDataSetListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set/list`,
            action: 'mSeriesDataSet:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Reenqueue a user\'s M Series data set
     */
    async mSeriesDataSetReenqueue(requestParameters: MSeriesDataSetReenqueueRequest): Promise<void> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set/reenqueue`,
            action: 'mSeriesDataSet:reenqueue',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show a user\'s M Series data set segment
     */
    async mSeriesDataSetSegmentShow(requestParameters: MSeriesDataSetSegmentShowRequest): Promise<MSeriesDataSetSegmentResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.graph !== undefined && requestParameters.graph !== null) {
            queryParameters['graph'] = requestParameters.graph;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set/segment`,
            action: 'mSeriesDataSetSegment:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s M Series data set
     */
    async mSeriesDataSetShow(requestParameters: MSeriesDataSetShowRequest): Promise<MSeriesDataSetResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.graph !== undefined && requestParameters.graph !== null) {
            queryParameters['graph'] = requestParameters.graph;
        }

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set`,
            action: 'mSeriesDataSet:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to M Series data set changes
     */
    async mSeriesDataSetSubscribe(requestParameters: MSeriesDataSetSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mSeriesDataset/subscribe`,
            action: 'mSeriesDataSet:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user\'s M Series data set
     */
    async mSeriesDataSetUpdate(requestParameters: MSeriesDataSetUpdateRequest): Promise<MSeriesDataSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesDataSetUpdate.');
        }
        
        if (requestParameters.mSeriesFtpMeasurementId === null || requestParameters.mSeriesFtpMeasurementId === undefined) {            
            throw new runtime.RequiredError('mSeriesFtpMeasurementId','Required parameter requestParameters.mSeriesFtpMeasurementId was null or undefined when calling mSeriesDataSetUpdate.');
        }
        
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {            
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling mSeriesDataSetUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.mSeriesFtpMeasurementId !== undefined && requestParameters.mSeriesFtpMeasurementId !== null) {
            queryParameters['mSeriesFtpMeasurementId'] = requestParameters.mSeriesFtpMeasurementId;
        }

        
        if (requestParameters.sessionId !== undefined && requestParameters.sessionId !== null) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/data-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesDataSet:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user M Series FTP measurement
     */
    async mSeriesFtpMeasurementCreate(requestParameters: MSeriesFtpMeasurementCreateRequest): Promise<MSeriesFtpMeasurementResponse> {
        if (requestParameters.source === null || requestParameters.source === undefined) {            
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling mSeriesFtpMeasurementCreate.');
        }
        
        if (requestParameters.takenAt === null || requestParameters.takenAt === undefined) {            
            throw new runtime.RequiredError('takenAt','Required parameter requestParameters.takenAt was null or undefined when calling mSeriesFtpMeasurementCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.ftp !== undefined && requestParameters.ftp !== null) {
            queryParameters['ftp'] = requestParameters.ftp;
        }

        
        if (requestParameters.machineType !== undefined && requestParameters.machineType !== null) {
            queryParameters['machineType'] = requestParameters.machineType;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.takenAt !== undefined && requestParameters.takenAt !== null) {
            queryParameters['takenAt'] = (requestParameters.takenAt as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/ftp-measurement`,
            action: 'mSeriesFtpMeasurement:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s M Series FTP measurement
     */
    async mSeriesFtpMeasurementDelete(requestParameters: MSeriesFtpMeasurementDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mSeriesFtpMeasurementDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/ftp-measurement/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'mSeriesFtpMeasurement:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s M Series FTP measurements
     */
    async mSeriesFtpMeasurementList(requestParameters: MSeriesFtpMeasurementListRequest): Promise<MSeriesFtpMeasurementListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.machineType !== undefined && requestParameters.machineType !== null) {
            queryParameters['machineType'] = requestParameters.machineType;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/ftp-measurement/list`,
            action: 'mSeriesFtpMeasurement:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s M Series FTP measurement
     */
    async mSeriesFtpMeasurementShow(requestParameters: MSeriesFtpMeasurementShowRequest): Promise<MSeriesFtpMeasurementResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/ftp-measurement`,
            action: 'mSeriesFtpMeasurement:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s M Series data set
     */
    async mSeriesProfileStatsShow(requestParameters: MSeriesProfileStatsShowRequest): Promise<MSeriesProfileStatsResponse> {
        if (requestParameters.cardioMachineId === null || requestParameters.cardioMachineId === undefined) {            
            throw new runtime.RequiredError('cardioMachineId','Required parameter requestParameters.cardioMachineId was null or undefined when calling mSeriesProfileStatsShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/m-series/profile-stats`,
            action: 'mSeriesProfileStats:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user machine adjustment
     */
    async machineAdjustmentCreate(requestParameters: MachineAdjustmentCreateRequest): Promise<MachineAdjustmentResponse> {
        if (requestParameters.model === null || requestParameters.model === undefined) {            
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling machineAdjustmentCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.leftPosition !== undefined && requestParameters.leftPosition !== null) {
            queryParameters['leftPosition'] = requestParameters.leftPosition;
        }

        
        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        
        if (requestParameters.rightPosition !== undefined && requestParameters.rightPosition !== null) {
            queryParameters['rightPosition'] = requestParameters.rightPosition;
        }

        
        if (requestParameters.seat !== undefined && requestParameters.seat !== null) {
            queryParameters['seat'] = requestParameters.seat;
        }

        
        if (requestParameters.start !== undefined && requestParameters.start !== null) {
            queryParameters['start'] = requestParameters.start;
        }

        
        if (requestParameters.stop !== undefined && requestParameters.stop !== null) {
            queryParameters['stop'] = requestParameters.stop;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/machine-adjustment`,
            action: 'machineAdjustment:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a users machine adjustment
     */
    async machineAdjustmentDelete(requestParameters: MachineAdjustmentDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling machineAdjustmentDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/machine-adjustment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'machineAdjustment:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List user machine adjustments
     */
    async machineAdjustmentList(requestParameters: MachineAdjustmentListRequest): Promise<MachineAdjustmentListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/machine-adjustment/list`,
            action: 'machineAdjustment:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Shows a users machine adjustments
     */
    async machineAdjustmentShow(requestParameters: MachineAdjustmentShowRequest): Promise<MachineAdjustmentResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling machineAdjustmentShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/machine-adjustment`,
            action: 'machineAdjustment:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a users machine adjustments
     */
    async machineAdjustmentUpdate(requestParameters: MachineAdjustmentUpdateRequest): Promise<MachineAdjustmentResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling machineAdjustmentUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.leftPosition !== undefined && requestParameters.leftPosition !== null) {
            queryParameters['leftPosition'] = requestParameters.leftPosition;
        }

        
        if (requestParameters.rightPosition !== undefined && requestParameters.rightPosition !== null) {
            queryParameters['rightPosition'] = requestParameters.rightPosition;
        }

        
        if (requestParameters.seat !== undefined && requestParameters.seat !== null) {
            queryParameters['seat'] = requestParameters.seat;
        }

        
        if (requestParameters.start !== undefined && requestParameters.start !== null) {
            queryParameters['start'] = requestParameters.start;
        }

        
        if (requestParameters.stop !== undefined && requestParameters.stop !== null) {
            queryParameters['stop'] = requestParameters.stop;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/machine-adjustment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'machineAdjustment:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Authorizes a third party application
     */
    async oauthAuthorize(requestParameters: OauthAuthorizeRequest): Promise<OauthResponse> {
        if (requestParameters.clientIdentifier === null || requestParameters.clientIdentifier === undefined) {            
            throw new runtime.RequiredError('clientIdentifier','Required parameter requestParameters.clientIdentifier was null or undefined when calling oauthAuthorize.');
        }
        
        if (requestParameters.redirectUrl === null || requestParameters.redirectUrl === undefined) {            
            throw new runtime.RequiredError('redirectUrl','Required parameter requestParameters.redirectUrl was null or undefined when calling oauthAuthorize.');
        }
        
        if (requestParameters.responseType === null || requestParameters.responseType === undefined) {            
            throw new runtime.RequiredError('responseType','Required parameter requestParameters.responseType was null or undefined when calling oauthAuthorize.');
        }
        
        if (requestParameters.state === null || requestParameters.state === undefined) {            
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling oauthAuthorize.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.clientIdentifier !== undefined && requestParameters.clientIdentifier !== null) {
            queryParameters['clientIdentifier'] = requestParameters.clientIdentifier;
        }

        
        if (requestParameters.redirectUrl !== undefined && requestParameters.redirectUrl !== null) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        
        if (requestParameters.responseType !== undefined && requestParameters.responseType !== null) {
            queryParameters['responseType'] = requestParameters.responseType;
        }

        
        if (requestParameters.state !== undefined && requestParameters.state !== null) {
            queryParameters['state'] = requestParameters.state;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/authorize`,
            action: 'oauth:authorize',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Deauthorizes an oauth user
     */
    async oauthDeauthorize(requestParameters: OauthDeauthorizeRequest): Promise<void> {
        if (requestParameters.accessToken === null || requestParameters.accessToken === undefined) {            
            throw new runtime.RequiredError('accessToken','Required parameter requestParameters.accessToken was null or undefined when calling oauthDeauthorize.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.accessToken !== undefined && requestParameters.accessToken !== null) {
            queryParameters['accessToken'] = requestParameters.accessToken;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/deauthorize`,
            action: 'oauth:deauthorize',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Initiates OAuth access request and return parameters
     */
    async oauthInitiate(requestParameters: OauthInitiateRequest): Promise<RedirectResponse> {
        if (requestParameters.redirect === null || requestParameters.redirect === undefined) {            
            throw new runtime.RequiredError('redirect','Required parameter requestParameters.redirect was null or undefined when calling oauthInitiate.');
        }
        
        if (requestParameters.service === null || requestParameters.service === undefined) {            
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling oauthInitiate.');
        }
        
        if (requestParameters.type === null || requestParameters.type === undefined) {            
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling oauthInitiate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.redirect !== undefined && requestParameters.redirect !== null) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        
        if (requestParameters.type !== undefined && requestParameters.type !== null) {
            queryParameters['type'] = requestParameters.type;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.service !== undefined && requestParameters.service !== null) {
            pathParameters['service'] = requestParameters.service;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/initiate/{service}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            action: 'oauth:initiate',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Delete a user\'s oauth service connection
     */
    async oauthServiceDelete(requestParameters: OauthServiceDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling oauthServiceDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/service/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'oauthService:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List a user\'s oauth service connections
     */
    async oauthServiceList(requestParameters: OauthServiceListRequest): Promise<OAuthServiceListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.service !== undefined && requestParameters.service !== null) {
            queryParameters['service'] = requestParameters.service;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/service/list`,
            action: 'oauthService:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s oauth service connection
     */
    async oauthServiceShow(requestParameters: OauthServiceShowRequest): Promise<OAuthServiceResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling oauthServiceShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/service`,
            action: 'oauthService:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Returns tokens for third party oauth
     */
    async oauthToken(requestParameters: OauthTokenRequest): Promise<void> {
        if (requestParameters.clientIdentifier === null || requestParameters.clientIdentifier === undefined) {            
            throw new runtime.RequiredError('clientIdentifier','Required parameter requestParameters.clientIdentifier was null or undefined when calling oauthToken.');
        }
        
        if (requestParameters.clientSecret === null || requestParameters.clientSecret === undefined) {            
            throw new runtime.RequiredError('clientSecret','Required parameter requestParameters.clientSecret was null or undefined when calling oauthToken.');
        }
        
        if (requestParameters.grantType === null || requestParameters.grantType === undefined) {            
            throw new runtime.RequiredError('grantType','Required parameter requestParameters.grantType was null or undefined when calling oauthToken.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.authorizationCode !== undefined && requestParameters.authorizationCode !== null) {
            queryParameters['authorizationCode'] = requestParameters.authorizationCode;
        }

        
        if (requestParameters.clientIdentifier !== undefined && requestParameters.clientIdentifier !== null) {
            queryParameters['clientIdentifier'] = requestParameters.clientIdentifier;
        }

        
        if (requestParameters.clientSecret !== undefined && requestParameters.clientSecret !== null) {
            queryParameters['clientSecret'] = requestParameters.clientSecret;
        }

        
        if (requestParameters.grantType !== undefined && requestParameters.grantType !== null) {
            queryParameters['grantType'] = requestParameters.grantType;
        }

        
        if (requestParameters.refreshToken !== undefined && requestParameters.refreshToken !== null) {
            queryParameters['refreshToken'] = requestParameters.refreshToken;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/token`,
            action: 'oauth:token',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

    }

    /**
     * 1
     * Show a user\'s primary email address id
     */
    async primaryEmailAddressShow(requestParameters: PrimaryEmailAddressShowRequest): Promise<PrimaryEmailAddressResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/primary-email-address`,
            action: 'primaryEmailAddress:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user\'s primary email address id
     */
    async primaryEmailAddressUpdate(requestParameters: PrimaryEmailAddressUpdateRequest): Promise<PrimaryEmailAddressResponse> {
        if (requestParameters.emailAddressId === null || requestParameters.emailAddressId === undefined) {            
            throw new runtime.RequiredError('emailAddressId','Required parameter requestParameters.emailAddressId was null or undefined when calling primaryEmailAddressUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.emailAddressId !== undefined && requestParameters.emailAddressId !== null) {
            pathParameters['emailAddressId'] = requestParameters.emailAddressId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/primary-email-address/{emailAddressId}`.replace(`{${"emailAddressId"}}`, encodeURIComponent(String(requestParameters.emailAddressId))),
            action: 'primaryEmailAddress:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user profile
     */
    async profileShow(requestParameters: ProfileShowRequest): Promise<ProfileResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/profile`,
            action: 'profile:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes on a user profile
     */
    async profileSubscribe(requestParameters: ProfileSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profile/subscribe`,
            action: 'profile:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a user profile
     */
    async profileUpdate(requestParameters: ProfileUpdateRequest): Promise<ProfileResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.birthday !== undefined && requestParameters.birthday !== null) {
            queryParameters['birthday'] = (requestParameters.birthday as any).toISOString();
        }

        
        if (requestParameters.gender !== undefined && requestParameters.gender !== null) {
            queryParameters['gender'] = requestParameters.gender;
        }

        
        if (requestParameters.language !== undefined && requestParameters.language !== null) {
            queryParameters['language'] = requestParameters.language;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.units !== undefined && requestParameters.units !== null) {
            queryParameters['units'] = requestParameters.units;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/profile`,
            action: 'profile:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s session
     */
    async sessionDelete(requestParameters: SessionDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'session:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * End a user session
     */
    async sessionEnd(requestParameters: SessionEndRequest): Promise<SessionResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionEnd.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session/{id}/end`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'session:end',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List a user\'s sessions
     */
    async sessionList(requestParameters: SessionListRequest): Promise<SessionListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.open !== undefined && requestParameters.open !== null) {
            queryParameters['open'] = requestParameters.open;
        }

        
        if (requestParameters.requireExtendedDataType !== undefined && requestParameters.requireExtendedDataType !== null) {
            queryParameters['requireExtendedDataType'] = requestParameters.requireExtendedDataType;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session/list`,
            action: 'session:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Attach a sequence to an session plan
     */
    async sessionPlanAttachSequence(requestParameters: SessionPlanAttachSequenceRequest): Promise<SessionPlanResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanAttachSequence.');
        }
        
        if (requestParameters.scheduleIndexes === null || requestParameters.scheduleIndexes === undefined) {            
            throw new runtime.RequiredError('scheduleIndexes','Required parameter requestParameters.scheduleIndexes was null or undefined when calling sessionPlanAttachSequence.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanAttachSequence.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.scheduleIndexes !== undefined && requestParameters.scheduleIndexes !== null) {
            queryParameters['scheduleIndexes'] = requestParameters.scheduleIndexes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/{id}/sequence/{sequenceId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlan:attachSequence',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Attach a sequence template to an session plan
     */
    async sessionPlanAttachSequenceTemplate(requestParameters: SessionPlanAttachSequenceTemplateRequest): Promise<SessionPlanResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanAttachSequenceTemplate.');
        }
        
        if (requestParameters.scheduleIndexes === null || requestParameters.scheduleIndexes === undefined) {            
            throw new runtime.RequiredError('scheduleIndexes','Required parameter requestParameters.scheduleIndexes was null or undefined when calling sessionPlanAttachSequenceTemplate.');
        }
        
        if (requestParameters.sequenceTemplateId === null || requestParameters.sequenceTemplateId === undefined) {            
            throw new runtime.RequiredError('sequenceTemplateId','Required parameter requestParameters.sequenceTemplateId was null or undefined when calling sessionPlanAttachSequenceTemplate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.scheduleIndexes !== undefined && requestParameters.scheduleIndexes !== null) {
            queryParameters['scheduleIndexes'] = requestParameters.scheduleIndexes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sequenceTemplateId !== undefined && requestParameters.sequenceTemplateId !== null) {
            pathParameters['sequenceTemplateId'] = requestParameters.sequenceTemplateId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/{id}/sequence-template/{sequenceTemplateId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sequenceTemplateId"}}`, encodeURIComponent(String(requestParameters.sequenceTemplateId))),
            action: 'sessionPlan:attachSequenceTemplate',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Clone session plan from session plan template
     */
    async sessionPlanCloneTemplate(requestParameters: SessionPlanCloneTemplateRequest): Promise<SessionPlanResponse> {
        if (requestParameters.active === null || requestParameters.active === undefined) {            
            throw new runtime.RequiredError('active','Required parameter requestParameters.active was null or undefined when calling sessionPlanCloneTemplate.');
        }
        
        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {            
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling sessionPlanCloneTemplate.');
        }
        
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {            
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling sessionPlanCloneTemplate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.active !== undefined && requestParameters.active !== null) {
            queryParameters['active'] = requestParameters.active;
        }

        
        if (requestParameters.endAt !== undefined && requestParameters.endAt !== null) {
            queryParameters['endAt'] = (requestParameters.endAt as any).toISOString();
        }

        
        if (requestParameters.startAt !== undefined && requestParameters.startAt !== null) {
            queryParameters['startAt'] = (requestParameters.startAt as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.templateId !== undefined && requestParameters.templateId !== null) {
            pathParameters['templateId'] = requestParameters.templateId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/clone-template/{templateId}`.replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            action: 'sessionPlan:cloneTemplate',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan
     */
    async sessionPlanCreate(requestParameters: SessionPlanCreateRequest): Promise<SessionPlanResponse> {
        if (requestParameters.active === null || requestParameters.active === undefined) {            
            throw new runtime.RequiredError('active','Required parameter requestParameters.active was null or undefined when calling sessionPlanCreate.');
        }
        
        if (requestParameters.flexible === null || requestParameters.flexible === undefined) {            
            throw new runtime.RequiredError('flexible','Required parameter requestParameters.flexible was null or undefined when calling sessionPlanCreate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanCreate.');
        }
        
        if (requestParameters.repeating === null || requestParameters.repeating === undefined) {            
            throw new runtime.RequiredError('repeating','Required parameter requestParameters.repeating was null or undefined when calling sessionPlanCreate.');
        }
        
        if (requestParameters.scheduleLength === null || requestParameters.scheduleLength === undefined) {            
            throw new runtime.RequiredError('scheduleLength','Required parameter requestParameters.scheduleLength was null or undefined when calling sessionPlanCreate.');
        }
        
        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {            
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling sessionPlanCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.active !== undefined && requestParameters.active !== null) {
            queryParameters['active'] = requestParameters.active;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.endAt !== undefined && requestParameters.endAt !== null) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        
        if (requestParameters.flexible !== undefined && requestParameters.flexible !== null) {
            queryParameters['flexible'] = requestParameters.flexible;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.repeating !== undefined && requestParameters.repeating !== null) {
            queryParameters['repeating'] = requestParameters.repeating;
        }

        
        if (requestParameters.scheduleLength !== undefined && requestParameters.scheduleLength !== null) {
            queryParameters['scheduleLength'] = requestParameters.scheduleLength;
        }

        
        if (requestParameters.startAt !== undefined && requestParameters.startAt !== null) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan`,
            action: 'sessionPlan:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete session plan
     */
    async sessionPlanDelete(requestParameters: SessionPlanDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlan:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Detach a sequence to an session plan
     */
    async sessionPlanDetachSequence(requestParameters: SessionPlanDetachSequenceRequest): Promise<SessionPlanResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanDetachSequence.');
        }
        
        if (requestParameters.scheduleIndexes === null || requestParameters.scheduleIndexes === undefined) {            
            throw new runtime.RequiredError('scheduleIndexes','Required parameter requestParameters.scheduleIndexes was null or undefined when calling sessionPlanDetachSequence.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanDetachSequence.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.scheduleIndexes !== undefined && requestParameters.scheduleIndexes !== null) {
            queryParameters['scheduleIndexes'] = requestParameters.scheduleIndexes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/{id}/sequence/{sequenceId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlan:detachSequence',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List session plan
     */
    async sessionPlanList(requestParameters: SessionPlanListRequest): Promise<SessionPlanListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.active !== undefined && requestParameters.active !== null) {
            queryParameters['active'] = requestParameters.active;
        }

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/list`,
            action: 'sessionPlan:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan sequence
     */
    async sessionPlanSequenceCreate(requestParameters: SessionPlanSequenceCreateRequest): Promise<SessionPlanSequenceResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSequenceCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence`,
            action: 'sessionPlanSequence:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete session plan sequence
     */
    async sessionPlanSequenceDelete(requestParameters: SessionPlanSequenceDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSequence:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Delete session plan sequence instance
     */
    async sessionPlanSequenceInstanceDelete(requestParameters: SessionPlanSequenceInstanceDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceInstanceDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSequenceInstance:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List session plan sequence instance
     */
    async sessionPlanSequenceInstanceList(requestParameters: SessionPlanSequenceInstanceListRequest): Promise<SessionPlanSequenceInstanceListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-instance/list`,
            action: 'sessionPlanSequenceInstance:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan sequence instance
     */
    async sessionPlanSequenceInstanceShow(requestParameters: SessionPlanSequenceInstanceShowRequest): Promise<SessionPlanSequenceInstanceResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceInstanceShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-instance`,
            action: 'sessionPlanSequenceInstance:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List session plan sequence
     */
    async sessionPlanSequenceList(requestParameters: SessionPlanSequenceListRequest): Promise<SessionPlanSequenceListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence/list`,
            action: 'sessionPlanSequence:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan sequence
     */
    async sessionPlanSequenceShow(requestParameters: SessionPlanSequenceShowRequest): Promise<SessionPlanSequenceResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence`,
            action: 'sessionPlanSequence:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan sequence template
     */
    async sessionPlanSequenceTemplateCreate(requestParameters: SessionPlanSequenceTemplateCreateRequest): Promise<SessionPlanSequenceTemplateResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSequenceTemplateCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters._public !== undefined && requestParameters._public !== null) {
            queryParameters['public'] = requestParameters._public;
        }

        
        if (requestParameters.searchable !== undefined && requestParameters.searchable !== null) {
            queryParameters['searchable'] = requestParameters.searchable;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-template`,
            action: 'sessionPlanSequenceTemplate:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete session plan sequence template
     */
    async sessionPlanSequenceTemplateDelete(requestParameters: SessionPlanSequenceTemplateDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceTemplateDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSequenceTemplate:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List session plan sequence template
     */
    async sessionPlanSequenceTemplateList(requestParameters: SessionPlanSequenceTemplateListRequest): Promise<SessionPlanSequenceTemplateListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters._public !== undefined && requestParameters._public !== null) {
            queryParameters['public'] = requestParameters._public;
        }

        
        if (requestParameters.searchable !== undefined && requestParameters.searchable !== null) {
            queryParameters['searchable'] = requestParameters.searchable;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-template/list`,
            action: 'sessionPlanSequenceTemplate:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan sequence template
     */
    async sessionPlanSequenceTemplateShow(requestParameters: SessionPlanSequenceTemplateShowRequest): Promise<SessionPlanSequenceTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceTemplateShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-template`,
            action: 'sessionPlanSequenceTemplate:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan sequence template
     */
    async sessionPlanSequenceTemplateUpdate(requestParameters: SessionPlanSequenceTemplateUpdateRequest): Promise<SessionPlanSequenceTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceTemplateUpdate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSequenceTemplateUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters._public !== undefined && requestParameters._public !== null) {
            queryParameters['public'] = requestParameters._public;
        }

        
        if (requestParameters.searchable !== undefined && requestParameters.searchable !== null) {
            queryParameters['searchable'] = requestParameters.searchable;
        }

        
        if (requestParameters.setIdOrder !== undefined && requestParameters.setIdOrder !== null) {
            queryParameters['setIdOrder'] = requestParameters.setIdOrder;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence-template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSequenceTemplate:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan sequence
     */
    async sessionPlanSequenceUpdate(requestParameters: SessionPlanSequenceUpdateRequest): Promise<SessionPlanSequenceResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSequenceUpdate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSequenceUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.setIdOrder !== undefined && requestParameters.setIdOrder !== null) {
            queryParameters['setIdOrder'] = requestParameters.setIdOrder;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-sequence/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSequence:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan activity set
     */
    async sessionPlanSetCreateActivity(requestParameters: SessionPlanSetCreateActivityRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetCreateActivity.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetCreateActivity.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{sequenceId}/activity-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSet:createActivity',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan cardio set
     */
    async sessionPlanSetCreateCardio(requestParameters: SessionPlanSetCreateCardioRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling sessionPlanSetCreateCardio.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetCreateCardio.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.caloricBurn !== undefined && requestParameters.caloricBurn !== null) {
            queryParameters['caloricBurn'] = requestParameters.caloricBurn;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.distance !== undefined && requestParameters.distance !== null) {
            queryParameters['distance'] = requestParameters.distance;
        }

        
        if (requestParameters.duration !== undefined && requestParameters.duration !== null) {
            queryParameters['duration'] = requestParameters.duration;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{sequenceId}/cardio-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSet:createCardio',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan strength set
     */
    async sessionPlanSetCreateStrength(requestParameters: SessionPlanSetCreateStrengthRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetCreateStrength.');
        }
        
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling sessionPlanSetCreateStrength.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.forceUnit !== undefined && requestParameters.forceUnit !== null) {
            queryParameters['forceUnit'] = requestParameters.forceUnit;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.repetitionCount !== undefined && requestParameters.repetitionCount !== null) {
            queryParameters['repetitionCount'] = requestParameters.repetitionCount;
        }

        
        if (requestParameters.resistance !== undefined && requestParameters.resistance !== null) {
            queryParameters['resistance'] = requestParameters.resistance;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{sequenceId}/strength-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSet:createStrength',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan stretch set
     */
    async sessionPlanSetCreateStretch(requestParameters: SessionPlanSetCreateStretchRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetCreateStretch.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetCreateStretch.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{sequenceId}/stretch-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSet:createStretch',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete session plan set
     */
    async sessionPlanSetDelete(requestParameters: SessionPlanSetDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSet:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show a session plan set intance
     */
    async sessionPlanSetInstanceShow(requestParameters: SessionPlanSetInstanceShowRequest): Promise<SessionPlanSetInstanceResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetInstanceShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-instance`,
            action: 'sessionPlanSetInstance:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan activity set instance
     */
    async sessionPlanSetInstanceUpdateActivity(requestParameters: SessionPlanSetInstanceUpdateActivityRequest): Promise<SessionPlanSetInstanceResponse> {
        if (requestParameters.completed === null || requestParameters.completed === undefined) {            
            throw new runtime.RequiredError('completed','Required parameter requestParameters.completed was null or undefined when calling sessionPlanSetInstanceUpdateActivity.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetInstanceUpdateActivity.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.completed !== undefined && requestParameters.completed !== null) {
            queryParameters['completed'] = requestParameters.completed;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-instance/{id}/activity-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetInstance:updateActivity',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan cardio set instance
     */
    async sessionPlanSetInstanceUpdateCardio(requestParameters: SessionPlanSetInstanceUpdateCardioRequest): Promise<SessionPlanSetInstanceResponse> {
        if (requestParameters.completed === null || requestParameters.completed === undefined) {            
            throw new runtime.RequiredError('completed','Required parameter requestParameters.completed was null or undefined when calling sessionPlanSetInstanceUpdateCardio.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetInstanceUpdateCardio.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.completed !== undefined && requestParameters.completed !== null) {
            queryParameters['completed'] = requestParameters.completed;
        }

        
        if (requestParameters.completedCaloricBurn !== undefined && requestParameters.completedCaloricBurn !== null) {
            queryParameters['completedCaloricBurn'] = requestParameters.completedCaloricBurn;
        }

        
        if (requestParameters.completedDistance !== undefined && requestParameters.completedDistance !== null) {
            queryParameters['completedDistance'] = requestParameters.completedDistance;
        }

        
        if (requestParameters.completedDuration !== undefined && requestParameters.completedDuration !== null) {
            queryParameters['completedDuration'] = requestParameters.completedDuration;
        }

        
        if (requestParameters.mSeriesDataSetId !== undefined && requestParameters.mSeriesDataSetId !== null) {
            queryParameters['mSeriesDataSetId'] = requestParameters.mSeriesDataSetId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-instance/{id}/cardio-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetInstance:updateCardio',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan strength set instance
     */
    async sessionPlanSetInstanceUpdateStrength(requestParameters: SessionPlanSetInstanceUpdateStrengthRequest): Promise<SessionPlanSetInstanceResponse> {
        if (requestParameters.completed === null || requestParameters.completed === undefined) {            
            throw new runtime.RequiredError('completed','Required parameter requestParameters.completed was null or undefined when calling sessionPlanSetInstanceUpdateStrength.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetInstanceUpdateStrength.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.completed !== undefined && requestParameters.completed !== null) {
            queryParameters['completed'] = requestParameters.completed;
        }

        
        if (requestParameters.completedForceUnit !== undefined && requestParameters.completedForceUnit !== null) {
            queryParameters['completedForceUnit'] = requestParameters.completedForceUnit;
        }

        
        if (requestParameters.completedRepetitionCount !== undefined && requestParameters.completedRepetitionCount !== null) {
            queryParameters['completedRepetitionCount'] = requestParameters.completedRepetitionCount;
        }

        
        if (requestParameters.completedResistance !== undefined && requestParameters.completedResistance !== null) {
            queryParameters['completedResistance'] = requestParameters.completedResistance;
        }

        
        if (requestParameters.strengthMachineDataSetId !== undefined && requestParameters.strengthMachineDataSetId !== null) {
            queryParameters['strengthMachineDataSetId'] = requestParameters.strengthMachineDataSetId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-instance/{id}/strength-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetInstance:updateStrength',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan stretch set instance
     */
    async sessionPlanSetInstanceUpdateStretch(requestParameters: SessionPlanSetInstanceUpdateStretchRequest): Promise<SessionPlanSetInstanceResponse> {
        if (requestParameters.completed === null || requestParameters.completed === undefined) {            
            throw new runtime.RequiredError('completed','Required parameter requestParameters.completed was null or undefined when calling sessionPlanSetInstanceUpdateStretch.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetInstanceUpdateStretch.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.completed !== undefined && requestParameters.completed !== null) {
            queryParameters['completed'] = requestParameters.completed;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-instance/{id}/stretch-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetInstance:updateStretch',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List session plan sets
     */
    async sessionPlanSetList(requestParameters: SessionPlanSetListRequest): Promise<SessionPlanSetListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.type !== undefined && requestParameters.type !== null) {
            queryParameters['type'] = requestParameters.type;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/list`,
            action: 'sessionPlanSet:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan set
     */
    async sessionPlanSetShow(requestParameters: SessionPlanSetShowRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set`,
            action: 'sessionPlanSet:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan activity set template
     */
    async sessionPlanSetTemplateCreateActivity(requestParameters: SessionPlanSetTemplateCreateActivityRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetTemplateCreateActivity.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetTemplateCreateActivity.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/{sequenceId}/activity-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSetTemplate:createActivity',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan cardio set template
     */
    async sessionPlanSetTemplateCreateCardio(requestParameters: SessionPlanSetTemplateCreateCardioRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling sessionPlanSetTemplateCreateCardio.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetTemplateCreateCardio.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.caloricBurn !== undefined && requestParameters.caloricBurn !== null) {
            queryParameters['caloricBurn'] = requestParameters.caloricBurn;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.distance !== undefined && requestParameters.distance !== null) {
            queryParameters['distance'] = requestParameters.distance;
        }

        
        if (requestParameters.duration !== undefined && requestParameters.duration !== null) {
            queryParameters['duration'] = requestParameters.duration;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/{sequenceId}/cardio-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSetTemplate:createCardio',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan strength set template
     */
    async sessionPlanSetTemplateCreateStrength(requestParameters: SessionPlanSetTemplateCreateStrengthRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetTemplateCreateStrength.');
        }
        
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling sessionPlanSetTemplateCreateStrength.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.repetitionCount !== undefined && requestParameters.repetitionCount !== null) {
            queryParameters['repetitionCount'] = requestParameters.repetitionCount;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/{sequenceId}/strength-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSetTemplate:createStrength',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan stretch set template
     */
    async sessionPlanSetTemplateCreateStretch(requestParameters: SessionPlanSetTemplateCreateStretchRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetTemplateCreateStretch.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanSetTemplateCreateStretch.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/{sequenceId}/stretch-set`.replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanSetTemplate:createStretch',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete session plan set template
     */
    async sessionPlanSetTemplateDelete(requestParameters: SessionPlanSetTemplateDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetTemplateDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetTemplate:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List session plan set templates
     */
    async sessionPlanSetTemplateList(requestParameters: SessionPlanSetTemplateListRequest): Promise<SessionPlanSetTemplateListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.type !== undefined && requestParameters.type !== null) {
            queryParameters['type'] = requestParameters.type;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/list`,
            action: 'sessionPlanSetTemplate:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan set template
     */
    async sessionPlanSetTemplateShow(requestParameters: SessionPlanSetTemplateShowRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetTemplateShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template`,
            action: 'sessionPlanSetTemplate:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan activity set template
     */
    async sessionPlanSetTemplateUpdateActivity(requestParameters: SessionPlanSetTemplateUpdateActivityRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetTemplateUpdateActivity.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetTemplateUpdateActivity.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/activity-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetTemplate:updateActivity',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan cardio set template
     */
    async sessionPlanSetTemplateUpdateCardio(requestParameters: SessionPlanSetTemplateUpdateCardioRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling sessionPlanSetTemplateUpdateCardio.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetTemplateUpdateCardio.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.caloricBurn !== undefined && requestParameters.caloricBurn !== null) {
            queryParameters['caloricBurn'] = requestParameters.caloricBurn;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.distance !== undefined && requestParameters.distance !== null) {
            queryParameters['distance'] = requestParameters.distance;
        }

        
        if (requestParameters.duration !== undefined && requestParameters.duration !== null) {
            queryParameters['duration'] = requestParameters.duration;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/cardio-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetTemplate:updateCardio',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan strength set template
     */
    async sessionPlanSetTemplateUpdateStrength(requestParameters: SessionPlanSetTemplateUpdateStrengthRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetTemplateUpdateStrength.');
        }
        
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling sessionPlanSetTemplateUpdateStrength.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.repetitionCount !== undefined && requestParameters.repetitionCount !== null) {
            queryParameters['repetitionCount'] = requestParameters.repetitionCount;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/strength-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetTemplate:updateStrength',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan stretch set template
     */
    async sessionPlanSetTemplateUpdateStretch(requestParameters: SessionPlanSetTemplateUpdateStretchRequest): Promise<SessionPlanSetTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetTemplateUpdateStretch.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetTemplateUpdateStretch.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set-template/stretch-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSetTemplate:updateStretch',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan activity set
     */
    async sessionPlanSetUpdateActivity(requestParameters: SessionPlanSetUpdateActivityRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetUpdateActivity.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetUpdateActivity.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{id}/activity-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSet:updateActivity',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan cardio set
     */
    async sessionPlanSetUpdateCardio(requestParameters: SessionPlanSetUpdateCardioRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.cardioExerciseId === null || requestParameters.cardioExerciseId === undefined) {            
            throw new runtime.RequiredError('cardioExerciseId','Required parameter requestParameters.cardioExerciseId was null or undefined when calling sessionPlanSetUpdateCardio.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetUpdateCardio.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.caloricBurn !== undefined && requestParameters.caloricBurn !== null) {
            queryParameters['caloricBurn'] = requestParameters.caloricBurn;
        }

        
        if (requestParameters.cardioExerciseId !== undefined && requestParameters.cardioExerciseId !== null) {
            queryParameters['cardioExerciseId'] = requestParameters.cardioExerciseId;
        }

        
        if (requestParameters.cardioMachineId !== undefined && requestParameters.cardioMachineId !== null) {
            queryParameters['cardioMachineId'] = requestParameters.cardioMachineId;
        }

        
        if (requestParameters.distance !== undefined && requestParameters.distance !== null) {
            queryParameters['distance'] = requestParameters.distance;
        }

        
        if (requestParameters.duration !== undefined && requestParameters.duration !== null) {
            queryParameters['duration'] = requestParameters.duration;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{id}/cardio-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSet:updateCardio',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan strength set
     */
    async sessionPlanSetUpdateStrength(requestParameters: SessionPlanSetUpdateStrengthRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetUpdateStrength.');
        }
        
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling sessionPlanSetUpdateStrength.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.forceUnit !== undefined && requestParameters.forceUnit !== null) {
            queryParameters['forceUnit'] = requestParameters.forceUnit;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.repetitionCount !== undefined && requestParameters.repetitionCount !== null) {
            queryParameters['repetitionCount'] = requestParameters.repetitionCount;
        }

        
        if (requestParameters.resistance !== undefined && requestParameters.resistance !== null) {
            queryParameters['resistance'] = requestParameters.resistance;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{id}/strength-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSet:updateStrength',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan stretch set
     */
    async sessionPlanSetUpdateStretch(requestParameters: SessionPlanSetUpdateStretchRequest): Promise<SessionPlanSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanSetUpdateStretch.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanSetUpdateStretch.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-set/{id}/stretch-set`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanSet:updateStretch',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan
     */
    async sessionPlanShow(requestParameters: SessionPlanShowRequest): Promise<SessionPlanResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan`,
            action: 'sessionPlan:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Attach a sequence to an session plan template
     */
    async sessionPlanTemplateAttachSequence(requestParameters: SessionPlanTemplateAttachSequenceRequest): Promise<SessionPlanTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanTemplateAttachSequence.');
        }
        
        if (requestParameters.scheduleIndexes === null || requestParameters.scheduleIndexes === undefined) {            
            throw new runtime.RequiredError('scheduleIndexes','Required parameter requestParameters.scheduleIndexes was null or undefined when calling sessionPlanTemplateAttachSequence.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanTemplateAttachSequence.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.scheduleIndexes !== undefined && requestParameters.scheduleIndexes !== null) {
            queryParameters['scheduleIndexes'] = requestParameters.scheduleIndexes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template/{id}/sequence/{sequenceId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanTemplate:attachSequence',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create session plan template
     */
    async sessionPlanTemplateCreate(requestParameters: SessionPlanTemplateCreateRequest): Promise<SessionPlanTemplateResponse> {
        if (requestParameters.flexible === null || requestParameters.flexible === undefined) {            
            throw new runtime.RequiredError('flexible','Required parameter requestParameters.flexible was null or undefined when calling sessionPlanTemplateCreate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanTemplateCreate.');
        }
        
        if (requestParameters.repeating === null || requestParameters.repeating === undefined) {            
            throw new runtime.RequiredError('repeating','Required parameter requestParameters.repeating was null or undefined when calling sessionPlanTemplateCreate.');
        }
        
        if (requestParameters.scheduleLength === null || requestParameters.scheduleLength === undefined) {            
            throw new runtime.RequiredError('scheduleLength','Required parameter requestParameters.scheduleLength was null or undefined when calling sessionPlanTemplateCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.flexible !== undefined && requestParameters.flexible !== null) {
            queryParameters['flexible'] = requestParameters.flexible;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters._public !== undefined && requestParameters._public !== null) {
            queryParameters['public'] = requestParameters._public;
        }

        
        if (requestParameters.repeating !== undefined && requestParameters.repeating !== null) {
            queryParameters['repeating'] = requestParameters.repeating;
        }

        
        if (requestParameters.scheduleLength !== undefined && requestParameters.scheduleLength !== null) {
            queryParameters['scheduleLength'] = requestParameters.scheduleLength;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template`,
            action: 'sessionPlanTemplate:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete session plan template
     */
    async sessionPlanTemplateDelete(requestParameters: SessionPlanTemplateDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanTemplateDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanTemplate:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Detach a sequence to an session plan template
     */
    async sessionPlanTemplateDetachSequence(requestParameters: SessionPlanTemplateDetachSequenceRequest): Promise<SessionPlanTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanTemplateDetachSequence.');
        }
        
        if (requestParameters.scheduleIndexes === null || requestParameters.scheduleIndexes === undefined) {            
            throw new runtime.RequiredError('scheduleIndexes','Required parameter requestParameters.scheduleIndexes was null or undefined when calling sessionPlanTemplateDetachSequence.');
        }
        
        if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {            
            throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling sessionPlanTemplateDetachSequence.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.scheduleIndexes !== undefined && requestParameters.scheduleIndexes !== null) {
            queryParameters['scheduleIndexes'] = requestParameters.scheduleIndexes;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sequenceId !== undefined && requestParameters.sequenceId !== null) {
            pathParameters['sequenceId'] = requestParameters.sequenceId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template/{id}/sequence/{sequenceId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sequenceId"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
            action: 'sessionPlanTemplate:detachSequence',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List session plan templates
     */
    async sessionPlanTemplateList(requestParameters: SessionPlanTemplateListRequest): Promise<SessionPlanTemplateListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters._public !== undefined && requestParameters._public !== null) {
            queryParameters['public'] = requestParameters._public;
        }

        
        if (requestParameters.scheduleLength !== undefined && requestParameters.scheduleLength !== null) {
            queryParameters['scheduleLength'] = requestParameters.scheduleLength;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template/list`,
            action: 'sessionPlanTemplate:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a session plan template
     */
    async sessionPlanTemplateShow(requestParameters: SessionPlanTemplateShowRequest): Promise<SessionPlanTemplateResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanTemplateShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template`,
            action: 'sessionPlanTemplate:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan template
     */
    async sessionPlanTemplateUpdate(requestParameters: SessionPlanTemplateUpdateRequest): Promise<SessionPlanTemplateResponse> {
        if (requestParameters.flexible === null || requestParameters.flexible === undefined) {            
            throw new runtime.RequiredError('flexible','Required parameter requestParameters.flexible was null or undefined when calling sessionPlanTemplateUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanTemplateUpdate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanTemplateUpdate.');
        }
        
        if (requestParameters.repeating === null || requestParameters.repeating === undefined) {            
            throw new runtime.RequiredError('repeating','Required parameter requestParameters.repeating was null or undefined when calling sessionPlanTemplateUpdate.');
        }
        
        if (requestParameters.scheduleLength === null || requestParameters.scheduleLength === undefined) {            
            throw new runtime.RequiredError('scheduleLength','Required parameter requestParameters.scheduleLength was null or undefined when calling sessionPlanTemplateUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.flexible !== undefined && requestParameters.flexible !== null) {
            queryParameters['flexible'] = requestParameters.flexible;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters._public !== undefined && requestParameters._public !== null) {
            queryParameters['public'] = requestParameters._public;
        }

        
        if (requestParameters.repeating !== undefined && requestParameters.repeating !== null) {
            queryParameters['repeating'] = requestParameters.repeating;
        }

        
        if (requestParameters.scheduleLength !== undefined && requestParameters.scheduleLength !== null) {
            queryParameters['scheduleLength'] = requestParameters.scheduleLength;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan-template/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlanTemplate:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update session plan
     */
    async sessionPlanUpdate(requestParameters: SessionPlanUpdateRequest): Promise<SessionPlanResponse> {
        if (requestParameters.active === null || requestParameters.active === undefined) {            
            throw new runtime.RequiredError('active','Required parameter requestParameters.active was null or undefined when calling sessionPlanUpdate.');
        }
        
        if (requestParameters.flexible === null || requestParameters.flexible === undefined) {            
            throw new runtime.RequiredError('flexible','Required parameter requestParameters.flexible was null or undefined when calling sessionPlanUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionPlanUpdate.');
        }
        
        if (requestParameters.name === null || requestParameters.name === undefined) {            
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling sessionPlanUpdate.');
        }
        
        if (requestParameters.repeating === null || requestParameters.repeating === undefined) {            
            throw new runtime.RequiredError('repeating','Required parameter requestParameters.repeating was null or undefined when calling sessionPlanUpdate.');
        }
        
        if (requestParameters.scheduleLength === null || requestParameters.scheduleLength === undefined) {            
            throw new runtime.RequiredError('scheduleLength','Required parameter requestParameters.scheduleLength was null or undefined when calling sessionPlanUpdate.');
        }
        
        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {            
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling sessionPlanUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.active !== undefined && requestParameters.active !== null) {
            queryParameters['active'] = requestParameters.active;
        }

        
        if (requestParameters.description !== undefined && requestParameters.description !== null) {
            queryParameters['description'] = requestParameters.description;
        }

        
        if (requestParameters.endAt !== undefined && requestParameters.endAt !== null) {
            queryParameters['endAt'] = (requestParameters.endAt as any).toISOString();
        }

        
        if (requestParameters.flexible !== undefined && requestParameters.flexible !== null) {
            queryParameters['flexible'] = requestParameters.flexible;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.notes !== undefined && requestParameters.notes !== null) {
            queryParameters['notes'] = requestParameters.notes;
        }

        
        if (requestParameters.repeating !== undefined && requestParameters.repeating !== null) {
            queryParameters['repeating'] = requestParameters.repeating;
        }

        
        if (requestParameters.scheduleLength !== undefined && requestParameters.scheduleLength !== null) {
            queryParameters['scheduleLength'] = requestParameters.scheduleLength;
        }

        
        if (requestParameters.startAt !== undefined && requestParameters.startAt !== null) {
            queryParameters['startAt'] = (requestParameters.startAt as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session-plan/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'sessionPlan:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s session
     */
    async sessionShow(requestParameters: SessionShowRequest): Promise<SessionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session`,
            action: 'session:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Start a user session
     */
    async sessionStart(requestParameters: SessionStartRequest): Promise<SessionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.continueFromLastSet !== undefined && requestParameters.continueFromLastSet !== null) {
            queryParameters['continueFromLastSet'] = requestParameters.continueFromLastSet;
        }

        
        if (requestParameters.forceEndPrevious !== undefined && requestParameters.forceEndPrevious !== null) {
            queryParameters['forceEndPrevious'] = requestParameters.forceEndPrevious;
        }

        
        if (requestParameters.sessionPlanSequenceAssignmentId !== undefined && requestParameters.sessionPlanSequenceAssignmentId !== null) {
            queryParameters['sessionPlanSequenceAssignmentId'] = requestParameters.sessionPlanSequenceAssignmentId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session`,
            action: 'session:start',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to a user\'s session
     */
    async sessionSubscribe(requestParameters: SessionSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/session:subscribe`,
            action: 'session:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a strength exercise
     */
    async strengthExerciseCreate(requestParameters: StrengthExerciseCreateRequest): Promise<StrengthExerciseResponse> {
        if (requestParameters.category === null || requestParameters.category === undefined) {            
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling strengthExerciseCreate.');
        }
        
        if (requestParameters.defaultExerciseAlias === null || requestParameters.defaultExerciseAlias === undefined) {            
            throw new runtime.RequiredError('defaultExerciseAlias','Required parameter requestParameters.defaultExerciseAlias was null or undefined when calling strengthExerciseCreate.');
        }
        
        if (requestParameters.humanMovement === null || requestParameters.humanMovement === undefined) {            
            throw new runtime.RequiredError('humanMovement','Required parameter requestParameters.humanMovement was null or undefined when calling strengthExerciseCreate.');
        }
        
        if (requestParameters.plane === null || requestParameters.plane === undefined) {            
            throw new runtime.RequiredError('plane','Required parameter requestParameters.plane was null or undefined when calling strengthExerciseCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.category !== undefined && requestParameters.category !== null) {
            queryParameters['category'] = requestParameters.category;
        }

        
        if (requestParameters.defaultExerciseAlias !== undefined && requestParameters.defaultExerciseAlias !== null) {
            queryParameters['defaultExerciseAlias'] = requestParameters.defaultExerciseAlias;
        }

        
        if (requestParameters.humanMovement !== undefined && requestParameters.humanMovement !== null) {
            queryParameters['humanMovement'] = requestParameters.humanMovement;
        }

        
        if (requestParameters.movement !== undefined && requestParameters.movement !== null) {
            queryParameters['movement'] = requestParameters.movement;
        }

        
        if (requestParameters.plane !== undefined && requestParameters.plane !== null) {
            queryParameters['plane'] = requestParameters.plane;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise`,
            action: 'strengthExercise:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a strength exercise
     */
    async strengthExerciseDelete(requestParameters: StrengthExerciseDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthExercise:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List strength exercises
     */
    async strengthExerciseList(requestParameters: StrengthExerciseListRequest): Promise<StrengthExerciseListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.category !== undefined && requestParameters.category !== null) {
            queryParameters['category'] = requestParameters.category;
        }

        
        if (requestParameters.defaultAlias !== undefined && requestParameters.defaultAlias !== null) {
            queryParameters['defaultAlias'] = requestParameters.defaultAlias;
        }

        
        if (requestParameters.humanMovement !== undefined && requestParameters.humanMovement !== null) {
            queryParameters['humanMovement'] = requestParameters.humanMovement;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.movement !== undefined && requestParameters.movement !== null) {
            queryParameters['movement'] = requestParameters.movement;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.plane !== undefined && requestParameters.plane !== null) {
            queryParameters['plane'] = requestParameters.plane;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/list`,
            action: 'strengthExercise:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a strength exercise muscle
     */
    async strengthExerciseMuscleCreate(requestParameters: StrengthExerciseMuscleCreateRequest): Promise<StrengthExerciseMuscleResponse> {
        if (requestParameters.muscle === null || requestParameters.muscle === undefined) {            
            throw new runtime.RequiredError('muscle','Required parameter requestParameters.muscle was null or undefined when calling strengthExerciseMuscleCreate.');
        }
        
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling strengthExerciseMuscleCreate.');
        }
        
        if (requestParameters.targetLevel === null || requestParameters.targetLevel === undefined) {            
            throw new runtime.RequiredError('targetLevel','Required parameter requestParameters.targetLevel was null or undefined when calling strengthExerciseMuscleCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.muscle !== undefined && requestParameters.muscle !== null) {
            queryParameters['muscle'] = requestParameters.muscle;
        }

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            pathParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/{strengthExerciseId}/muscle`.replace(`{${"strengthExerciseId"}}`, encodeURIComponent(String(requestParameters.strengthExerciseId))),
            action: 'strengthExerciseMuscle:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a strength exercise muscle
     */
    async strengthExerciseMuscleDelete(requestParameters: StrengthExerciseMuscleDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseMuscleDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/muscle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthExerciseMuscle:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List strength exercise muscles
     */
    async strengthExerciseMuscleList(requestParameters: StrengthExerciseMuscleListRequest): Promise<StrengthExerciseMuscleListResponse> {
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling strengthExerciseMuscleList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.muscle !== undefined && requestParameters.muscle !== null) {
            queryParameters['muscle'] = requestParameters.muscle;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            pathParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/{strengthExerciseId}/muscle/list`.replace(`{${"strengthExerciseId"}}`, encodeURIComponent(String(requestParameters.strengthExerciseId))),
            action: 'strengthExerciseMuscle:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a strength exercise muscle
     */
    async strengthExerciseMuscleShow(requestParameters: StrengthExerciseMuscleShowRequest): Promise<StrengthExerciseMuscleResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseMuscleShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/muscle`,
            action: 'strengthExerciseMuscle:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a strength exercise muscle
     */
    async strengthExerciseMuscleUpdate(requestParameters: StrengthExerciseMuscleUpdateRequest): Promise<StrengthExerciseMuscleResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseMuscleUpdate.');
        }
        
        if (requestParameters.targetLevel === null || requestParameters.targetLevel === undefined) {            
            throw new runtime.RequiredError('targetLevel','Required parameter requestParameters.targetLevel was null or undefined when calling strengthExerciseMuscleUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/muscle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthExerciseMuscle:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a strength exercise
     */
    async strengthExerciseShow(requestParameters: StrengthExerciseShowRequest): Promise<StrengthExerciseResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise`,
            action: 'strengthExercise:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a strength exercise
     */
    async strengthExerciseUpdate(requestParameters: StrengthExerciseUpdateRequest): Promise<StrengthExerciseResponse> {
        if (requestParameters.category === null || requestParameters.category === undefined) {            
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling strengthExerciseUpdate.');
        }
        
        if (requestParameters.humanMovement === null || requestParameters.humanMovement === undefined) {            
            throw new runtime.RequiredError('humanMovement','Required parameter requestParameters.humanMovement was null or undefined when calling strengthExerciseUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseUpdate.');
        }
        
        if (requestParameters.plane === null || requestParameters.plane === undefined) {            
            throw new runtime.RequiredError('plane','Required parameter requestParameters.plane was null or undefined when calling strengthExerciseUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.category !== undefined && requestParameters.category !== null) {
            queryParameters['category'] = requestParameters.category;
        }

        
        if (requestParameters.humanMovement !== undefined && requestParameters.humanMovement !== null) {
            queryParameters['humanMovement'] = requestParameters.humanMovement;
        }

        
        if (requestParameters.movement !== undefined && requestParameters.movement !== null) {
            queryParameters['movement'] = requestParameters.movement;
        }

        
        if (requestParameters.plane !== undefined && requestParameters.plane !== null) {
            queryParameters['plane'] = requestParameters.plane;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthExercise:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a strength exercise variant
     */
    async strengthExerciseVariantCreate(requestParameters: StrengthExerciseVariantCreateRequest): Promise<StrengthExerciseVariantResponse> {
        if (requestParameters.equipmentMechanicalMovement === null || requestParameters.equipmentMechanicalMovement === undefined) {            
            throw new runtime.RequiredError('equipmentMechanicalMovement','Required parameter requestParameters.equipmentMechanicalMovement was null or undefined when calling strengthExerciseVariantCreate.');
        }
        
        if (requestParameters.strengthExerciseId === null || requestParameters.strengthExerciseId === undefined) {            
            throw new runtime.RequiredError('strengthExerciseId','Required parameter requestParameters.strengthExerciseId was null or undefined when calling strengthExerciseVariantCreate.');
        }
        
        if (requestParameters.variant === null || requestParameters.variant === undefined) {            
            throw new runtime.RequiredError('variant','Required parameter requestParameters.variant was null or undefined when calling strengthExerciseVariantCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.attachment !== undefined && requestParameters.attachment !== null) {
            queryParameters['attachment'] = requestParameters.attachment;
        }

        
        if (requestParameters.equipmentMechanicalMovement !== undefined && requestParameters.equipmentMechanicalMovement !== null) {
            queryParameters['equipmentMechanicalMovement'] = requestParameters.equipmentMechanicalMovement;
        }

        
        if (requestParameters.instructionalImage !== undefined && requestParameters.instructionalImage !== null) {
            queryParameters['instructionalImage'] = requestParameters.instructionalImage;
        }

        
        if (requestParameters.instructionalVideo !== undefined && requestParameters.instructionalVideo !== null) {
            queryParameters['instructionalVideo'] = requestParameters.instructionalVideo;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            pathParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/{strengthExerciseId}/variant`.replace(`{${"strengthExerciseId"}}`, encodeURIComponent(String(requestParameters.strengthExerciseId))),
            action: 'strengthExerciseVariant:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a strength exercise variant
     */
    async strengthExerciseVariantDelete(requestParameters: StrengthExerciseVariantDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseVariantDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/variant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthExerciseVariant:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List strength exercise variants
     */
    async strengthExerciseVariantList(requestParameters: StrengthExerciseVariantListRequest): Promise<StrengthExerciseVariantListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.attachment !== undefined && requestParameters.attachment !== null) {
            queryParameters['attachment'] = requestParameters.attachment;
        }

        
        if (requestParameters.equipmentMechanicalMovement !== undefined && requestParameters.equipmentMechanicalMovement !== null) {
            queryParameters['equipmentMechanicalMovement'] = requestParameters.equipmentMechanicalMovement;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/variant/list`,
            action: 'strengthExerciseVariant:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a strength exercise variant
     */
    async strengthExerciseVariantShow(requestParameters: StrengthExerciseVariantShowRequest): Promise<StrengthExerciseVariantResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseVariantShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/variant`,
            action: 'strengthExerciseVariant:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a strength exercise variant
     */
    async strengthExerciseVariantUpdate(requestParameters: StrengthExerciseVariantUpdateRequest): Promise<StrengthExerciseVariantResponse> {
        if (requestParameters.equipmentMechanicalMovement === null || requestParameters.equipmentMechanicalMovement === undefined) {            
            throw new runtime.RequiredError('equipmentMechanicalMovement','Required parameter requestParameters.equipmentMechanicalMovement was null or undefined when calling strengthExerciseVariantUpdate.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthExerciseVariantUpdate.');
        }
        
        if (requestParameters.variant === null || requestParameters.variant === undefined) {            
            throw new runtime.RequiredError('variant','Required parameter requestParameters.variant was null or undefined when calling strengthExerciseVariantUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.attachment !== undefined && requestParameters.attachment !== null) {
            queryParameters['attachment'] = requestParameters.attachment;
        }

        
        if (requestParameters.equipmentMechanicalMovement !== undefined && requestParameters.equipmentMechanicalMovement !== null) {
            queryParameters['equipmentMechanicalMovement'] = requestParameters.equipmentMechanicalMovement;
        }

        
        if (requestParameters.instructionalImage !== undefined && requestParameters.instructionalImage !== null) {
            queryParameters['instructionalImage'] = requestParameters.instructionalImage;
        }

        
        if (requestParameters.instructionalVideo !== undefined && requestParameters.instructionalVideo !== null) {
            queryParameters['instructionalVideo'] = requestParameters.instructionalVideo;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-exercise/variant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthExerciseVariant:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a strength machine data set
     */
    async strengthMachineDataSetCreate(requestParameters: StrengthMachineDataSetCreateRequest): Promise<StrengthMachineDataSetResponse> {
        if (requestParameters.completedAt === null || requestParameters.completedAt === undefined) {            
            throw new runtime.RequiredError('completedAt','Required parameter requestParameters.completedAt was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.peakPower === null || requestParameters.peakPower === undefined) {            
            throw new runtime.RequiredError('peakPower','Required parameter requestParameters.peakPower was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.repetitionCount === null || requestParameters.repetitionCount === undefined) {            
            throw new runtime.RequiredError('repetitionCount','Required parameter requestParameters.repetitionCount was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.resistance === null || requestParameters.resistance === undefined) {            
            throw new runtime.RequiredError('resistance','Required parameter requestParameters.resistance was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.resistancePrecision === null || requestParameters.resistancePrecision === undefined) {            
            throw new runtime.RequiredError('resistancePrecision','Required parameter requestParameters.resistancePrecision was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.serial === null || requestParameters.serial === undefined) {            
            throw new runtime.RequiredError('serial','Required parameter requestParameters.serial was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.strengthMachineId === null || requestParameters.strengthMachineId === undefined) {            
            throw new runtime.RequiredError('strengthMachineId','Required parameter requestParameters.strengthMachineId was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.version === null || requestParameters.version === undefined) {            
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        if (requestParameters.work === null || requestParameters.work === undefined) {            
            throw new runtime.RequiredError('work','Required parameter requestParameters.work was null or undefined when calling strengthMachineDataSetCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.addedWeight !== undefined && requestParameters.addedWeight !== null) {
            queryParameters['addedWeight'] = requestParameters.addedWeight;
        }

        
        if (requestParameters.autoAttachSession !== undefined && requestParameters.autoAttachSession !== null) {
            queryParameters['autoAttachSession'] = requestParameters.autoAttachSession;
        }

        
        if (requestParameters.chest !== undefined && requestParameters.chest !== null) {
            queryParameters['chest'] = requestParameters.chest;
        }

        
        if (requestParameters.completedAt !== undefined && requestParameters.completedAt !== null) {
            queryParameters['completedAt'] = (requestParameters.completedAt as any).toISOString();
        }

        
        if (requestParameters.distance !== undefined && requestParameters.distance !== null) {
            queryParameters['distance'] = requestParameters.distance;
        }

        
        if (requestParameters.forceUnit !== undefined && requestParameters.forceUnit !== null) {
            queryParameters['forceUnit'] = requestParameters.forceUnit;
        }

        
        if (requestParameters.peakPower !== undefined && requestParameters.peakPower !== null) {
            queryParameters['peakPower'] = requestParameters.peakPower;
        }

        
        if (requestParameters.repetitionCount !== undefined && requestParameters.repetitionCount !== null) {
            queryParameters['repetitionCount'] = requestParameters.repetitionCount;
        }

        
        if (requestParameters.resistance !== undefined && requestParameters.resistance !== null) {
            queryParameters['resistance'] = requestParameters.resistance;
        }

        
        if (requestParameters.resistancePrecision !== undefined && requestParameters.resistancePrecision !== null) {
            queryParameters['resistancePrecision'] = requestParameters.resistancePrecision;
        }

        
        if (requestParameters.rom1 !== undefined && requestParameters.rom1 !== null) {
            queryParameters['rom1'] = requestParameters.rom1;
        }

        
        if (requestParameters.rom2 !== undefined && requestParameters.rom2 !== null) {
            queryParameters['rom2'] = requestParameters.rom2;
        }

        
        if (requestParameters.seat !== undefined && requestParameters.seat !== null) {
            queryParameters['seat'] = requestParameters.seat;
        }

        
        if (requestParameters.serial !== undefined && requestParameters.serial !== null) {
            queryParameters['serial'] = requestParameters.serial;
        }

        
        if (requestParameters.sessionId !== undefined && requestParameters.sessionId !== null) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.version !== undefined && requestParameters.version !== null) {
            queryParameters['version'] = requestParameters.version;
        }

        
        if (requestParameters.work !== undefined && requestParameters.work !== null) {
            queryParameters['work'] = requestParameters.work;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set`,
            action: 'strengthMachineDataSet:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a strength machine data set from an A500 machine
     */
    async strengthMachineDataSetCreateA500(requestParameters: StrengthMachineDataSetCreateA500Request): Promise<StrengthMachineDataSetResponse> {
        if (requestParameters.machineToken === null || requestParameters.machineToken === undefined) {            
            throw new runtime.RequiredError('machineToken','Required parameter requestParameters.machineToken was null or undefined when calling strengthMachineDataSetCreateA500.');
        }
        
        if (requestParameters.setData === null || requestParameters.setData === undefined) {            
            throw new runtime.RequiredError('setData','Required parameter requestParameters.setData was null or undefined when calling strengthMachineDataSetCreateA500.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.deflatedSampleData !== undefined && requestParameters.deflatedSampleData !== null) {
            queryParameters['deflatedSampleData'] = requestParameters.deflatedSampleData;
        }

        
        if (requestParameters.machineToken !== undefined && requestParameters.machineToken !== null) {
            queryParameters['machineToken'] = requestParameters.machineToken;
        }

        
        if (requestParameters.setData !== undefined && requestParameters.setData !== null) {
            queryParameters['setData'] = requestParameters.setData;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set/a500`,
            action: 'strengthMachineDataSet:createA500',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a strength machine data set
     */
    async strengthMachineDataSetDelete(requestParameters: StrengthMachineDataSetDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthMachineDataSetDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthMachineDataSet:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Export an A500 strength machine data set
     */
    async strengthMachineDataSetExport(requestParameters: StrengthMachineDataSetExportRequest): Promise<StrengthMachineDataSetExportResponse> {
        if (requestParameters.format === null || requestParameters.format === undefined) {            
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling strengthMachineDataSetExport.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthMachineDataSetExport.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.format !== undefined && requestParameters.format !== null) {
            pathParameters['format'] = requestParameters.format;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set/{id}/export/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'strengthMachineDataSet:export',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Export an A500 strength machine data set as a flat file
     */
    async strengthMachineDataSetExportFlat(requestParameters: StrengthMachineDataSetExportFlatRequest): Promise<void> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {            
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling strengthMachineDataSetExportFlat.');
        }
        
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling strengthMachineDataSetExportFlat.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.filename !== undefined && requestParameters.filename !== null) {
            pathParameters['filename'] = requestParameters.filename;
        }

        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}/strength-machine-data-set/export/{filename}`.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'strengthMachineDataSet:exportFlat',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List strength machine data sets
     */
    async strengthMachineDataSetList(requestParameters: StrengthMachineDataSetListRequest): Promise<StrengthMachineDataSetListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            queryParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set/list`,
            action: 'strengthMachineDataSet:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a strength machine data set
     */
    async strengthMachineDataSetShow(requestParameters: StrengthMachineDataSetShowRequest): Promise<StrengthMachineDataSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthMachineDataSetShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set`,
            action: 'strengthMachineDataSet:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to strength machine data set changes
     */
    async strengthMachineDataSetSubscribe(requestParameters: StrengthMachineDataSetSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strengthMachineDataSet/subscribe`,
            action: 'strengthMachineDataSet:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a strength machine data set
     */
    async strengthMachineDataSetUpdate(requestParameters: StrengthMachineDataSetUpdateRequest): Promise<StrengthMachineDataSetResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthMachineDataSetUpdate.');
        }
        
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {            
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling strengthMachineDataSetUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.strengthExerciseId !== undefined && requestParameters.strengthExerciseId !== null) {
            queryParameters['strengthExerciseId'] = requestParameters.strengthExerciseId;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sessionId !== undefined && requestParameters.sessionId !== null) {
            pathParameters['sessionId'] = requestParameters.sessionId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-data-set/{id}/{sessionId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            action: 'strengthMachineDataSet:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List strength machines used by user
     */
    async strengthMachineHistoryList(requestParameters: StrengthMachineHistoryListRequest): Promise<StrengthMachineHistoryListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine-history`,
            action: 'strengthMachineHistory:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List strength machines
     */
    async strengthMachineList(requestParameters: StrengthMachineListRequest): Promise<StrengthMachineListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.line !== undefined && requestParameters.line !== null) {
            queryParameters['line'] = requestParameters.line;
        }

        
        if (requestParameters.name !== undefined && requestParameters.name !== null) {
            queryParameters['name'] = requestParameters.name;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine/list`,
            action: 'strengthMachine:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s strength machine profile stats
     */
    async strengthMachineProfileStatsShow(requestParameters: StrengthMachineProfileStatsShowRequest): Promise<StrengthMachineProfileStatsResponse> {
        if (requestParameters.strengthMachineId === null || requestParameters.strengthMachineId === undefined) {            
            throw new runtime.RequiredError('strengthMachineId','Required parameter requestParameters.strengthMachineId was null or undefined when calling strengthMachineProfileStatsShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.strengthMachineId !== undefined && requestParameters.strengthMachineId !== null) {
            pathParameters['strengthMachineId'] = requestParameters.strengthMachineId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine/{strengthMachineId}/profile-stats`.replace(`{${"strengthMachineId"}}`, encodeURIComponent(String(requestParameters.strengthMachineId))),
            action: 'strengthMachineProfileStats:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a strength machine
     */
    async strengthMachineShow(requestParameters: StrengthMachineShowRequest): Promise<StrengthMachineResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling strengthMachineShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/strength-machine`,
            action: 'strengthMachine:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a stretch exercise
     */
    async stretchExerciseCreate(requestParameters: StretchExerciseCreateRequest): Promise<StretchExerciseResponse> {
        if (requestParameters.defaultExerciseAlias === null || requestParameters.defaultExerciseAlias === undefined) {            
            throw new runtime.RequiredError('defaultExerciseAlias','Required parameter requestParameters.defaultExerciseAlias was null or undefined when calling stretchExerciseCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.defaultExerciseAlias !== undefined && requestParameters.defaultExerciseAlias !== null) {
            queryParameters['defaultExerciseAlias'] = requestParameters.defaultExerciseAlias;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise`,
            action: 'stretchExercise:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a stretch exercise
     */
    async stretchExerciseDelete(requestParameters: StretchExerciseDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'stretchExercise:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List stretch exercises
     */
    async stretchExerciseList(requestParameters: StretchExerciseListRequest): Promise<StretchExerciseListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.defaultAlias !== undefined && requestParameters.defaultAlias !== null) {
            queryParameters['defaultAlias'] = requestParameters.defaultAlias;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/list`,
            action: 'stretchExercise:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a stretch exercise muscle
     */
    async stretchExerciseMuscleCreate(requestParameters: StretchExerciseMuscleCreateRequest): Promise<StretchExerciseMuscleResponse> {
        if (requestParameters.muscle === null || requestParameters.muscle === undefined) {            
            throw new runtime.RequiredError('muscle','Required parameter requestParameters.muscle was null or undefined when calling stretchExerciseMuscleCreate.');
        }
        
        if (requestParameters.stretchExerciseId === null || requestParameters.stretchExerciseId === undefined) {            
            throw new runtime.RequiredError('stretchExerciseId','Required parameter requestParameters.stretchExerciseId was null or undefined when calling stretchExerciseMuscleCreate.');
        }
        
        if (requestParameters.targetLevel === null || requestParameters.targetLevel === undefined) {            
            throw new runtime.RequiredError('targetLevel','Required parameter requestParameters.targetLevel was null or undefined when calling stretchExerciseMuscleCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.muscle !== undefined && requestParameters.muscle !== null) {
            queryParameters['muscle'] = requestParameters.muscle;
        }

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.stretchExerciseId !== undefined && requestParameters.stretchExerciseId !== null) {
            pathParameters['stretchExerciseId'] = requestParameters.stretchExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/{stretchExerciseId}/muscle`.replace(`{${"stretchExerciseId"}}`, encodeURIComponent(String(requestParameters.stretchExerciseId))),
            action: 'stretchExerciseMuscle:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a stretch exercise muscle
     */
    async stretchExerciseMuscleDelete(requestParameters: StretchExerciseMuscleDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseMuscleDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/muscle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'stretchExerciseMuscle:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List stretch exercise muscles
     */
    async stretchExerciseMuscleList(requestParameters: StretchExerciseMuscleListRequest): Promise<StretchExerciseMuscleListResponse> {
        if (requestParameters.stretchExerciseId === null || requestParameters.stretchExerciseId === undefined) {            
            throw new runtime.RequiredError('stretchExerciseId','Required parameter requestParameters.stretchExerciseId was null or undefined when calling stretchExerciseMuscleList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.muscle !== undefined && requestParameters.muscle !== null) {
            queryParameters['muscle'] = requestParameters.muscle;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.stretchExerciseId !== undefined && requestParameters.stretchExerciseId !== null) {
            pathParameters['stretchExerciseId'] = requestParameters.stretchExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/{stretchExerciseId}/muscle/list`.replace(`{${"stretchExerciseId"}}`, encodeURIComponent(String(requestParameters.stretchExerciseId))),
            action: 'stretchExerciseMuscle:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a stretch exercise muscle
     */
    async stretchExerciseMuscleShow(requestParameters: StretchExerciseMuscleShowRequest): Promise<StretchExerciseMuscleResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseMuscleShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/muscle`,
            action: 'stretchExerciseMuscle:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a stretch exercise muscle
     */
    async stretchExerciseMuscleUpdate(requestParameters: StretchExerciseMuscleUpdateRequest): Promise<StretchExerciseMuscleResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseMuscleUpdate.');
        }
        
        if (requestParameters.targetLevel === null || requestParameters.targetLevel === undefined) {            
            throw new runtime.RequiredError('targetLevel','Required parameter requestParameters.targetLevel was null or undefined when calling stretchExerciseMuscleUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.targetLevel !== undefined && requestParameters.targetLevel !== null) {
            queryParameters['targetLevel'] = requestParameters.targetLevel;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/muscle/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'stretchExerciseMuscle:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a stretch exercise
     */
    async stretchExerciseShow(requestParameters: StretchExerciseShowRequest): Promise<StretchExerciseResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise`,
            action: 'stretchExercise:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a stretch exercise
     */
    async stretchExerciseUpdate(requestParameters: StretchExerciseUpdateRequest): Promise<StretchExerciseResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'stretchExercise:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a stretch exercise variant
     */
    async stretchExerciseVariantCreate(requestParameters: StretchExerciseVariantCreateRequest): Promise<StretchExerciseVariantResponse> {
        if (requestParameters.stretchExerciseId === null || requestParameters.stretchExerciseId === undefined) {            
            throw new runtime.RequiredError('stretchExerciseId','Required parameter requestParameters.stretchExerciseId was null or undefined when calling stretchExerciseVariantCreate.');
        }
        
        if (requestParameters.variant === null || requestParameters.variant === undefined) {            
            throw new runtime.RequiredError('variant','Required parameter requestParameters.variant was null or undefined when calling stretchExerciseVariantCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.instructionalImage !== undefined && requestParameters.instructionalImage !== null) {
            queryParameters['instructionalImage'] = requestParameters.instructionalImage;
        }

        
        if (requestParameters.instructionalVideo !== undefined && requestParameters.instructionalVideo !== null) {
            queryParameters['instructionalVideo'] = requestParameters.instructionalVideo;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.stretchExerciseId !== undefined && requestParameters.stretchExerciseId !== null) {
            pathParameters['stretchExerciseId'] = requestParameters.stretchExerciseId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/{stretchExerciseId}/variant`.replace(`{${"stretchExerciseId"}}`, encodeURIComponent(String(requestParameters.stretchExerciseId))),
            action: 'stretchExerciseVariant:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a stretch exercise variant
     */
    async stretchExerciseVariantDelete(requestParameters: StretchExerciseVariantDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseVariantDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/variant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'stretchExerciseVariant:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * List stretch exercise variants
     */
    async stretchExerciseVariantList(requestParameters: StretchExerciseVariantListRequest): Promise<StretchExerciseVariantListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.stretchExerciseId !== undefined && requestParameters.stretchExerciseId !== null) {
            queryParameters['stretchExerciseId'] = requestParameters.stretchExerciseId;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/variant/list`,
            action: 'stretchExerciseVariant:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a stretch exercise variant
     */
    async stretchExerciseVariantShow(requestParameters: StretchExerciseVariantShowRequest): Promise<StretchExerciseVariantResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseVariantShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/variant`,
            action: 'stretchExerciseVariant:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Update a stretch exercise variant
     */
    async stretchExerciseVariantUpdate(requestParameters: StretchExerciseVariantUpdateRequest): Promise<StretchExerciseVariantResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stretchExerciseVariantUpdate.');
        }
        
        if (requestParameters.variant === null || requestParameters.variant === undefined) {            
            throw new runtime.RequiredError('variant','Required parameter requestParameters.variant was null or undefined when calling stretchExerciseVariantUpdate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.instructionalImage !== undefined && requestParameters.instructionalImage !== null) {
            queryParameters['instructionalImage'] = requestParameters.instructionalImage;
        }

        
        if (requestParameters.instructionalVideo !== undefined && requestParameters.instructionalVideo !== null) {
            queryParameters['instructionalVideo'] = requestParameters.instructionalVideo;
        }

        
        if (requestParameters.variant !== undefined && requestParameters.variant !== null) {
            queryParameters['variant'] = requestParameters.variant;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stretch-exercise/variant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'stretchExerciseVariant:update',
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Deletes a user application authorization as a developer
     */
    async userApplicationAuthorizationDeveloperDelete(requestParameters: UserApplicationAuthorizationDeveloperDeleteRequest): Promise<void> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling userApplicationAuthorizationDeveloperDelete.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userApplicationAuthorizationDeveloperDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/user-application-authorization/{id}`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'userApplicationAuthorization:developerDelete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Lists user application authorizations as a developer
     */
    async userApplicationAuthorizationDeveloperList(requestParameters: UserApplicationAuthorizationDeveloperListRequest): Promise<UserApplicationAuthorizationDeveloperListResponse> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {            
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling userApplicationAuthorizationDeveloperList.');
        }
        
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling userApplicationAuthorizationDeveloperList.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.applicationId !== undefined && requestParameters.applicationId !== null) {
            queryParameters['applicationId'] = requestParameters.applicationId;
        }

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/user-application-authorization/list`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'userApplicationAuthorization:developerList',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Shows a user application authorization as a developer
     */
    async userApplicationAuthorizationDeveloperShow(requestParameters: UserApplicationAuthorizationDeveloperShowRequest): Promise<UserApplicationAuthorizationResponse> {
        if (requestParameters.developmentAccountId === null || requestParameters.developmentAccountId === undefined) {            
            throw new runtime.RequiredError('developmentAccountId','Required parameter requestParameters.developmentAccountId was null or undefined when calling userApplicationAuthorizationDeveloperShow.');
        }
        
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userApplicationAuthorizationDeveloperShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.developmentAccountId !== undefined && requestParameters.developmentAccountId !== null) {
            pathParameters['developmentAccountId'] = requestParameters.developmentAccountId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/development-account/{developmentAccountId}/user-application-authorization/`.replace(`{${"developmentAccountId"}}`, encodeURIComponent(String(requestParameters.developmentAccountId))),
            action: 'userApplicationAuthorization:developerShow',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Deletes a user application authorization
     */
    async userApplicationAuthorizationUserDelete(requestParameters: UserApplicationAuthorizationUserDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userApplicationAuthorizationUserDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/application-authorization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'userApplicationAuthorization:userDelete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Lists user application authorizations
     */
    async userApplicationAuthorizationUserList(requestParameters: UserApplicationAuthorizationUserListRequest): Promise<UserApplicationAuthorizationUserListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/application-authorization/list`,
            action: 'userApplicationAuthorization:userList',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Shows a user application authorization
     */
    async userApplicationAuthorizationUserShow(requestParameters: UserApplicationAuthorizationUserShowRequest): Promise<UserApplicationAuthorizationResponse> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userApplicationAuthorizationUserShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/application-authorization`,
            action: 'userApplicationAuthorization:userShow',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user with basic authentication
     */
    async userCreate(requestParameters: UserCreateRequest): Promise<UserResponse> {
        if (requestParameters.email === null || requestParameters.email === undefined) {            
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling userCreate.');
        }
        
        if (requestParameters.password === null || requestParameters.password === undefined) {            
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling userCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.password !== undefined && requestParameters.password !== null) {
            queryParameters['password'] = requestParameters.password;
        }

        
        if (requestParameters.refreshable !== undefined && requestParameters.refreshable !== null) {
            queryParameters['refreshable'] = requestParameters.refreshable;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            action: 'user:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

        return response;
    }

    /**
     * 1
     * Create a user with basic authentication [DEP]
     */
    async userCreateBasic(requestParameters: UserCreateBasicRequest): Promise<void> {
        if (requestParameters.email === null || requestParameters.email === undefined) {            
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling userCreateBasic.');
        }
        
        if (requestParameters.password === null || requestParameters.password === undefined) {            
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling userCreateBasic.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.email !== undefined && requestParameters.email !== null) {
            queryParameters['email'] = requestParameters.email;
        }

        
        if (requestParameters.password !== undefined && requestParameters.password !== null) {
            queryParameters['password'] = requestParameters.password;
        }

        
        if (requestParameters.refreshable !== undefined && requestParameters.refreshable !== null) {
            queryParameters['refreshable'] = requestParameters.refreshable;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/create-basic`,
            action: 'user:createBasic',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        });

    }

    /**
     * 1
     * Delete a user
     */
    async userDelete(requestParameters: UserDeleteRequest): Promise<void> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            action: 'user:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Create a user InBody integration
     */
    async userInBodyIntegrationCreate(requestParameters: UserInBodyIntegrationCreateRequest): Promise<UserInBodyIntegrationResponse> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userInBodyIntegrationCreate.');
        }
        
        if (requestParameters.userToken === null || requestParameters.userToken === undefined) {            
            throw new runtime.RequiredError('userToken','Required parameter requestParameters.userToken was null or undefined when calling userInBodyIntegrationCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userToken !== undefined && requestParameters.userToken !== null) {
            queryParameters['userToken'] = requestParameters.userToken;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}/inbody-integration`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'userInBodyIntegration:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user InBody integration
     */
    async userInBodyIntegrationDelete(requestParameters: UserInBodyIntegrationDeleteRequest): Promise<void> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userInBodyIntegrationDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}/inbody-integration`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'userInBodyIntegration:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show a user InBody integration settings
     */
    async userInBodyIntegrationShow(requestParameters: UserInBodyIntegrationShowRequest): Promise<UserInBodyIntegrationResponse> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userInBodyIntegrationShow.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}/inbody-integration`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'userInBodyIntegration:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Request a sync of user InBody data
     */
    async userInBodyIntegrationSync(requestParameters: UserInBodyIntegrationSyncRequest): Promise<void> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userInBodyIntegrationSync.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}/inbody-integration/sync`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'userInBodyIntegration:sync',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Show a user
     */
    async userShow(requestParameters: UserShowRequest): Promise<UserResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            action: 'user:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to a user
     */
    async userSubscribe(requestParameters: UserSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/subscribe`,
            action: 'user:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Create a user weight measurement
     */
    async weightMeasurementCreate(requestParameters: WeightMeasurementCreateRequest): Promise<WeightMeasurementResponse> {
        if (requestParameters.metricWeight === null || requestParameters.metricWeight === undefined) {            
            throw new runtime.RequiredError('metricWeight','Required parameter requestParameters.metricWeight was null or undefined when calling weightMeasurementCreate.');
        }
        
        if (requestParameters.source === null || requestParameters.source === undefined) {            
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling weightMeasurementCreate.');
        }
        
        if (requestParameters.takenAt === null || requestParameters.takenAt === undefined) {            
            throw new runtime.RequiredError('takenAt','Required parameter requestParameters.takenAt was null or undefined when calling weightMeasurementCreate.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.bodyFatPercentage !== undefined && requestParameters.bodyFatPercentage !== null) {
            queryParameters['bodyFatPercentage'] = requestParameters.bodyFatPercentage;
        }

        
        if (requestParameters.metricWeight !== undefined && requestParameters.metricWeight !== null) {
            queryParameters['metricWeight'] = requestParameters.metricWeight;
        }

        
        if (requestParameters.source !== undefined && requestParameters.source !== null) {
            queryParameters['source'] = requestParameters.source;
        }

        
        if (requestParameters.takenAt !== undefined && requestParameters.takenAt !== null) {
            queryParameters['takenAt'] = (requestParameters.takenAt as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/weight-measurement`,
            action: 'weightMeasurement:create',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Delete a user\'s weight measurement
     */
    async weightMeasurementDelete(requestParameters: WeightMeasurementDeleteRequest): Promise<void> {
        if (requestParameters.id === null || requestParameters.id === undefined) {            
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling weightMeasurementDelete.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            pathParameters['id'] = requestParameters.id;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/weight-measurement/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            action: 'weightMeasurement:delete',
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

    }

    /**
     * 1
     * Creates body composition record from InBody machine
     */
    async weightMeasurementImportInBody(requestParameters: WeightMeasurementImportInBodyRequest): Promise<WeightMeasurementResponse> {
        if (requestParameters.jsonString === null || requestParameters.jsonString === undefined) {            
            throw new runtime.RequiredError('jsonString','Required parameter requestParameters.jsonString was null or undefined when calling weightMeasurementImportInBody.');
        }
        
        if (requestParameters.userId === null || requestParameters.userId === undefined) {            
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling weightMeasurementImportInBody.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.jsonString !== undefined && requestParameters.jsonString !== null) {
            queryParameters['jsonString'] = requestParameters.jsonString;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            pathParameters['userId'] = requestParameters.userId;
        }



        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}/weight-measurement/import-inbody`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            action: 'weightMeasurement:importInBody',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Creates body composition record from csv and converts to json
     */
    async weightMeasurementImportInBodyCSV(requestParameters: WeightMeasurementImportInBodyCSVRequest): Promise<WeightMeasurementListResponse> {
        if (requestParameters.csvString === null || requestParameters.csvString === undefined) {            
            throw new runtime.RequiredError('csvString','Required parameter requestParameters.csvString was null or undefined when calling weightMeasurementImportInBodyCSV.');
        }
        
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.csvString !== undefined && requestParameters.csvString !== null) {
            queryParameters['csvString'] = requestParameters.csvString;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/weight-measurement/import-inbody-csv`,
            action: 'weightMeasurement:importInBodyCSV',
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * List a user\'s weight measurements
     */
    async weightMeasurementList(requestParameters: WeightMeasurementListRequest): Promise<WeightMeasurementListResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.ascending !== undefined && requestParameters.ascending !== null) {
            queryParameters['ascending'] = requestParameters.ascending;
        }

        
        if (requestParameters.from !== undefined && requestParameters.from !== null) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        
        if (requestParameters.limit !== undefined && requestParameters.limit !== null) {
            queryParameters['limit'] = requestParameters.limit;
        }

        
        if (requestParameters.offset !== undefined && requestParameters.offset !== null) {
            queryParameters['offset'] = requestParameters.offset;
        }

        
        if (requestParameters.sort !== undefined && requestParameters.sort !== null) {
            queryParameters['sort'] = requestParameters.sort;
        }

        
        if (requestParameters.to !== undefined && requestParameters.to !== null) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/weight-measurement/list`,
            action: 'weightMeasurement:list',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Show a user\'s weight measurement
     */
    async weightMeasurementShow(requestParameters: WeightMeasurementShowRequest): Promise<WeightMeasurementResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/weight-measurement`,
            action: 'weightMeasurement:show',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

    /**
     * 1
     * Subscribe to changes to user\'s weight measurements
     */
    async weightMeasurementSubscribe(requestParameters: WeightMeasurementSubscribeRequest): Promise<SubscriptionResponse> {
        const queryParameters: any = {};
        const pathParameters: any = {};

        
        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        
        if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
            queryParameters['userId'] = requestParameters.userId;
        }

        
        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            queryParameters['apiVersion'] = requestParameters.apiVersion;
        }


        if (requestParameters.apiVersion === undefined) {
            queryParameters['apiVersion'] = 1;
        }


        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/weightMeasurement/subscribe`,
            action: 'weightMeasurement:subscribe',
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            pathParams: pathParameters,
        },
        true
        );

        return response;
    }

}
